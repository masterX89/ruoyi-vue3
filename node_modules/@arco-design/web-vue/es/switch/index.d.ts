import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _Switch from './switch';
declare const Switch: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            modelValue: string | number | boolean;
            disabled: boolean;
            size: "small" | "medium";
            defaultChecked: boolean;
            loading: boolean;
            type: "circle" | "line" | "round";
            checkedValue: string | number | boolean;
            uncheckedValue: string | number | boolean;
        }> & Omit<Readonly<{
            modelValue?: unknown;
            defaultChecked?: unknown;
            disabled?: unknown;
            loading?: unknown;
            type?: unknown;
            size?: unknown;
            checkedValue?: unknown;
            uncheckedValue?: unknown;
            checkedColor?: unknown;
            uncheckedColor?: unknown;
            onChange?: unknown;
        } & {
            disabled: boolean;
            size: "small" | "medium";
            defaultChecked: boolean;
            loading: boolean;
            type: "circle" | "line" | "round";
            checkedValue: string | number | boolean;
            uncheckedValue: string | number | boolean;
        } & {
            modelValue?: string | number | boolean | undefined;
            onChange?: import("../_utils/types").EmitType<(value: string | number | boolean) => void> | undefined;
            checkedColor?: string | undefined;
            uncheckedColor?: string | undefined;
        }> & {
            onChange?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "modelValue" | "disabled" | "size" | "defaultChecked" | "loading" | "type" | "checkedValue" | "uncheckedValue">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "change" | "update:modelValue", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            modelValue?: unknown;
            defaultChecked?: unknown;
            disabled?: unknown;
            loading?: unknown;
            type?: unknown;
            size?: unknown;
            checkedValue?: unknown;
            uncheckedValue?: unknown;
            checkedColor?: unknown;
            uncheckedColor?: unknown;
            onChange?: unknown;
        } & {
            disabled: boolean;
            size: "small" | "medium";
            defaultChecked: boolean;
            loading: boolean;
            type: "circle" | "line" | "round";
            checkedValue: string | number | boolean;
            uncheckedValue: string | number | boolean;
        } & {
            modelValue?: string | number | boolean | undefined;
            onChange?: import("../_utils/types").EmitType<(value: string | number | boolean) => void> | undefined;
            checkedColor?: string | undefined;
            uncheckedColor?: string | undefined;
        }> & {
            onChange?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        }, {
            prefixCls: string;
            cls: import("vue").ComputedRef<(string | {
                [x: string]: boolean;
            })[]>;
            buttonStyle: import("vue").ComputedRef<{
                backgroundColor: string;
            } | undefined>;
            computedCheck: import("vue").ComputedRef<boolean>;
            handleClick: (ev: Event) => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue")[], string, {
            modelValue: string | number | boolean;
            disabled: boolean;
            size: "small" | "medium";
            defaultChecked: boolean;
            loading: boolean;
            type: "circle" | "line" | "round";
            checkedValue: string | number | boolean;
            uncheckedValue: string | number | boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        modelValue?: unknown;
        defaultChecked?: unknown;
        disabled?: unknown;
        loading?: unknown;
        type?: unknown;
        size?: unknown;
        checkedValue?: unknown;
        uncheckedValue?: unknown;
        checkedColor?: unknown;
        uncheckedColor?: unknown;
        onChange?: unknown;
    } & {
        disabled: boolean;
        size: "small" | "medium";
        defaultChecked: boolean;
        loading: boolean;
        type: "circle" | "line" | "round";
        checkedValue: string | number | boolean;
        uncheckedValue: string | number | boolean;
    } & {
        modelValue?: string | number | boolean | undefined;
        onChange?: import("../_utils/types").EmitType<(value: string | number | boolean) => void> | undefined;
        checkedColor?: string | undefined;
        uncheckedColor?: string | undefined;
    }> & {
        onChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        prefixCls: string;
        cls: import("vue").ComputedRef<(string | {
            [x: string]: boolean;
        })[]>;
        buttonStyle: import("vue").ComputedRef<{
            backgroundColor: string;
        } | undefined>;
        computedCheck: import("vue").ComputedRef<boolean>;
        handleClick: (ev: Event) => void;
    }> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    modelValue?: unknown;
    defaultChecked?: unknown;
    disabled?: unknown;
    loading?: unknown;
    type?: unknown;
    size?: unknown;
    checkedValue?: unknown;
    uncheckedValue?: unknown;
    checkedColor?: unknown;
    uncheckedColor?: unknown;
    onChange?: unknown;
} & {
    disabled: boolean;
    size: "small" | "medium";
    defaultChecked: boolean;
    loading: boolean;
    type: "circle" | "line" | "round";
    checkedValue: string | number | boolean;
    uncheckedValue: string | number | boolean;
} & {
    modelValue?: string | number | boolean | undefined;
    onChange?: import("../_utils/types").EmitType<(value: string | number | boolean) => void> | undefined;
    checkedColor?: string | undefined;
    uncheckedColor?: string | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    prefixCls: string;
    cls: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    buttonStyle: import("vue").ComputedRef<{
        backgroundColor: string;
    } | undefined>;
    computedCheck: import("vue").ComputedRef<boolean>;
    handleClick: (ev: Event) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue")[], "change" | "update:modelValue", {
    modelValue: string | number | boolean;
    disabled: boolean;
    size: "small" | "medium";
    defaultChecked: boolean;
    loading: boolean;
    type: "circle" | "line" | "round";
    checkedValue: string | number | boolean;
    uncheckedValue: string | number | boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type SwitchInstance = InstanceType<typeof _Switch>;
export default Switch;
