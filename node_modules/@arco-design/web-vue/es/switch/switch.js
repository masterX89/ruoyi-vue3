import { defineComponent, inject, ref, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createElementVNode, createBlock, Fragment, renderSlot, createCommentVNode } from "vue";
import { getPrefixCls } from "../_utils/global-config.js";
import IconLoading from "../icon/icon-loading/index.js";
import { configProviderInjectionKey } from "../config-provider/context.js";
import _export_sfc from "../_virtual/plugin-vue_export-helper";
const _sfc_main = defineComponent({
  name: "Switch",
  components: {
    IconLoading
  },
  props: {
    modelValue: {
      type: [String, Number, Boolean],
      default: void 0
    },
    defaultChecked: {
      type: Boolean,
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    },
    loading: {
      type: Boolean,
      default: false
    },
    type: {
      type: String,
      default: "circle"
    },
    size: {
      type: String,
      default: () => {
        var _a, _b;
        const _size = (_b = (_a = inject(configProviderInjectionKey, void 0)) == null ? void 0 : _a.size) != null ? _b : "medium";
        if (_size === "mini") {
          return "small";
        }
        if (_size === "large") {
          return "medium";
        }
        return _size;
      }
    },
    checkedValue: {
      type: [String, Number, Boolean],
      default: true
    },
    uncheckedValue: {
      type: [String, Number, Boolean],
      default: false
    },
    checkedColor: {
      type: String
    },
    uncheckedColor: {
      type: String
    },
    onChange: {
      type: [Function, Array]
    }
  },
  emits: [
    "update:modelValue",
    "change"
  ],
  setup(props, { emit }) {
    const prefixCls = getPrefixCls("switch");
    const _checked = ref(props.defaultChecked ? props.checkedValue : props.uncheckedValue);
    const computedCheck = computed(() => {
      var _a;
      return ((_a = props.modelValue) != null ? _a : _checked.value) === props.checkedValue;
    });
    const handleClick = (ev) => {
      if (props.loading || props.disabled) {
        return;
      }
      const checked = !computedCheck.value;
      _checked.value = checked ? props.checkedValue : props.uncheckedValue;
      emit("update:modelValue", _checked.value);
      emit("change", _checked.value, ev);
    };
    const cls = computed(() => [
      prefixCls,
      `${prefixCls}-type-${props.type}`,
      {
        [`${prefixCls}-small`]: props.size === "small" || props.size === "mini",
        [`${prefixCls}-checked`]: computedCheck.value,
        [`${prefixCls}-disabled`]: props.disabled,
        [`${prefixCls}-loading`]: props.loading
      }
    ]);
    const buttonStyle = computed(() => {
      if (computedCheck.value && props.checkedColor) {
        return {
          backgroundColor: props.checkedColor
        };
      }
      if (!computedCheck.value && props.uncheckedColor) {
        return {
          backgroundColor: props.uncheckedColor
        };
      }
      return void 0;
    });
    return {
      prefixCls,
      cls,
      buttonStyle,
      computedCheck,
      handleClick
    };
  }
});
const _hoisted_1 = ["disabled"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_icon_loading = resolveComponent("icon-loading");
  return openBlock(), createElementBlock("button", {
    type: "button",
    class: normalizeClass(_ctx.cls),
    style: normalizeStyle(_ctx.buttonStyle),
    disabled: _ctx.disabled,
    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))
  }, [
    createElementVNode("span", {
      class: normalizeClass(`${_ctx.prefixCls}-handle`)
    }, [
      createElementVNode("span", {
        class: normalizeClass(`${_ctx.prefixCls}-handle-icon`)
      }, [
        _ctx.loading ? (openBlock(), createBlock(_component_icon_loading, { key: 0 })) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
          _ctx.computedCheck ? renderSlot(_ctx.$slots, "checked-icon", { key: 0 }) : renderSlot(_ctx.$slots, "unchecked-icon", { key: 1 })
        ], 2112))
      ], 2)
    ], 2),
    createCommentVNode("  prettier-ignore  "),
    _ctx.type !== "line" && _ctx.size !== "small" && (_ctx.$slots.checked || _ctx.$slots.unchecked) ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
      createElementVNode("span", {
        class: normalizeClass(`${_ctx.prefixCls}-text-holder`)
      }, [
        _ctx.computedCheck ? renderSlot(_ctx.$slots, "checked", { key: 0 }) : renderSlot(_ctx.$slots, "unchecked", { key: 1 })
      ], 2),
      createElementVNode("span", {
        class: normalizeClass(`${_ctx.prefixCls}-text`)
      }, [
        _ctx.computedCheck ? renderSlot(_ctx.$slots, "checked", { key: 0 }) : renderSlot(_ctx.$slots, "unchecked", { key: 1 })
      ], 2)
    ], 64)) : createCommentVNode("v-if", true)
  ], 14, _hoisted_1);
}
var _Switch = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _Switch as default };
