import { PropType } from 'vue';
import { FieldRule } from './interface';
declare const _default: import("vue").DefineComponent<{
    field: {
        type: StringConstructor;
        default: string;
    };
    label: StringConstructor;
    showColon: {
        type: BooleanConstructor;
        default: boolean;
    };
    noStyle: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: undefined;
    };
    help: StringConstructor;
    extra: StringConstructor;
    required: {
        type: BooleanConstructor;
        default: boolean;
    };
    rules: {
        type: PropType<FieldRule<any> | FieldRule<any>[]>;
    };
    validateStatus: {
        type: PropType<"error" | "success" | "warning" | "validating">;
    };
    validateTrigger: {
        type: PropType<"focus" | "blur" | "input" | "change" | ("focus" | "blur" | "input" | "change")[]>;
        default: string;
    };
    labelColProps: ObjectConstructor;
    wrapperColProps: ObjectConstructor;
    hideLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideAsterisk: {
        type: BooleanConstructor;
        default: boolean;
    };
    labelColStyle: ObjectConstructor;
    wrapperColStyle: ObjectConstructor;
    rowProps: ObjectConstructor;
    rowClass: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
    contentClass: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
    contentFlex: {
        type: BooleanConstructor;
        default: boolean;
    };
    mergeProps: {
        type: PropType<boolean | ((props: Record<string, any>) => Record<string, any>)>;
        default: boolean;
    };
    labelColFlex: {
        type: (StringConstructor | NumberConstructor)[];
    };
}, () => JSX.Element | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>[], unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    field?: unknown;
    label?: unknown;
    showColon?: unknown;
    noStyle?: unknown;
    disabled?: unknown;
    help?: unknown;
    extra?: unknown;
    required?: unknown;
    rules?: unknown;
    validateStatus?: unknown;
    validateTrigger?: unknown;
    labelColProps?: unknown;
    wrapperColProps?: unknown;
    hideLabel?: unknown;
    hideAsterisk?: unknown;
    labelColStyle?: unknown;
    wrapperColStyle?: unknown;
    rowProps?: unknown;
    rowClass?: unknown;
    contentClass?: unknown;
    contentFlex?: unknown;
    mergeProps?: unknown;
    labelColFlex?: unknown;
} & {
    required: boolean;
    showColon: boolean;
    field: string;
    noStyle: boolean;
    validateTrigger: "focus" | "blur" | "input" | "change" | ("focus" | "blur" | "input" | "change")[];
    hideLabel: boolean;
    hideAsterisk: boolean;
    contentFlex: boolean;
    mergeProps: boolean | ((props: Record<string, any>) => Record<string, any>);
} & {
    label?: string | undefined;
    disabled?: boolean | undefined;
    help?: string | undefined;
    contentClass?: string | unknown[] | Record<string, any> | undefined;
    extra?: string | undefined;
    labelColProps?: Record<string, any> | undefined;
    wrapperColProps?: Record<string, any> | undefined;
    labelColStyle?: Record<string, any> | undefined;
    wrapperColStyle?: Record<string, any> | undefined;
    rules?: FieldRule<any> | FieldRule<any>[] | undefined;
    validateStatus?: "error" | "success" | "warning" | "validating" | undefined;
    rowProps?: Record<string, any> | undefined;
    rowClass?: string | unknown[] | Record<string, any> | undefined;
    labelColFlex?: string | number | undefined;
}>, {
    disabled: boolean;
    required: boolean;
    showColon: boolean;
    field: string;
    noStyle: boolean;
    validateTrigger: "focus" | "blur" | "input" | "change" | ("focus" | "blur" | "input" | "change")[];
    hideLabel: boolean;
    hideAsterisk: boolean;
    contentFlex: boolean;
    mergeProps: boolean | ((props: Record<string, any>) => Record<string, any>);
}>;
export default _default;
