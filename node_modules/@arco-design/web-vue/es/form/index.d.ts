import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _Form from './form';
import _FormItem from './form-item';
declare const Form: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            disabled: boolean;
            size: "small" | "mini" | "medium" | "large";
            layout: "horizontal" | "vertical" | "inline";
            labelColProps: Record<string, any>;
            wrapperColProps: Record<string, any>;
            labelAlign: "left" | "right";
            autoLabelWidth: boolean;
        }> & Omit<Readonly<{
            model?: unknown;
            layout?: unknown;
            size?: unknown;
            labelColProps?: unknown;
            wrapperColProps?: unknown;
            labelColStyle?: unknown;
            wrapperColStyle?: unknown;
            labelAlign?: unknown;
            disabled?: unknown;
            rules?: unknown;
            autoLabelWidth?: unknown;
            onSubmit?: unknown;
            onSubmitSuccess?: unknown;
            onSubmitFailed?: unknown;
        } & {
            size: "small" | "mini" | "medium" | "large";
            layout: "horizontal" | "vertical" | "inline";
            model: Record<string, any>;
            labelColProps: Record<string, any>;
            wrapperColProps: Record<string, any>;
            labelAlign: "left" | "right";
            autoLabelWidth: boolean;
        } & {
            disabled?: boolean | undefined;
            onSubmit?: import("../_utils/types").EmitType<(data: any) => void> | undefined;
            onSubmitSuccess?: import("../_utils/types").EmitType<(values: any) => void> | undefined;
            onSubmitFailed?: import("../_utils/types").EmitType<(data: any) => void> | undefined;
            labelColStyle?: Record<string, any> | undefined;
            wrapperColStyle?: Record<string, any> | undefined;
            rules?: Record<string, import("./interface").FieldRule<any> | import("./interface").FieldRule<any>[]> | undefined;
        }> & {
            onSubmit?: ((...args: any[]) => any) | undefined;
            onSubmitSuccess?: ((...args: any[]) => any) | undefined;
            onSubmitFailed?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "size" | "layout" | "labelColProps" | "wrapperColProps" | "labelAlign" | "autoLabelWidth">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "submit" | "submitSuccess" | "submitFailed", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            model?: unknown;
            layout?: unknown;
            size?: unknown;
            labelColProps?: unknown;
            wrapperColProps?: unknown;
            labelColStyle?: unknown;
            wrapperColStyle?: unknown;
            labelAlign?: unknown;
            disabled?: unknown;
            rules?: unknown;
            autoLabelWidth?: unknown;
            onSubmit?: unknown;
            onSubmitSuccess?: unknown;
            onSubmitFailed?: unknown;
        } & {
            size: "small" | "mini" | "medium" | "large";
            layout: "horizontal" | "vertical" | "inline";
            model: Record<string, any>;
            labelColProps: Record<string, any>;
            wrapperColProps: Record<string, any>;
            labelAlign: "left" | "right";
            autoLabelWidth: boolean;
        } & {
            disabled?: boolean | undefined;
            onSubmit?: import("../_utils/types").EmitType<(data: any) => void> | undefined;
            onSubmitSuccess?: import("../_utils/types").EmitType<(values: any) => void> | undefined;
            onSubmitFailed?: import("../_utils/types").EmitType<(data: any) => void> | undefined;
            labelColStyle?: Record<string, any> | undefined;
            wrapperColStyle?: Record<string, any> | undefined;
            rules?: Record<string, import("./interface").FieldRule<any> | import("./interface").FieldRule<any>[]> | undefined;
        }> & {
            onSubmit?: ((...args: any[]) => any) | undefined;
            onSubmitSuccess?: ((...args: any[]) => any) | undefined;
            onSubmitFailed?: ((...args: any[]) => any) | undefined;
        }, {
            cls: import("vue").ComputedRef<string[]>;
            handleSubmit: (e: Event) => void;
            innerValidate: (callback?: ((errors: Record<string, import("./interface").ValidatedError> | undefined) => void) | undefined) => Promise<Record<string, import("./interface").ValidatedError> | undefined>;
            innerValidateField: (field: string | string[], callback?: ((errors: Record<string, import("./interface").ValidatedError> | undefined) => void) | undefined) => Promise<Record<string, import("./interface").ValidatedError> | undefined>;
            innerResetFields: () => void;
            innerClearValidate: () => void;
            innerSetFields: (data: Record<string, import("./interface").FieldData>) => void;
        }, unknown, {}, {
            validate(callback?: ((errors: Record<string, import("./interface").ValidatedError> | undefined) => void) | undefined): Promise<Record<string, import("./interface").ValidatedError> | undefined>;
            validateField(field: string | string[], callback?: ((errors: Record<string, import("./interface").ValidatedError> | undefined) => void) | undefined): Promise<Record<string, import("./interface").ValidatedError> | undefined>;
            resetFields(): void;
            clearValidate(): void;
            setFields(data: Record<string, import("./interface").FieldData>): void;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("submit" | "submitSuccess" | "submitFailed")[], string, {
            disabled: boolean;
            size: "small" | "mini" | "medium" | "large";
            layout: "horizontal" | "vertical" | "inline";
            labelColProps: Record<string, any>;
            wrapperColProps: Record<string, any>;
            labelAlign: "left" | "right";
            autoLabelWidth: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        model?: unknown;
        layout?: unknown;
        size?: unknown;
        labelColProps?: unknown;
        wrapperColProps?: unknown;
        labelColStyle?: unknown;
        wrapperColStyle?: unknown;
        labelAlign?: unknown;
        disabled?: unknown;
        rules?: unknown;
        autoLabelWidth?: unknown;
        onSubmit?: unknown;
        onSubmitSuccess?: unknown;
        onSubmitFailed?: unknown;
    } & {
        size: "small" | "mini" | "medium" | "large";
        layout: "horizontal" | "vertical" | "inline";
        model: Record<string, any>;
        labelColProps: Record<string, any>;
        wrapperColProps: Record<string, any>;
        labelAlign: "left" | "right";
        autoLabelWidth: boolean;
    } & {
        disabled?: boolean | undefined;
        onSubmit?: import("../_utils/types").EmitType<(data: any) => void> | undefined;
        onSubmitSuccess?: import("../_utils/types").EmitType<(values: any) => void> | undefined;
        onSubmitFailed?: import("../_utils/types").EmitType<(data: any) => void> | undefined;
        labelColStyle?: Record<string, any> | undefined;
        wrapperColStyle?: Record<string, any> | undefined;
        rules?: Record<string, import("./interface").FieldRule<any> | import("./interface").FieldRule<any>[]> | undefined;
    }> & {
        onSubmit?: ((...args: any[]) => any) | undefined;
        onSubmitSuccess?: ((...args: any[]) => any) | undefined;
        onSubmitFailed?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        cls: import("vue").ComputedRef<string[]>;
        handleSubmit: (e: Event) => void;
        innerValidate: (callback?: ((errors: Record<string, import("./interface").ValidatedError> | undefined) => void) | undefined) => Promise<Record<string, import("./interface").ValidatedError> | undefined>;
        innerValidateField: (field: string | string[], callback?: ((errors: Record<string, import("./interface").ValidatedError> | undefined) => void) | undefined) => Promise<Record<string, import("./interface").ValidatedError> | undefined>;
        innerResetFields: () => void;
        innerClearValidate: () => void;
        innerSetFields: (data: Record<string, import("./interface").FieldData>) => void;
    }> & {} & {} & {
        validate(callback?: ((errors: Record<string, import("./interface").ValidatedError> | undefined) => void) | undefined): Promise<Record<string, import("./interface").ValidatedError> | undefined>;
        validateField(field: string | string[], callback?: ((errors: Record<string, import("./interface").ValidatedError> | undefined) => void) | undefined): Promise<Record<string, import("./interface").ValidatedError> | undefined>;
        resetFields(): void;
        clearValidate(): void;
        setFields(data: Record<string, import("./interface").FieldData>): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    model?: unknown;
    layout?: unknown;
    size?: unknown;
    labelColProps?: unknown;
    wrapperColProps?: unknown;
    labelColStyle?: unknown;
    wrapperColStyle?: unknown;
    labelAlign?: unknown;
    disabled?: unknown;
    rules?: unknown;
    autoLabelWidth?: unknown;
    onSubmit?: unknown;
    onSubmitSuccess?: unknown;
    onSubmitFailed?: unknown;
} & {
    size: "small" | "mini" | "medium" | "large";
    layout: "horizontal" | "vertical" | "inline";
    model: Record<string, any>;
    labelColProps: Record<string, any>;
    wrapperColProps: Record<string, any>;
    labelAlign: "left" | "right";
    autoLabelWidth: boolean;
} & {
    disabled?: boolean | undefined;
    onSubmit?: import("../_utils/types").EmitType<(data: any) => void> | undefined;
    onSubmitSuccess?: import("../_utils/types").EmitType<(values: any) => void> | undefined;
    onSubmitFailed?: import("../_utils/types").EmitType<(data: any) => void> | undefined;
    labelColStyle?: Record<string, any> | undefined;
    wrapperColStyle?: Record<string, any> | undefined;
    rules?: Record<string, import("./interface").FieldRule<any> | import("./interface").FieldRule<any>[]> | undefined;
}> & {
    onSubmit?: ((...args: any[]) => any) | undefined;
    onSubmitSuccess?: ((...args: any[]) => any) | undefined;
    onSubmitFailed?: ((...args: any[]) => any) | undefined;
}, {
    cls: import("vue").ComputedRef<string[]>;
    handleSubmit: (e: Event) => void;
    innerValidate: (callback?: ((errors: Record<string, import("./interface").ValidatedError> | undefined) => void) | undefined) => Promise<Record<string, import("./interface").ValidatedError> | undefined>;
    innerValidateField: (field: string | string[], callback?: ((errors: Record<string, import("./interface").ValidatedError> | undefined) => void) | undefined) => Promise<Record<string, import("./interface").ValidatedError> | undefined>;
    innerResetFields: () => void;
    innerClearValidate: () => void;
    innerSetFields: (data: Record<string, import("./interface").FieldData>) => void;
}, unknown, {}, {
    validate(callback?: ((errors: Record<string, import("./interface").ValidatedError> | undefined) => void) | undefined): Promise<Record<string, import("./interface").ValidatedError> | undefined>;
    validateField(field: string | string[], callback?: ((errors: Record<string, import("./interface").ValidatedError> | undefined) => void) | undefined): Promise<Record<string, import("./interface").ValidatedError> | undefined>;
    resetFields(): void;
    clearValidate(): void;
    setFields(data: Record<string, import("./interface").FieldData>): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("submit" | "submitSuccess" | "submitFailed")[], "submit" | "submitSuccess" | "submitFailed", {
    disabled: boolean;
    size: "small" | "mini" | "medium" | "large";
    layout: "horizontal" | "vertical" | "inline";
    labelColProps: Record<string, any>;
    wrapperColProps: Record<string, any>;
    labelAlign: "left" | "right";
    autoLabelWidth: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    Item: import("vue").DefineComponent<{
        field: {
            type: StringConstructor;
            default: string;
        };
        label: StringConstructor;
        showColon: {
            type: BooleanConstructor;
            default: boolean;
        };
        noStyle: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: undefined;
        };
        help: StringConstructor;
        extra: StringConstructor;
        required: {
            type: BooleanConstructor;
            default: boolean;
        };
        rules: {
            type: import("vue").PropType<import("./interface").FieldRule<any> | import("./interface").FieldRule<any>[]>;
        };
        validateStatus: {
            type: import("vue").PropType<"error" | "success" | "warning" | "validating">;
        };
        validateTrigger: {
            type: import("vue").PropType<"focus" | "blur" | "input" | "change" | ("focus" | "blur" | "input" | "change")[]>;
            default: string;
        };
        labelColProps: ObjectConstructor;
        wrapperColProps: ObjectConstructor;
        hideLabel: {
            type: BooleanConstructor;
            default: boolean;
        };
        hideAsterisk: {
            type: BooleanConstructor;
            default: boolean;
        };
        labelColStyle: ObjectConstructor;
        wrapperColStyle: ObjectConstructor;
        rowProps: ObjectConstructor;
        rowClass: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
        contentClass: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
        contentFlex: {
            type: BooleanConstructor;
            default: boolean;
        };
        mergeProps: {
            type: import("vue").PropType<boolean | ((props: Record<string, any>) => Record<string, any>)>;
            default: boolean;
        };
        labelColFlex: {
            type: (StringConstructor | NumberConstructor)[];
        };
    }, () => JSX.Element | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[], unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        field?: unknown;
        label?: unknown;
        showColon?: unknown;
        noStyle?: unknown;
        disabled?: unknown;
        help?: unknown;
        extra?: unknown;
        required?: unknown;
        rules?: unknown;
        validateStatus?: unknown;
        validateTrigger?: unknown;
        labelColProps?: unknown;
        wrapperColProps?: unknown;
        hideLabel?: unknown;
        hideAsterisk?: unknown;
        labelColStyle?: unknown;
        wrapperColStyle?: unknown;
        rowProps?: unknown;
        rowClass?: unknown;
        contentClass?: unknown;
        contentFlex?: unknown;
        mergeProps?: unknown;
        labelColFlex?: unknown;
    } & {
        required: boolean;
        showColon: boolean;
        field: string;
        noStyle: boolean;
        validateTrigger: "focus" | "blur" | "input" | "change" | ("focus" | "blur" | "input" | "change")[];
        hideLabel: boolean;
        hideAsterisk: boolean;
        contentFlex: boolean;
        mergeProps: boolean | ((props: Record<string, any>) => Record<string, any>);
    } & {
        label?: string | undefined;
        disabled?: boolean | undefined;
        help?: string | undefined;
        contentClass?: string | unknown[] | Record<string, any> | undefined;
        extra?: string | undefined;
        labelColProps?: Record<string, any> | undefined;
        wrapperColProps?: Record<string, any> | undefined;
        labelColStyle?: Record<string, any> | undefined;
        wrapperColStyle?: Record<string, any> | undefined;
        rules?: import("./interface").FieldRule<any> | import("./interface").FieldRule<any>[] | undefined;
        validateStatus?: "error" | "success" | "warning" | "validating" | undefined;
        rowProps?: Record<string, any> | undefined;
        rowClass?: string | unknown[] | Record<string, any> | undefined;
        labelColFlex?: string | number | undefined;
    }>, {
        disabled: boolean;
        required: boolean;
        showColon: boolean;
        field: string;
        noStyle: boolean;
        validateTrigger: "focus" | "blur" | "input" | "change" | ("focus" | "blur" | "input" | "change")[];
        hideLabel: boolean;
        hideAsterisk: boolean;
        contentFlex: boolean;
        mergeProps: boolean | ((props: Record<string, any>) => Record<string, any>);
    }>;
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type FormInstance = InstanceType<typeof _Form>;
export declare type FormItemInstance = InstanceType<typeof _FormItem>;
export { _FormItem as FormItem };
export default Form;
