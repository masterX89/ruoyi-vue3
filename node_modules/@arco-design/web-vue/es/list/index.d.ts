import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _List from './list';
import _ListItem from './list-item';
import _ListItemMeta from './list-item-meta';
declare const List: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            size: "small" | "medium" | "large";
            loading: boolean;
            bottomOffset: number;
            bordered: boolean;
            maxHeight: number;
            hoverable: boolean;
            split: boolean;
        }> & Omit<Readonly<{
            data?: unknown;
            size?: unknown;
            bordered?: unknown;
            split?: unknown;
            loading?: unknown;
            hoverable?: unknown;
            paginationProps?: unknown;
            gridProps?: unknown;
            maxHeight?: unknown;
            bottomOffset?: unknown;
            virtualListProps?: unknown;
        } & {
            size: "small" | "medium" | "large";
            loading: boolean;
            bottomOffset: number;
            bordered: boolean;
            maxHeight: number;
            hoverable: boolean;
            split: boolean;
        } & {
            data?: any[] | undefined;
            paginationProps?: (Partial<{
                disabled: boolean;
                size: "small" | "mini" | "medium" | "large";
                defaultCurrent: number;
                defaultPageSize: number;
                hideOnSinglePage: boolean;
                simple: boolean;
                showTotal: boolean;
                showMore: boolean;
                showJumper: boolean;
                showPageSize: boolean;
                pageSizeOptions: number[];
                baseSize: number;
                bufferSize: number;
            }> & Omit<Readonly<{
                total?: unknown;
                current?: unknown;
                defaultCurrent?: unknown;
                pageSize?: unknown;
                defaultPageSize?: unknown;
                disabled?: unknown;
                hideOnSinglePage?: unknown;
                simple?: unknown;
                showTotal?: unknown;
                showMore?: unknown;
                showJumper?: unknown;
                showPageSize?: unknown;
                pageSizeOptions?: unknown;
                pageSizeProps?: unknown;
                size?: unknown;
                pageItemStyle?: unknown;
                activePageItemStyle?: unknown;
                baseSize?: unknown;
                bufferSize?: unknown;
                onChange?: unknown;
                onPageSizeChange?: unknown;
            } & {
                disabled: boolean;
                size: "small" | "mini" | "medium" | "large";
                total: number;
                defaultCurrent: number;
                defaultPageSize: number;
                hideOnSinglePage: boolean;
                simple: boolean;
                showTotal: boolean;
                showMore: boolean;
                showJumper: boolean;
                showPageSize: boolean;
                pageSizeOptions: number[];
                baseSize: number;
                bufferSize: number;
            } & {
                onChange?: import("../_utils/types").EmitType<(value: number) => void> | undefined;
                current?: number | undefined;
                onPageSizeChange?: import("../_utils/types").EmitType<(value: number) => void> | undefined;
                pageSize?: number | undefined;
                pageSizeProps?: unknown;
                pageItemStyle?: import("vue").CSSProperties | undefined;
                activePageItemStyle?: import("vue").CSSProperties | undefined;
            }> & {
                onChange?: ((...args: any[]) => any) | undefined;
                "onUpdate:current"?: ((...args: any[]) => any) | undefined;
                onPageSizeChange?: ((...args: any[]) => any) | undefined;
                "onUpdate:pageSize"?: ((...args: any[]) => any) | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "size" | "defaultCurrent" | "defaultPageSize" | "hideOnSinglePage" | "simple" | "showTotal" | "showMore" | "showJumper" | "showPageSize" | "pageSizeOptions" | "baseSize" | "bufferSize">) | undefined;
            gridProps?: Record<string, any> | undefined;
            virtualListProps?: Record<string, any> | undefined;
        }> & {
            onScroll?: ((...args: any[]) => any) | undefined;
            onReachBottom?: ((...args: any[]) => any) | undefined;
            onPageSizeChange?: ((...args: any[]) => any) | undefined;
            onPageChange?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "size" | "loading" | "bottomOffset" | "bordered" | "maxHeight" | "hoverable" | "split">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "scroll" | "reachBottom" | "pageChange" | "pageSizeChange", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            data?: unknown;
            size?: unknown;
            bordered?: unknown;
            split?: unknown;
            loading?: unknown;
            hoverable?: unknown;
            paginationProps?: unknown;
            gridProps?: unknown;
            maxHeight?: unknown;
            bottomOffset?: unknown;
            virtualListProps?: unknown;
        } & {
            size: "small" | "medium" | "large";
            loading: boolean;
            bottomOffset: number;
            bordered: boolean;
            maxHeight: number;
            hoverable: boolean;
            split: boolean;
        } & {
            data?: any[] | undefined;
            paginationProps?: (Partial<{
                disabled: boolean;
                size: "small" | "mini" | "medium" | "large";
                defaultCurrent: number;
                defaultPageSize: number;
                hideOnSinglePage: boolean;
                simple: boolean;
                showTotal: boolean;
                showMore: boolean;
                showJumper: boolean;
                showPageSize: boolean;
                pageSizeOptions: number[];
                baseSize: number;
                bufferSize: number;
            }> & Omit<Readonly<{
                total?: unknown;
                current?: unknown;
                defaultCurrent?: unknown;
                pageSize?: unknown;
                defaultPageSize?: unknown;
                disabled?: unknown;
                hideOnSinglePage?: unknown;
                simple?: unknown;
                showTotal?: unknown;
                showMore?: unknown;
                showJumper?: unknown;
                showPageSize?: unknown;
                pageSizeOptions?: unknown;
                pageSizeProps?: unknown;
                size?: unknown;
                pageItemStyle?: unknown;
                activePageItemStyle?: unknown;
                baseSize?: unknown;
                bufferSize?: unknown;
                onChange?: unknown;
                onPageSizeChange?: unknown;
            } & {
                disabled: boolean;
                size: "small" | "mini" | "medium" | "large";
                total: number;
                defaultCurrent: number;
                defaultPageSize: number;
                hideOnSinglePage: boolean;
                simple: boolean;
                showTotal: boolean;
                showMore: boolean;
                showJumper: boolean;
                showPageSize: boolean;
                pageSizeOptions: number[];
                baseSize: number;
                bufferSize: number;
            } & {
                onChange?: import("../_utils/types").EmitType<(value: number) => void> | undefined;
                current?: number | undefined;
                onPageSizeChange?: import("../_utils/types").EmitType<(value: number) => void> | undefined;
                pageSize?: number | undefined;
                pageSizeProps?: unknown;
                pageItemStyle?: import("vue").CSSProperties | undefined;
                activePageItemStyle?: import("vue").CSSProperties | undefined;
            }> & {
                onChange?: ((...args: any[]) => any) | undefined;
                "onUpdate:current"?: ((...args: any[]) => any) | undefined;
                onPageSizeChange?: ((...args: any[]) => any) | undefined;
                "onUpdate:pageSize"?: ((...args: any[]) => any) | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "size" | "defaultCurrent" | "defaultPageSize" | "hideOnSinglePage" | "simple" | "showTotal" | "showMore" | "showJumper" | "showPageSize" | "pageSizeOptions" | "baseSize" | "bufferSize">) | undefined;
            gridProps?: Record<string, any> | undefined;
            virtualListProps?: Record<string, any> | undefined;
        }> & {
            onScroll?: ((...args: any[]) => any) | undefined;
            onReachBottom?: ((...args: any[]) => any) | undefined;
            onPageSizeChange?: ((...args: any[]) => any) | undefined;
            onPageChange?: ((...args: any[]) => any) | undefined;
        }, {
            virtualListRef: import("vue").Ref<any>;
            renderList: () => JSX.Element;
        }, unknown, {}, {
            scrollIntoView(options: import("../_components/virtual-list/interface").ScrollIntoViewOptions): void;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("scroll" | "reachBottom" | "pageChange" | "pageSizeChange")[], string, {
            size: "small" | "medium" | "large";
            loading: boolean;
            bottomOffset: number;
            bordered: boolean;
            maxHeight: number;
            hoverable: boolean;
            split: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        data?: unknown;
        size?: unknown;
        bordered?: unknown;
        split?: unknown;
        loading?: unknown;
        hoverable?: unknown;
        paginationProps?: unknown;
        gridProps?: unknown;
        maxHeight?: unknown;
        bottomOffset?: unknown;
        virtualListProps?: unknown;
    } & {
        size: "small" | "medium" | "large";
        loading: boolean;
        bottomOffset: number;
        bordered: boolean;
        maxHeight: number;
        hoverable: boolean;
        split: boolean;
    } & {
        data?: any[] | undefined;
        paginationProps?: (Partial<{
            disabled: boolean;
            size: "small" | "mini" | "medium" | "large";
            defaultCurrent: number;
            defaultPageSize: number;
            hideOnSinglePage: boolean;
            simple: boolean;
            showTotal: boolean;
            showMore: boolean;
            showJumper: boolean;
            showPageSize: boolean;
            pageSizeOptions: number[];
            baseSize: number;
            bufferSize: number;
        }> & Omit<Readonly<{
            total?: unknown;
            current?: unknown;
            defaultCurrent?: unknown;
            pageSize?: unknown;
            defaultPageSize?: unknown;
            disabled?: unknown;
            hideOnSinglePage?: unknown;
            simple?: unknown;
            showTotal?: unknown;
            showMore?: unknown;
            showJumper?: unknown;
            showPageSize?: unknown;
            pageSizeOptions?: unknown;
            pageSizeProps?: unknown;
            size?: unknown;
            pageItemStyle?: unknown;
            activePageItemStyle?: unknown;
            baseSize?: unknown;
            bufferSize?: unknown;
            onChange?: unknown;
            onPageSizeChange?: unknown;
        } & {
            disabled: boolean;
            size: "small" | "mini" | "medium" | "large";
            total: number;
            defaultCurrent: number;
            defaultPageSize: number;
            hideOnSinglePage: boolean;
            simple: boolean;
            showTotal: boolean;
            showMore: boolean;
            showJumper: boolean;
            showPageSize: boolean;
            pageSizeOptions: number[];
            baseSize: number;
            bufferSize: number;
        } & {
            onChange?: import("../_utils/types").EmitType<(value: number) => void> | undefined;
            current?: number | undefined;
            onPageSizeChange?: import("../_utils/types").EmitType<(value: number) => void> | undefined;
            pageSize?: number | undefined;
            pageSizeProps?: unknown;
            pageItemStyle?: import("vue").CSSProperties | undefined;
            activePageItemStyle?: import("vue").CSSProperties | undefined;
        }> & {
            onChange?: ((...args: any[]) => any) | undefined;
            "onUpdate:current"?: ((...args: any[]) => any) | undefined;
            onPageSizeChange?: ((...args: any[]) => any) | undefined;
            "onUpdate:pageSize"?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "size" | "defaultCurrent" | "defaultPageSize" | "hideOnSinglePage" | "simple" | "showTotal" | "showMore" | "showJumper" | "showPageSize" | "pageSizeOptions" | "baseSize" | "bufferSize">) | undefined;
        gridProps?: Record<string, any> | undefined;
        virtualListProps?: Record<string, any> | undefined;
    }> & {
        onScroll?: ((...args: any[]) => any) | undefined;
        onReachBottom?: ((...args: any[]) => any) | undefined;
        onPageSizeChange?: ((...args: any[]) => any) | undefined;
        onPageChange?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        virtualListRef: import("vue").Ref<any>;
        renderList: () => JSX.Element;
    }> & {} & {} & {
        scrollIntoView(options: import("../_components/virtual-list/interface").ScrollIntoViewOptions): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    data?: unknown;
    size?: unknown;
    bordered?: unknown;
    split?: unknown;
    loading?: unknown;
    hoverable?: unknown;
    paginationProps?: unknown;
    gridProps?: unknown;
    maxHeight?: unknown;
    bottomOffset?: unknown;
    virtualListProps?: unknown;
} & {
    size: "small" | "medium" | "large";
    loading: boolean;
    bottomOffset: number;
    bordered: boolean;
    maxHeight: number;
    hoverable: boolean;
    split: boolean;
} & {
    data?: any[] | undefined;
    paginationProps?: (Partial<{
        disabled: boolean;
        size: "small" | "mini" | "medium" | "large";
        defaultCurrent: number;
        defaultPageSize: number;
        hideOnSinglePage: boolean;
        simple: boolean;
        showTotal: boolean;
        showMore: boolean;
        showJumper: boolean;
        showPageSize: boolean;
        pageSizeOptions: number[];
        baseSize: number;
        bufferSize: number;
    }> & Omit<Readonly<{
        total?: unknown;
        current?: unknown;
        defaultCurrent?: unknown;
        pageSize?: unknown;
        defaultPageSize?: unknown;
        disabled?: unknown;
        hideOnSinglePage?: unknown;
        simple?: unknown;
        showTotal?: unknown;
        showMore?: unknown;
        showJumper?: unknown;
        showPageSize?: unknown;
        pageSizeOptions?: unknown;
        pageSizeProps?: unknown;
        size?: unknown;
        pageItemStyle?: unknown;
        activePageItemStyle?: unknown;
        baseSize?: unknown;
        bufferSize?: unknown;
        onChange?: unknown;
        onPageSizeChange?: unknown;
    } & {
        disabled: boolean;
        size: "small" | "mini" | "medium" | "large";
        total: number;
        defaultCurrent: number;
        defaultPageSize: number;
        hideOnSinglePage: boolean;
        simple: boolean;
        showTotal: boolean;
        showMore: boolean;
        showJumper: boolean;
        showPageSize: boolean;
        pageSizeOptions: number[];
        baseSize: number;
        bufferSize: number;
    } & {
        onChange?: import("../_utils/types").EmitType<(value: number) => void> | undefined;
        current?: number | undefined;
        onPageSizeChange?: import("../_utils/types").EmitType<(value: number) => void> | undefined;
        pageSize?: number | undefined;
        pageSizeProps?: unknown;
        pageItemStyle?: import("vue").CSSProperties | undefined;
        activePageItemStyle?: import("vue").CSSProperties | undefined;
    }> & {
        onChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:current"?: ((...args: any[]) => any) | undefined;
        onPageSizeChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:pageSize"?: ((...args: any[]) => any) | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "size" | "defaultCurrent" | "defaultPageSize" | "hideOnSinglePage" | "simple" | "showTotal" | "showMore" | "showJumper" | "showPageSize" | "pageSizeOptions" | "baseSize" | "bufferSize">) | undefined;
    gridProps?: Record<string, any> | undefined;
    virtualListProps?: Record<string, any> | undefined;
}> & {
    onScroll?: ((...args: any[]) => any) | undefined;
    onReachBottom?: ((...args: any[]) => any) | undefined;
    onPageSizeChange?: ((...args: any[]) => any) | undefined;
    onPageChange?: ((...args: any[]) => any) | undefined;
}, {
    virtualListRef: import("vue").Ref<any>;
    renderList: () => JSX.Element;
}, unknown, {}, {
    scrollIntoView(options: import("../_components/virtual-list/interface").ScrollIntoViewOptions): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("scroll" | "reachBottom" | "pageChange" | "pageSizeChange")[], "scroll" | "reachBottom" | "pageChange" | "pageSizeChange", {
    size: "small" | "medium" | "large";
    loading: boolean;
    bottomOffset: number;
    bordered: boolean;
    maxHeight: number;
    hoverable: boolean;
    split: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    Item: {
        Meta: import("vue").DefineComponent<{
            title: StringConstructor;
            description: StringConstructor;
        }, {
            prefixCls: string;
            hasContent: boolean;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
            title?: unknown;
            description?: unknown;
        } & {} & {
            title?: string | undefined;
            description?: string | undefined;
        }>, {}>;
        __isFragment?: undefined;
        __isTeleport?: undefined;
        __isSuspense?: undefined;
        setup?: ((this: void, props: Readonly<{
            actionLayout: string;
        }>, ctx: import("vue").SetupContext<Record<string, any>>) => void | import("vue").RenderFunction | (() => JSX.Element) | Promise<() => JSX.Element>) | undefined;
        name: string;
        template?: string | object | undefined;
        render?: Function | undefined;
        components?: Record<string, import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>> | undefined;
        directives?: Record<string, import("vue").Directive<any, any>> | undefined;
        inheritAttrs?: boolean | undefined;
        emits?: ((string[] | Record<string, any>) & ThisType<void>) | undefined;
        expose?: string[] | undefined;
        serverPrefetch?(): Promise<any>;
        compilerOptions?: import("vue").RuntimeCompilerOptions | undefined;
        call: (<T, A extends any[]>(this: new (...args: A) => T, thisArg: T, ...args: A) => void) & ((this: unknown, ...args: unknown[]) => never);
        __defaults?: {
            actionLayout: string;
        } | undefined;
        compatConfig?: (Partial<Record<import("vue").DeprecationTypes, boolean | "suppress-warning">> & {
            MODE?: 2 | 3 | ((comp: import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions> | null) => 2 | 3) | undefined;
        }) | undefined;
        data?: ((this: import("vue").CreateComponentPublicInstance<Readonly<{
            actionLayout?: unknown;
        } & {
            actionLayout: string;
        } & {}>, {}, {}, {}, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, Readonly<{
            actionLayout?: unknown;
        } & {
            actionLayout: string;
        } & {}>, {}, false, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{
            actionLayout?: unknown;
        } & {
            actionLayout: string;
        } & {}>, {}, {}, {}, import("vue").MethodOptions, {}>, vm: import("vue").CreateComponentPublicInstance<Readonly<{
            actionLayout?: unknown;
        } & {
            actionLayout: string;
        } & {}>, {}, {}, {}, import("vue").MethodOptions, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, Readonly<{
            actionLayout?: unknown;
        } & {
            actionLayout: string;
        } & {}>, {}, false, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{
            actionLayout?: unknown;
        } & {
            actionLayout: string;
        } & {}>, {}, {}, {}, import("vue").MethodOptions, {}>) => unknown) | undefined;
        computed?: {} | undefined;
        methods?: {} | undefined;
        watch?: {
            [x: string]: (string | import("vue").WatchCallback<any, any> | ({
                handler: string | import("vue").WatchCallback<any, any>;
            } & import("vue").WatchOptions<boolean>)) | (string | import("vue").WatchCallback<any, any> | ({
                handler: string | import("vue").WatchCallback<any, any>;
            } & import("vue").WatchOptions<boolean>))[];
        } | undefined;
        provide?: Function | {
            [x: string]: unknown;
        } | undefined;
        inject?: (string[] | {
            [x: string]: string | symbol | {
                from?: string | symbol | undefined;
                default?: unknown;
            };
        }) | undefined;
        filters?: Record<string, Function> | undefined;
        mixins?: import("vue").ComponentOptionsMixin[] | undefined;
        extends?: import("vue").ComponentOptionsMixin | undefined;
        beforeCreate?(): void;
        created?(): void;
        beforeMount?(): void;
        mounted?(): void;
        beforeUpdate?(): void;
        updated?(): void;
        activated?(): void;
        deactivated?(): void;
        beforeDestroy?(): void;
        beforeUnmount?(): void;
        destroyed?(): void;
        unmounted?(): void;
        renderTracked?: ((e: import("vue").DebuggerEvent) => void) | undefined;
        renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | undefined;
        errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | undefined;
        delimiters?: [string, string] | undefined;
        __differentiator?: undefined;
        __isBuiltIn?: boolean | undefined;
        __file?: string | undefined;
        key?: string | number | symbol | undefined;
        ref?: (string | import("vue").Ref<any> | ((ref: object | null, refs: Record<string, any>) => void)) | undefined;
        onVnodeBeforeMount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>) => void)[] | undefined;
        onVnodeMounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>) => void)[] | undefined;
        onVnodeBeforeUpdate?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>) => void)[] | undefined;
        onVnodeUpdated?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>) => void)[] | undefined;
        onVnodeBeforeUnmount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>) => void)[] | undefined;
        onVnodeUnmounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>) => void)[] | undefined;
        class?: unknown;
        style?: unknown;
    };
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type ListInstance = InstanceType<typeof _List>;
export declare type ListItemInstance = InstanceType<typeof _ListItem>;
export declare type ListItemMetaInstance = InstanceType<typeof _ListItemMeta>;
export { _ListItem as ListItem, _ListItemMeta as ListItemMeta };
export default List;
