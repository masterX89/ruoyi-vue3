import { defineComponent, computed, ref, createVNode, isVNode, mergeProps } from "vue";
import { getPrefixCls } from "../_utils/global-config.js";
import Spin from "../spin/index.js";
import Grid from "../grid/index.js";
import Pagination from "../pagination/index.js";
import Empty from "../empty/index.js";
import VirtualList from "../_components/virtual-list/virtual-list.js";
import { usePagination } from "../_hooks/use-pagination.js";
import { omit } from "../_utils/omit.js";
function _isSlot(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var _List = defineComponent({
  name: "List",
  props: {
    data: {
      type: Array
    },
    size: {
      type: String,
      default: "medium"
    },
    bordered: {
      type: Boolean,
      default: true
    },
    split: {
      type: Boolean,
      default: true
    },
    loading: {
      type: Boolean,
      default: false
    },
    hoverable: {
      type: Boolean,
      default: false
    },
    paginationProps: {
      type: Object
    },
    gridProps: {
      type: Object
    },
    maxHeight: {
      type: Number,
      default: 0
    },
    bottomOffset: {
      type: Number,
      default: 0
    },
    virtualListProps: {
      type: Object
    }
  },
  emits: [
    "scroll",
    "reachBottom",
    "pageChange",
    "pageSizeChange"
  ],
  setup(props, {
    emit,
    slots
  }) {
    const prefixCls = getPrefixCls("list");
    const hasChildren = computed(() => Boolean(slots.default));
    const isVirtualList = computed(() => props.virtualListProps);
    const handleScroll = (e) => {
      const {
        scrollTop,
        scrollHeight,
        offsetHeight
      } = e.target;
      const bottom = scrollHeight - (scrollTop + offsetHeight);
      if (bottom <= props.bottomOffset) {
        emit("reachBottom");
      }
      emit("scroll");
    };
    const {
      current,
      pageSize,
      handlePageChange,
      handlePageSizeChange
    } = usePagination(props, {
      emit
    });
    const getCurrentPageItems = (data) => {
      if (!props.paginationProps) {
        return data;
      }
      const startIndex = (current.value - 1) * pageSize.value;
      return data.slice(startIndex, startIndex + pageSize.value);
    };
    const renderGridItems = (data) => {
      let _slot2;
      if (!props.gridProps) {
        return null;
      }
      const currentPageItems = getCurrentPageItems(data);
      if (props.gridProps.span) {
        const items = [];
        const rowSize = 24 / props.gridProps.span;
        for (let i = 0; i < currentPageItems.length; i += rowSize) {
          let _slot;
          const nextIndex = i + rowSize;
          const rowIndex = Math.floor(i / rowSize);
          items.push(createVNode(Grid.Row, {
            "key": rowIndex,
            "class": `${prefixCls}-row`,
            "gutter": props.gridProps.gutter
          }, _isSlot(_slot = currentPageItems.slice(i, nextIndex).map((item, index) => {
            var _a;
            return createVNode(Grid.Col, {
              "key": `${rowIndex}-${index}`,
              "class": `${prefixCls}-col`,
              "span": (_a = props.gridProps) == null ? void 0 : _a.span
            }, {
              default: () => {
                var _a2;
                return [hasChildren.value ? item : (_a2 = slots.item) == null ? void 0 : _a2.call(slots, {
                  item,
                  index
                })];
              }
            });
          })) ? _slot : {
            default: () => [_slot]
          }));
        }
        return items;
      }
      return createVNode(Grid.Row, {
        "class": `${prefixCls}-row`,
        "gutter": props.gridProps.gutter
      }, _isSlot(_slot2 = currentPageItems.map((item, index) => createVNode(Grid.Col, {
        "key": index,
        "class": `${prefixCls}-col`
      }, {
        default: () => {
          var _a;
          return [hasChildren.value ? item : (_a = slots.item) == null ? void 0 : _a.call(slots, {
            item,
            index
          })];
        }
      }))) ? _slot2 : {
        default: () => [_slot2]
      });
    };
    const getListItemRenderMsg = (data) => {
      const currentPageItems = getCurrentPageItems(data);
      const currentPageItemRenderFunc = (item, index) => {
        var _a;
        return hasChildren.value ? currentPageItems[index] : (_a = slots.item) == null ? void 0 : _a.call(slots, {
          item,
          index
        });
      };
      return {
        currentPageItems,
        currentPageItemRenderFunc
      };
    };
    const renderListItems = (data) => {
      const {
        currentPageItems,
        currentPageItemRenderFunc
      } = getListItemRenderMsg(data);
      return currentPageItems.map(currentPageItemRenderFunc);
    };
    const renderItems = () => {
      var _a, _b;
      const data = (_b = (_a = slots.default) == null ? void 0 : _a.call(slots)) != null ? _b : props.data;
      if (data && data.length > 0) {
        return props.gridProps ? renderGridItems(data) : renderListItems(data);
      }
      return renderEmpty();
    };
    const renderPagination = () => {
      if (!props.paginationProps) {
        return null;
      }
      const paginationProps = omit(props.paginationProps, ["current", "pageSize", "defaultCurrent", "defaultPageSize"]);
      return createVNode(Pagination, mergeProps(paginationProps, {
        "class": `${prefixCls}-pagination`,
        "current": current.value,
        "pageSize": pageSize.value,
        "onChange": handlePageChange,
        "onPageSizeChange": handlePageSizeChange
      }), null);
    };
    const cls = computed(() => [prefixCls, `${prefixCls}-${props.size}`, {
      [`${prefixCls}-bordered`]: props.bordered,
      [`${prefixCls}-split`]: props.split,
      [`${prefixCls}-hover`]: props.hoverable
    }]);
    const contentStyle = computed(() => {
      if (props.maxHeight > 0) {
        return {
          maxHeight: `${props.maxHeight}px`
        };
      }
      return void 0;
    });
    const contentCls = computed(() => [`${prefixCls}-content`, {
      [`${prefixCls}-virtual`]: isVirtualList.value
    }]);
    const virtualListRef = ref();
    const renderVirtualList = () => {
      const {
        currentPageItems,
        currentPageItemRenderFunc
      } = getListItemRenderMsg(props.data || []);
      return currentPageItems.length ? createVNode(VirtualList, mergeProps({
        "ref": virtualListRef
      }, props.virtualListProps, {
        "class": contentCls.value,
        "data": currentPageItems,
        "onScroll": handleScroll
      }), {
        item: ({
          item,
          index
        }) => currentPageItemRenderFunc(item, index)
      }) : renderEmpty();
    };
    const renderEmpty = () => {
      return createVNode(Empty, null, null);
    };
    const renderList = () => {
      return createVNode("div", {
        "class": `${prefixCls}-wrapper`
      }, [createVNode("div", {
        "class": cls.value,
        "style": contentStyle.value,
        "onScroll": handleScroll
      }, [slots.header && createVNode("div", {
        "class": `${prefixCls}-header`
      }, [slots.header()]), isVirtualList.value && !props.gridProps ? renderVirtualList() : createVNode("div", {
        "class": contentCls.value
      }, [renderItems()]), slots.footer && createVNode("div", {
        "class": `${prefixCls}-footer`
      }, [slots.footer()])]), renderPagination()]);
    };
    return {
      virtualListRef,
      renderList
    };
  },
  methods: {
    scrollIntoView(options) {
      if (this.virtualListRef) {
        this.virtualListRef.scrollTo(options);
      }
    }
  },
  render() {
    const {
      loading,
      renderList
    } = this;
    if (loading) {
      let _slot3;
      return createVNode(Spin, {
        "style": {
          display: "block"
        },
        "loading": true
      }, _isSlot(_slot3 = renderList()) ? _slot3 : {
        default: () => [_slot3]
      });
    }
    return renderList();
  }
});
export { _List as default };
