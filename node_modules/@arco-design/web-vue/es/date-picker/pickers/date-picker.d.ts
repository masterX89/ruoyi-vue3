import { PropType } from 'vue';
import { TimePickerProps } from '../../time-picker/interface';
import { DisabledTimeProps } from '../interface';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: PropType<string | number | Date>;
    };
    defaultValue: {
        type: PropType<string | number | Date>;
    };
    format: {
        type: PropType<string | ((current: Date) => string)>;
    };
    dayStartOfWeek: {
        type: PropType<0 | 1>;
        default: number;
    };
    showTime: {
        type: BooleanConstructor;
    };
    timepickerProps: {
        type: PropType<Partial<TimePickerProps>>;
    };
    disabledTime: {
        type: PropType<(current: Date) => DisabledTimeProps>;
    };
    showNowBtn: {
        type: BooleanConstructor;
        default: boolean;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    defaultValue?: unknown;
    format?: unknown;
    dayStartOfWeek?: unknown;
    showTime?: unknown;
    timepickerProps?: unknown;
    disabledTime?: unknown;
    showNowBtn?: unknown;
} & {
    dayStartOfWeek: 0 | 1;
    showTime: boolean;
    showNowBtn: boolean;
} & {
    modelValue?: string | number | Date | undefined;
    defaultValue?: string | number | Date | undefined;
    format?: string | ((current: Date) => string) | undefined;
    timepickerProps?: Partial<TimePickerProps> | undefined;
    disabledTime?: ((current: Date) => DisabledTimeProps) | undefined;
}>, {
    dayStartOfWeek: 0 | 1;
    showTime: boolean;
    showNowBtn: boolean;
}>;
export default _default;
