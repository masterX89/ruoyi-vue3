import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import { ModalConfig } from './interface';
declare const Modal: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            footer: boolean;
            mask: boolean;
            visible: boolean;
            defaultVisible: boolean;
            closable: boolean;
            popupContainer: string | HTMLElement;
            unmountOnClose: boolean;
            renderToBody: boolean;
            maskClosable: boolean;
            simple: boolean;
            okLoading: boolean;
            escToClose: boolean;
            alignCenter: boolean;
            hideCancel: boolean;
        }> & Omit<Readonly<{
            visible?: unknown;
            defaultVisible?: unknown;
            width?: unknown;
            top?: unknown;
            mask?: unknown;
            title?: unknown;
            alignCenter?: unknown;
            unmountOnClose?: unknown;
            maskClosable?: unknown;
            hideCancel?: unknown;
            simple?: unknown;
            closable?: unknown;
            okText?: unknown;
            cancelText?: unknown;
            okLoading?: unknown;
            okButtonProps?: unknown;
            cancelButtonProps?: unknown;
            footer?: unknown;
            renderToBody?: unknown;
            popupContainer?: unknown;
            maskStyle?: unknown;
            modalClass?: unknown;
            modalStyle?: unknown;
            onBeforeOk?: unknown;
            onBeforeCancel?: unknown;
            escToClose?: unknown;
            messageType?: unknown;
        } & {
            footer: boolean;
            mask: boolean;
            defaultVisible: boolean;
            closable: boolean;
            popupContainer: string | HTMLElement;
            unmountOnClose: boolean;
            renderToBody: boolean;
            maskClosable: boolean;
            simple: boolean;
            okLoading: boolean;
            escToClose: boolean;
            alignCenter: boolean;
            hideCancel: boolean;
        } & {
            title?: string | undefined;
            okText?: string | undefined;
            cancelText?: string | undefined;
            visible?: boolean | undefined;
            top?: string | number | undefined;
            width?: string | number | undefined;
            okButtonProps?: Record<string, any> | undefined;
            cancelButtonProps?: Record<string, any> | undefined;
            onBeforeOk?: ((done: (closed: boolean) => void) => boolean | void) | undefined;
            onBeforeCancel?: (() => boolean) | undefined;
            maskStyle?: import("vue").CSSProperties | undefined;
            modalClass?: string | any[] | undefined;
            modalStyle?: import("vue").CSSProperties | undefined;
            messageType?: "error" | "success" | "warning" | "info" | undefined;
        }> & {
            "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
            onClose?: ((...args: any[]) => any) | undefined;
            onOk?: ((...args: any[]) => any) | undefined;
            onOpen?: ((...args: any[]) => any) | undefined;
            onCancel?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "footer" | "mask" | "visible" | "defaultVisible" | "closable" | "popupContainer" | "unmountOnClose" | "renderToBody" | "maskClosable" | "simple" | "okLoading" | "escToClose" | "alignCenter" | "hideCancel">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "update:visible" | "close" | "open" | "cancel" | "ok", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            visible?: unknown;
            defaultVisible?: unknown;
            width?: unknown;
            top?: unknown;
            mask?: unknown;
            title?: unknown;
            alignCenter?: unknown;
            unmountOnClose?: unknown;
            maskClosable?: unknown;
            hideCancel?: unknown;
            simple?: unknown;
            closable?: unknown;
            okText?: unknown;
            cancelText?: unknown;
            okLoading?: unknown;
            okButtonProps?: unknown;
            cancelButtonProps?: unknown;
            footer?: unknown;
            renderToBody?: unknown;
            popupContainer?: unknown;
            maskStyle?: unknown;
            modalClass?: unknown;
            modalStyle?: unknown;
            onBeforeOk?: unknown;
            onBeforeCancel?: unknown;
            escToClose?: unknown;
            messageType?: unknown;
        } & {
            footer: boolean;
            mask: boolean;
            defaultVisible: boolean;
            closable: boolean;
            popupContainer: string | HTMLElement;
            unmountOnClose: boolean;
            renderToBody: boolean;
            maskClosable: boolean;
            simple: boolean;
            okLoading: boolean;
            escToClose: boolean;
            alignCenter: boolean;
            hideCancel: boolean;
        } & {
            title?: string | undefined;
            okText?: string | undefined;
            cancelText?: string | undefined;
            visible?: boolean | undefined;
            top?: string | number | undefined;
            width?: string | number | undefined;
            okButtonProps?: Record<string, any> | undefined;
            cancelButtonProps?: Record<string, any> | undefined;
            onBeforeOk?: ((done: (closed: boolean) => void) => boolean | void) | undefined;
            onBeforeCancel?: (() => boolean) | undefined;
            maskStyle?: import("vue").CSSProperties | undefined;
            modalClass?: string | any[] | undefined;
            modalStyle?: import("vue").CSSProperties | undefined;
            messageType?: "error" | "success" | "warning" | "info" | undefined;
        }> & {
            "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
            onClose?: ((...args: any[]) => any) | undefined;
            onOk?: ((...args: any[]) => any) | undefined;
            onOpen?: ((...args: any[]) => any) | undefined;
            onCancel?: ((...args: any[]) => any) | undefined;
        }, {
            prefixCls: string;
            mounted: import("vue").Ref<boolean>;
            computedVisible: import("vue").ComputedRef<boolean>;
            containerRef: import("vue").Ref<HTMLElement | undefined>;
            mergedModalStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
            okDisplayText: import("vue").ComputedRef<string>;
            cancelDisplayText: import("vue").ComputedRef<string>;
            zIndex: import("vue").ComputedRef<number>;
            handleOk: () => void;
            handleCancel: () => void;
            handleMask: () => void;
            handleOpen: () => void;
            handleClose: () => void;
            mergedOkLoading: import("vue").ComputedRef<boolean>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:visible" | "close" | "open" | "cancel" | "ok")[], string, {
            footer: boolean;
            mask: boolean;
            visible: boolean;
            defaultVisible: boolean;
            closable: boolean;
            popupContainer: string | HTMLElement;
            unmountOnClose: boolean;
            renderToBody: boolean;
            maskClosable: boolean;
            simple: boolean;
            okLoading: boolean;
            escToClose: boolean;
            alignCenter: boolean;
            hideCancel: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        visible?: unknown;
        defaultVisible?: unknown;
        width?: unknown;
        top?: unknown;
        mask?: unknown;
        title?: unknown;
        alignCenter?: unknown;
        unmountOnClose?: unknown;
        maskClosable?: unknown;
        hideCancel?: unknown;
        simple?: unknown;
        closable?: unknown;
        okText?: unknown;
        cancelText?: unknown;
        okLoading?: unknown;
        okButtonProps?: unknown;
        cancelButtonProps?: unknown;
        footer?: unknown;
        renderToBody?: unknown;
        popupContainer?: unknown;
        maskStyle?: unknown;
        modalClass?: unknown;
        modalStyle?: unknown;
        onBeforeOk?: unknown;
        onBeforeCancel?: unknown;
        escToClose?: unknown;
        messageType?: unknown;
    } & {
        footer: boolean;
        mask: boolean;
        defaultVisible: boolean;
        closable: boolean;
        popupContainer: string | HTMLElement;
        unmountOnClose: boolean;
        renderToBody: boolean;
        maskClosable: boolean;
        simple: boolean;
        okLoading: boolean;
        escToClose: boolean;
        alignCenter: boolean;
        hideCancel: boolean;
    } & {
        title?: string | undefined;
        okText?: string | undefined;
        cancelText?: string | undefined;
        visible?: boolean | undefined;
        top?: string | number | undefined;
        width?: string | number | undefined;
        okButtonProps?: Record<string, any> | undefined;
        cancelButtonProps?: Record<string, any> | undefined;
        onBeforeOk?: ((done: (closed: boolean) => void) => boolean | void) | undefined;
        onBeforeCancel?: (() => boolean) | undefined;
        maskStyle?: import("vue").CSSProperties | undefined;
        modalClass?: string | any[] | undefined;
        modalStyle?: import("vue").CSSProperties | undefined;
        messageType?: "error" | "success" | "warning" | "info" | undefined;
    }> & {
        "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
        onClose?: ((...args: any[]) => any) | undefined;
        onOk?: ((...args: any[]) => any) | undefined;
        onOpen?: ((...args: any[]) => any) | undefined;
        onCancel?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        prefixCls: string;
        mounted: import("vue").Ref<boolean>;
        computedVisible: import("vue").ComputedRef<boolean>;
        containerRef: import("vue").Ref<HTMLElement | undefined>;
        mergedModalStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
        okDisplayText: import("vue").ComputedRef<string>;
        cancelDisplayText: import("vue").ComputedRef<string>;
        zIndex: import("vue").ComputedRef<number>;
        handleOk: () => void;
        handleCancel: () => void;
        handleMask: () => void;
        handleOpen: () => void;
        handleClose: () => void;
        mergedOkLoading: import("vue").ComputedRef<boolean>;
    }> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    visible?: unknown;
    defaultVisible?: unknown;
    width?: unknown;
    top?: unknown;
    mask?: unknown;
    title?: unknown;
    alignCenter?: unknown;
    unmountOnClose?: unknown;
    maskClosable?: unknown;
    hideCancel?: unknown;
    simple?: unknown;
    closable?: unknown;
    okText?: unknown;
    cancelText?: unknown;
    okLoading?: unknown;
    okButtonProps?: unknown;
    cancelButtonProps?: unknown;
    footer?: unknown;
    renderToBody?: unknown;
    popupContainer?: unknown;
    maskStyle?: unknown;
    modalClass?: unknown;
    modalStyle?: unknown;
    onBeforeOk?: unknown;
    onBeforeCancel?: unknown;
    escToClose?: unknown;
    messageType?: unknown;
} & {
    footer: boolean;
    mask: boolean;
    defaultVisible: boolean;
    closable: boolean;
    popupContainer: string | HTMLElement;
    unmountOnClose: boolean;
    renderToBody: boolean;
    maskClosable: boolean;
    simple: boolean;
    okLoading: boolean;
    escToClose: boolean;
    alignCenter: boolean;
    hideCancel: boolean;
} & {
    title?: string | undefined;
    okText?: string | undefined;
    cancelText?: string | undefined;
    visible?: boolean | undefined;
    top?: string | number | undefined;
    width?: string | number | undefined;
    okButtonProps?: Record<string, any> | undefined;
    cancelButtonProps?: Record<string, any> | undefined;
    onBeforeOk?: ((done: (closed: boolean) => void) => boolean | void) | undefined;
    onBeforeCancel?: (() => boolean) | undefined;
    maskStyle?: import("vue").CSSProperties | undefined;
    modalClass?: string | any[] | undefined;
    modalStyle?: import("vue").CSSProperties | undefined;
    messageType?: "error" | "success" | "warning" | "info" | undefined;
}> & {
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
    onOk?: ((...args: any[]) => any) | undefined;
    onOpen?: ((...args: any[]) => any) | undefined;
    onCancel?: ((...args: any[]) => any) | undefined;
}, {
    prefixCls: string;
    mounted: import("vue").Ref<boolean>;
    computedVisible: import("vue").ComputedRef<boolean>;
    containerRef: import("vue").Ref<HTMLElement | undefined>;
    mergedModalStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
    okDisplayText: import("vue").ComputedRef<string>;
    cancelDisplayText: import("vue").ComputedRef<string>;
    zIndex: import("vue").ComputedRef<number>;
    handleOk: () => void;
    handleCancel: () => void;
    handleMask: () => void;
    handleOpen: () => void;
    handleClose: () => void;
    mergedOkLoading: import("vue").ComputedRef<boolean>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:visible" | "close" | "open" | "cancel" | "ok")[], "cancel" | "ok" | "update:visible" | "close" | "open", {
    footer: boolean;
    mask: boolean;
    visible: boolean;
    defaultVisible: boolean;
    closable: boolean;
    popupContainer: string | HTMLElement;
    unmountOnClose: boolean;
    renderToBody: boolean;
    maskClosable: boolean;
    simple: boolean;
    okLoading: boolean;
    escToClose: boolean;
    alignCenter: boolean;
    hideCancel: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App, options?: ArcoOptions | undefined) => void;
    open: (config: ModalConfig) => import("./interface").ModalReturn;
    confirm: (config: ModalConfig) => import("./interface").ModalReturn;
    info: (config: ModalConfig) => import("./interface").ModalReturn;
    success: (config: ModalConfig) => import("./interface").ModalReturn;
    warning: (config: ModalConfig) => import("./interface").ModalReturn;
    error: (config: ModalConfig) => import("./interface").ModalReturn;
};
export default Modal;
