var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import { createVNode, render } from "vue";
import { setGlobalConfig, getComponentPrefix } from "../_utils/global-config.js";
import { MESSAGE_TYPES } from "../_utils/constant.js";
import { getOverlay } from "../_utils/dom.js";
import { isFunction } from "../_utils/is.js";
import _Modal from "./modal.js";
import { omit } from "../_utils/omit.js";
const open = (config) => {
  const container = getOverlay("modal");
  const handleOk = () => {
    if (vm.component) {
      vm.component.props.visible = false;
    }
    if (isFunction(config.onOk)) {
      config.onOk();
    }
  };
  const handleCancel = () => {
    if (vm.component) {
      vm.component.props.visible = false;
    }
    if (isFunction(config.onCancel)) {
      config.onCancel();
    }
  };
  const handleClose = () => {
    render(null, container);
    document.body.removeChild(container);
    if (isFunction(config.onClose)) {
      config.onClose();
    }
  };
  const defaultConfig = {
    visible: true,
    renderToBody: false,
    onOk: handleOk,
    onCancel: handleCancel,
    onClose: handleClose
  };
  const vm = createVNode(_Modal, __spreadValues(__spreadValues({}, omit(config, ["content", "title", "footer"])), defaultConfig), {
    default: isFunction(config.content) ? config.content : () => config.content,
    title: isFunction(config.title) ? config.title : () => config.title,
    footer: isFunction(config.footer) ? config.footer : () => config.footer
  });
  render(vm, container);
  document.body.appendChild(container);
  return {
    close
  };
};
const modal = __spreadValues({
  open,
  confirm: (config) => {
    const _config = __spreadValues({
      simple: true
    }, config);
    return open(_config);
  }
}, MESSAGE_TYPES.reduce((pre, value) => {
  pre[value] = (config) => {
    const _config = __spreadValues({
      simple: true,
      hideCancel: true,
      messageType: value
    }, config);
    return open(_config);
  };
  return pre;
}, {}));
const Modal = Object.assign(_Modal, __spreadProps(__spreadValues({}, modal), {
  install: (app, options) => {
    setGlobalConfig(app, options);
    const componentPrefix = getComponentPrefix(options);
    app.component(componentPrefix + _Modal.name, _Modal);
    app.config.globalProperties.$modal = modal;
  }
}));
export { Modal as default };
