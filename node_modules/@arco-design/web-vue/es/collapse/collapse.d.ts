import { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    activeKey: {
        type: PropType<(string | number)[]>;
        default: undefined;
    };
    defaultActiveKey: {
        type: PropType<(string | number)[]>;
        default: () => never[];
    };
    accordion: {
        type: BooleanConstructor;
        default: boolean;
    };
    expandIconPosition: {
        type: PropType<"left" | "right">;
        default: string;
    };
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    onChange: {
        type: PropType<(activeKey: string | number | (string | number)[]) => void>;
    };
}, {
    prefixCls: string;
    cls: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:activeKey")[], "change" | "update:activeKey", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    activeKey?: unknown;
    defaultActiveKey?: unknown;
    accordion?: unknown;
    expandIconPosition?: unknown;
    bordered?: unknown;
    onChange?: unknown;
} & {
    bordered: boolean;
    defaultActiveKey: (string | number)[];
    accordion: boolean;
    expandIconPosition: "left" | "right";
} & {
    onChange?: ((activeKey: string | number | (string | number)[]) => void) | undefined;
    activeKey?: (string | number)[] | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:activeKey"?: ((...args: any[]) => any) | undefined;
}, {
    bordered: boolean;
    activeKey: (string | number)[];
    defaultActiveKey: (string | number)[];
    accordion: boolean;
    expandIconPosition: "left" | "right";
}>;
export default _default;
