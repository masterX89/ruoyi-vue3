import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _Input from './input';
import _InputSearch from './input-search';
import _InputPassword from './input-password';
import _InputGroup from './input-group';
declare const Input: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            disabled: boolean;
            size: "small" | "mini" | "medium" | "large";
            error: boolean;
            defaultValue: string;
            readonly: boolean;
            allowClear: boolean;
            type: "text" | "password";
            maxLength: number | {
                length: number;
                errorOnly?: boolean | undefined;
            };
            showWordLimit: boolean;
        }> & Omit<Readonly<{
            modelValue?: unknown;
            defaultValue?: unknown;
            size?: unknown;
            allowClear?: unknown;
            disabled?: unknown;
            readonly?: unknown;
            error?: unknown;
            placeholder?: unknown;
            maxLength?: unknown;
            showWordLimit?: unknown;
            wordLength?: unknown;
            wordSlice?: unknown;
            type?: unknown;
            onInput?: unknown;
            onChange?: unknown;
            onPressEnter?: unknown;
            onClear?: unknown;
            onFocus?: unknown;
            onBlur?: unknown;
        } & {
            disabled: boolean;
            size: "small" | "mini" | "medium" | "large";
            error: boolean;
            defaultValue: string;
            readonly: boolean;
            allowClear: boolean;
            type: "text" | "password";
            maxLength: number | {
                length: number;
                errorOnly?: boolean | undefined;
            };
            showWordLimit: boolean;
        } & {
            onFocus?: import("../_utils/types").EmitType<(ev: FocusEvent) => void> | undefined;
            onBlur?: import("../_utils/types").EmitType<(ev: FocusEvent) => void> | undefined;
            modelValue?: string | undefined;
            placeholder?: string | undefined;
            onChange?: import("../_utils/types").EmitType<(value: string, ev: Event) => void> | undefined;
            onInput?: import("../_utils/types").EmitType<(value: string, ev: Event) => void> | undefined;
            onClear?: import("../_utils/types").EmitType<(ev: MouseEvent) => void> | undefined;
            onPressEnter?: import("../_utils/types").EmitType<(ev: KeyboardEvent) => void> | undefined;
            wordLength?: ((value: string) => number) | undefined;
            wordSlice?: ((value: string, maxLength: number) => string) | undefined;
        }> & {
            onFocus?: ((...args: any[]) => any) | undefined;
            onBlur?: ((...args: any[]) => any) | undefined;
            onChange?: ((...args: any[]) => any) | undefined;
            onInput?: ((...args: any[]) => any) | undefined;
            onClear?: ((...args: any[]) => any) | undefined;
            onPressEnter?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "size" | "error" | "defaultValue" | "readonly" | "allowClear" | "type" | "maxLength" | "showWordLimit">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "focus" | "blur" | "change" | "clear" | "update:modelValue" | "pressEnter" | "input", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            modelValue?: unknown;
            defaultValue?: unknown;
            size?: unknown;
            allowClear?: unknown;
            disabled?: unknown;
            readonly?: unknown;
            error?: unknown;
            placeholder?: unknown;
            maxLength?: unknown;
            showWordLimit?: unknown;
            wordLength?: unknown;
            wordSlice?: unknown;
            type?: unknown;
            onInput?: unknown;
            onChange?: unknown;
            onPressEnter?: unknown;
            onClear?: unknown;
            onFocus?: unknown;
            onBlur?: unknown;
        } & {
            disabled: boolean;
            size: "small" | "mini" | "medium" | "large";
            error: boolean;
            defaultValue: string;
            readonly: boolean;
            allowClear: boolean;
            type: "text" | "password";
            maxLength: number | {
                length: number;
                errorOnly?: boolean | undefined;
            };
            showWordLimit: boolean;
        } & {
            onFocus?: import("../_utils/types").EmitType<(ev: FocusEvent) => void> | undefined;
            onBlur?: import("../_utils/types").EmitType<(ev: FocusEvent) => void> | undefined;
            modelValue?: string | undefined;
            placeholder?: string | undefined;
            onChange?: import("../_utils/types").EmitType<(value: string, ev: Event) => void> | undefined;
            onInput?: import("../_utils/types").EmitType<(value: string, ev: Event) => void> | undefined;
            onClear?: import("../_utils/types").EmitType<(ev: MouseEvent) => void> | undefined;
            onPressEnter?: import("../_utils/types").EmitType<(ev: KeyboardEvent) => void> | undefined;
            wordLength?: ((value: string) => number) | undefined;
            wordSlice?: ((value: string, maxLength: number) => string) | undefined;
        }> & {
            onFocus?: ((...args: any[]) => any) | undefined;
            onBlur?: ((...args: any[]) => any) | undefined;
            onChange?: ((...args: any[]) => any) | undefined;
            onInput?: ((...args: any[]) => any) | undefined;
            onClear?: ((...args: any[]) => any) | undefined;
            onPressEnter?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        }, {
            inputRef: import("vue").Ref<HTMLInputElement | undefined>;
            render: () => JSX.Element;
        }, unknown, {}, {
            focus(): void;
            blur(): void;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("focus" | "blur" | "change" | "clear" | "update:modelValue" | "pressEnter" | "input")[], string, {
            disabled: boolean;
            size: "small" | "mini" | "medium" | "large";
            error: boolean;
            defaultValue: string;
            readonly: boolean;
            allowClear: boolean;
            type: "text" | "password";
            maxLength: number | {
                length: number;
                errorOnly?: boolean | undefined;
            };
            showWordLimit: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        modelValue?: unknown;
        defaultValue?: unknown;
        size?: unknown;
        allowClear?: unknown;
        disabled?: unknown;
        readonly?: unknown;
        error?: unknown;
        placeholder?: unknown;
        maxLength?: unknown;
        showWordLimit?: unknown;
        wordLength?: unknown;
        wordSlice?: unknown;
        type?: unknown;
        onInput?: unknown;
        onChange?: unknown;
        onPressEnter?: unknown;
        onClear?: unknown;
        onFocus?: unknown;
        onBlur?: unknown;
    } & {
        disabled: boolean;
        size: "small" | "mini" | "medium" | "large";
        error: boolean;
        defaultValue: string;
        readonly: boolean;
        allowClear: boolean;
        type: "text" | "password";
        maxLength: number | {
            length: number;
            errorOnly?: boolean | undefined;
        };
        showWordLimit: boolean;
    } & {
        onFocus?: import("../_utils/types").EmitType<(ev: FocusEvent) => void> | undefined;
        onBlur?: import("../_utils/types").EmitType<(ev: FocusEvent) => void> | undefined;
        modelValue?: string | undefined;
        placeholder?: string | undefined;
        onChange?: import("../_utils/types").EmitType<(value: string, ev: Event) => void> | undefined;
        onInput?: import("../_utils/types").EmitType<(value: string, ev: Event) => void> | undefined;
        onClear?: import("../_utils/types").EmitType<(ev: MouseEvent) => void> | undefined;
        onPressEnter?: import("../_utils/types").EmitType<(ev: KeyboardEvent) => void> | undefined;
        wordLength?: ((value: string) => number) | undefined;
        wordSlice?: ((value: string, maxLength: number) => string) | undefined;
    }> & {
        onFocus?: ((...args: any[]) => any) | undefined;
        onBlur?: ((...args: any[]) => any) | undefined;
        onChange?: ((...args: any[]) => any) | undefined;
        onInput?: ((...args: any[]) => any) | undefined;
        onClear?: ((...args: any[]) => any) | undefined;
        onPressEnter?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        inputRef: import("vue").Ref<HTMLInputElement | undefined>;
        render: () => JSX.Element;
    }> & {} & {} & {
        focus(): void;
        blur(): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    modelValue?: unknown;
    defaultValue?: unknown;
    size?: unknown;
    allowClear?: unknown;
    disabled?: unknown;
    readonly?: unknown;
    error?: unknown;
    placeholder?: unknown;
    maxLength?: unknown;
    showWordLimit?: unknown;
    wordLength?: unknown;
    wordSlice?: unknown;
    type?: unknown;
    onInput?: unknown;
    onChange?: unknown;
    onPressEnter?: unknown;
    onClear?: unknown;
    onFocus?: unknown;
    onBlur?: unknown;
} & {
    disabled: boolean;
    size: "small" | "mini" | "medium" | "large";
    error: boolean;
    defaultValue: string;
    readonly: boolean;
    allowClear: boolean;
    type: "text" | "password";
    maxLength: number | {
        length: number;
        errorOnly?: boolean | undefined;
    };
    showWordLimit: boolean;
} & {
    onFocus?: import("../_utils/types").EmitType<(ev: FocusEvent) => void> | undefined;
    onBlur?: import("../_utils/types").EmitType<(ev: FocusEvent) => void> | undefined;
    modelValue?: string | undefined;
    placeholder?: string | undefined;
    onChange?: import("../_utils/types").EmitType<(value: string, ev: Event) => void> | undefined;
    onInput?: import("../_utils/types").EmitType<(value: string, ev: Event) => void> | undefined;
    onClear?: import("../_utils/types").EmitType<(ev: MouseEvent) => void> | undefined;
    onPressEnter?: import("../_utils/types").EmitType<(ev: KeyboardEvent) => void> | undefined;
    wordLength?: ((value: string) => number) | undefined;
    wordSlice?: ((value: string, maxLength: number) => string) | undefined;
}> & {
    onFocus?: ((...args: any[]) => any) | undefined;
    onBlur?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
    onInput?: ((...args: any[]) => any) | undefined;
    onClear?: ((...args: any[]) => any) | undefined;
    onPressEnter?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    inputRef: import("vue").Ref<HTMLInputElement | undefined>;
    render: () => JSX.Element;
}, unknown, {}, {
    focus(): void;
    blur(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("focus" | "blur" | "change" | "clear" | "update:modelValue" | "pressEnter" | "input")[], "focus" | "blur" | "input" | "change" | "clear" | "update:modelValue" | "pressEnter", {
    disabled: boolean;
    size: "small" | "mini" | "medium" | "large";
    error: boolean;
    defaultValue: string;
    readonly: boolean;
    allowClear: boolean;
    type: "text" | "password";
    maxLength: number | {
        length: number;
        errorOnly?: boolean | undefined;
    };
    showWordLimit: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    Search: import("vue").DefineComponent<{
        searchButton: {
            type: BooleanConstructor;
            default: boolean;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<"small" | "mini" | "medium" | "large">;
            default: () => "small" | "mini" | "medium" | "large";
        };
        buttonProps: {
            type: ObjectConstructor;
        };
        onSearch: {
            type: import("vue").PropType<import("../_utils/types").EmitType<(value: string, ev: MouseEvent) => void>>;
        };
    }, {
        inputRef: import("vue").Ref<any>;
        render: () => JSX.Element;
    }, unknown, {}, {
        focus(): void;
        blur(): void;
    }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "search"[], "search", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        searchButton?: unknown;
        loading?: unknown;
        disabled?: unknown;
        size?: unknown;
        buttonProps?: unknown;
        onSearch?: unknown;
    } & {
        disabled: boolean;
        size: "small" | "mini" | "medium" | "large";
        loading: boolean;
        searchButton: boolean;
    } & {
        onSearch?: import("../_utils/types").EmitType<(value: string, ev: MouseEvent) => void> | undefined;
        buttonProps?: Record<string, any> | undefined;
    }> & {
        onSearch?: ((...args: any[]) => any) | undefined;
    }, {
        disabled: boolean;
        size: "small" | "mini" | "medium" | "large";
        loading: boolean;
        searchButton: boolean;
    }>;
    Password: import("vue").DefineComponent<{
        invisibleButton: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, {
        inputRef: import("vue").Ref<any>;
        invisible: import("vue").Ref<boolean>;
        handleInvisible: () => void;
    }, unknown, {}, {
        focus(): void;
        blur(): void;
    }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        invisibleButton?: unknown;
    } & {
        invisibleButton: boolean;
    } & {}>, {
        invisibleButton: boolean;
    }>;
    Group: import("vue").DefineComponent<{}, {
        prefixCls: string;
    }, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {} & {}>, {}>;
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type InputInstance = InstanceType<typeof _Input>;
export declare type InputSearchInstance = InstanceType<typeof _InputSearch>;
export declare type InputPasswordInstance = InstanceType<typeof _InputPassword>;
export declare type InputGroupInstance = InstanceType<typeof _InputGroup>;
export { _InputSearch as InputSearch, _InputPassword as InputPassword, _InputGroup as InputGroup, };
export default Input;
