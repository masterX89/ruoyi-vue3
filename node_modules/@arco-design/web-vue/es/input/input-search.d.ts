import { PropType } from 'vue';
import { EmitType } from '../_utils/types';
declare const _default: import("vue").DefineComponent<{
    searchButton: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: PropType<"small" | "mini" | "medium" | "large">;
        default: () => "small" | "mini" | "medium" | "large";
    };
    buttonProps: {
        type: ObjectConstructor;
    };
    onSearch: {
        type: PropType<EmitType<(value: string, ev: MouseEvent) => void>>;
    };
}, {
    inputRef: import("vue").Ref<any>;
    render: () => JSX.Element;
}, unknown, {}, {
    focus(): void;
    blur(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "search"[], "search", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    searchButton?: unknown;
    loading?: unknown;
    disabled?: unknown;
    size?: unknown;
    buttonProps?: unknown;
    onSearch?: unknown;
} & {
    disabled: boolean;
    size: "small" | "mini" | "medium" | "large";
    loading: boolean;
    searchButton: boolean;
} & {
    onSearch?: EmitType<(value: string, ev: MouseEvent) => void> | undefined;
    buttonProps?: Record<string, any> | undefined;
}> & {
    onSearch?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    size: "small" | "mini" | "medium" | "large";
    loading: boolean;
    searchButton: boolean;
}>;
export default _default;
