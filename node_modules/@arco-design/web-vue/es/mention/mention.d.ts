import { PropType } from 'vue';
import { Option } from '../select/interface';
import { EmitType } from '../_utils/types';
declare const _default: import("vue").DefineComponent<{
    modelValue: StringConstructor;
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    data: {
        type: PropType<Option[]>;
        default: () => never[];
    };
    prefix: {
        type: PropType<string | string[]>;
        default: string;
    };
    split: {
        type: StringConstructor;
        default: string;
    };
    type: {
        type: PropType<"input" | "textarea">;
        default: string;
    };
    onChange: {
        type: PropType<EmitType<(value: string) => void>>;
    };
    onSelect: {
        type: PropType<EmitType<(value: string) => void>>;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue" | "select" | "search")[], "select" | "change" | "update:modelValue" | "search", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    defaultValue?: unknown;
    data?: unknown;
    prefix?: unknown;
    split?: unknown;
    type?: unknown;
    onChange?: unknown;
    onSelect?: unknown;
} & {
    defaultValue: string;
    data: Option[];
    prefix: string | string[];
    type: "input" | "textarea";
    split: string;
} & {
    modelValue?: string | undefined;
    onChange?: EmitType<(value: string) => void> | undefined;
    onSelect?: EmitType<(value: string) => void> | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    onSelect?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onSearch?: ((...args: any[]) => any) | undefined;
}, {
    defaultValue: string;
    data: Option[];
    prefix: string | string[];
    type: "input" | "textarea";
    split: string;
}>;
export default _default;
