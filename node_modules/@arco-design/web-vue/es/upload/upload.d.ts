import type { PropType } from 'vue';
import type { CustomIcon, FileItem, RequestOption, UploadRequest } from './interfaces';
import { EmitType } from '../_utils/types';
declare const _default: import("vue").DefineComponent<{
    fileList: {
        type: PropType<FileItem[]>;
        default: undefined;
    };
    defaultFileList: {
        type: PropType<FileItem[]>;
        default: () => never[];
    };
    accept: StringConstructor;
    action: StringConstructor;
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    directory: {
        type: BooleanConstructor;
        default: boolean;
    };
    draggable: {
        type: BooleanConstructor;
        default: boolean;
    };
    tip: StringConstructor;
    headers: ObjectConstructor;
    data: {
        type: PropType<Record<string, unknown> | ((fileItem: FileItem) => Record<string, unknown>)>;
    };
    name: {
        type: PropType<string | ((fileItem: FileItem) => string)>;
    };
    withCredentials: {
        type: BooleanConstructor;
        default: boolean;
    };
    customRequest: {
        type: PropType<(option: RequestOption) => UploadRequest>;
    };
    limit: {
        type: NumberConstructor;
        default: number;
    };
    autoUpload: {
        type: BooleanConstructor;
        default: boolean;
    };
    showFileList: {
        type: BooleanConstructor;
        default: boolean;
    };
    showRemoveButton: {
        type: BooleanConstructor;
        default: boolean;
    };
    showRetryButton: {
        type: BooleanConstructor;
        default: boolean;
    };
    showCancelButton: {
        type: BooleanConstructor;
        default: boolean;
    };
    showUploadButton: {
        type: PropType<boolean | {
            showOnExceedLimit: boolean;
        }>;
        default: boolean;
    };
    download: {
        type: BooleanConstructor;
        default: boolean;
    };
    showLink: {
        type: BooleanConstructor;
        default: boolean;
    };
    imageLoading: {
        type: PropType<"eager" | "lazy">;
    };
    listType: {
        type: PropType<"picture" | "text" | "picture-card">;
        default: string;
    };
    responseUrlKey: {
        type: PropType<string | ((fileItem: FileItem) => string)>;
    };
    customIcon: {
        type: PropType<CustomIcon>;
    };
    imagePreview: {
        type: BooleanConstructor;
        default: boolean;
    };
    onBeforeUpload: {
        type: PropType<(file: File) => Promise<boolean>>;
    };
    onBeforeRemove: {
        type: PropType<(fileItem: FileItem) => Promise<boolean>>;
    };
    onButtonClick: {
        type: PropType<(event: Event) => Promise<FileList> | void>;
    };
    onChange: {
        type: PropType<EmitType<(fileList: FileItem[], fileItem: FileItem) => void>>;
    };
    onProgress: {
        type: PropType<EmitType<(fileItem: FileItem, event: ProgressEvent) => void>>;
    };
    onExceedLimit: {
        type: PropType<EmitType<(fileList: FileItem[], files: File[]) => void>>;
    };
    onPreview: {
        type: PropType<EmitType<(fileItem: FileItem) => void>>;
    };
    onSuccess: {
        type: PropType<EmitType<(fileItem: FileItem) => void>>;
    };
    onError: {
        type: PropType<EmitType<(fileItem: FileItem) => void>>;
    };
}, {
    prefixCls: string;
    render: () => false | JSX.Element;
    innerSubmit: (fileItem?: FileItem | undefined) => void;
    innerAbort: (fileItem: FileItem) => void;
}, unknown, {}, {
    submit(fileItem?: FileItem | undefined): void;
    abort(fileItem: FileItem): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "progress" | "success" | "error" | "preview" | "update:fileList" | "exceedLimit")[], "error" | "progress" | "change" | "preview" | "success" | "update:fileList" | "exceedLimit", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    fileList?: unknown;
    defaultFileList?: unknown;
    accept?: unknown;
    action?: unknown;
    disabled?: unknown;
    multiple?: unknown;
    directory?: unknown;
    draggable?: unknown;
    tip?: unknown;
    headers?: unknown;
    data?: unknown;
    name?: unknown;
    withCredentials?: unknown;
    customRequest?: unknown;
    limit?: unknown;
    autoUpload?: unknown;
    showFileList?: unknown;
    showRemoveButton?: unknown;
    showRetryButton?: unknown;
    showCancelButton?: unknown;
    showUploadButton?: unknown;
    download?: unknown;
    showLink?: unknown;
    imageLoading?: unknown;
    listType?: unknown;
    responseUrlKey?: unknown;
    customIcon?: unknown;
    imagePreview?: unknown;
    onBeforeUpload?: unknown;
    onBeforeRemove?: unknown;
    onButtonClick?: unknown;
    onChange?: unknown;
    onProgress?: unknown;
    onExceedLimit?: unknown;
    onPreview?: unknown;
    onSuccess?: unknown;
    onError?: unknown;
} & {
    disabled: boolean;
    multiple: boolean;
    imagePreview: boolean;
    draggable: boolean;
    directory: boolean;
    listType: "picture" | "text" | "picture-card";
    defaultFileList: FileItem[];
    withCredentials: boolean;
    limit: number;
    autoUpload: boolean;
    showFileList: boolean;
    showRemoveButton: boolean;
    showRetryButton: boolean;
    showCancelButton: boolean;
    showUploadButton: boolean | {
        showOnExceedLimit: boolean;
    };
    download: boolean;
    showLink: boolean;
} & {
    onChange?: EmitType<(fileList: FileItem[], fileItem: FileItem) => void> | undefined;
    data?: Record<string, unknown> | ((fileItem: FileItem) => Record<string, unknown>) | undefined;
    onError?: EmitType<(fileItem: FileItem) => void> | undefined;
    onProgress?: EmitType<(fileItem: FileItem, event: ProgressEvent) => void> | undefined;
    tip?: string | undefined;
    name?: string | ((fileItem: FileItem) => string) | undefined;
    accept?: string | undefined;
    onButtonClick?: ((event: Event) => Promise<FileList> | void) | undefined;
    fileList?: FileItem[] | undefined;
    onSuccess?: EmitType<(fileItem: FileItem) => void> | undefined;
    onPreview?: EmitType<(fileItem: FileItem) => void> | undefined;
    onExceedLimit?: EmitType<(fileList: FileItem[], files: File[]) => void> | undefined;
    action?: string | undefined;
    headers?: Record<string, any> | undefined;
    customRequest?: ((option: RequestOption) => UploadRequest) | undefined;
    imageLoading?: "eager" | "lazy" | undefined;
    responseUrlKey?: string | ((fileItem: FileItem) => string) | undefined;
    customIcon?: CustomIcon | undefined;
    onBeforeUpload?: ((file: File) => Promise<boolean>) | undefined;
    onBeforeRemove?: ((fileItem: FileItem) => Promise<boolean>) | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    onError?: ((...args: any[]) => any) | undefined;
    onProgress?: ((...args: any[]) => any) | undefined;
    onSuccess?: ((...args: any[]) => any) | undefined;
    onPreview?: ((...args: any[]) => any) | undefined;
    "onUpdate:fileList"?: ((...args: any[]) => any) | undefined;
    onExceedLimit?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    multiple: boolean;
    imagePreview: boolean;
    draggable: boolean;
    directory: boolean;
    listType: "picture" | "text" | "picture-card";
    fileList: FileItem[];
    defaultFileList: FileItem[];
    withCredentials: boolean;
    limit: number;
    autoUpload: boolean;
    showFileList: boolean;
    showRemoveButton: boolean;
    showRetryButton: boolean;
    showCancelButton: boolean;
    showUploadButton: boolean | {
        showOnExceedLimit: boolean;
    };
    download: boolean;
    showLink: boolean;
}>;
export default _default;
