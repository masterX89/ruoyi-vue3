import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _Upload from './upload';
declare const Upload: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            disabled: boolean;
            multiple: boolean;
            imagePreview: boolean;
            draggable: boolean;
            directory: boolean;
            listType: "picture" | "text" | "picture-card";
            fileList: import("./interfaces").FileItem[];
            defaultFileList: import("./interfaces").FileItem[];
            withCredentials: boolean;
            limit: number;
            autoUpload: boolean;
            showFileList: boolean;
            showRemoveButton: boolean;
            showRetryButton: boolean;
            showCancelButton: boolean;
            showUploadButton: boolean | {
                showOnExceedLimit: boolean;
            };
            download: boolean;
            showLink: boolean;
        }> & Omit<Readonly<{
            fileList?: unknown;
            defaultFileList?: unknown;
            accept?: unknown;
            action?: unknown;
            disabled?: unknown;
            multiple?: unknown;
            directory?: unknown;
            draggable?: unknown;
            tip?: unknown;
            headers?: unknown;
            data?: unknown;
            name?: unknown;
            withCredentials?: unknown;
            customRequest?: unknown;
            limit?: unknown;
            autoUpload?: unknown;
            showFileList?: unknown;
            showRemoveButton?: unknown;
            showRetryButton?: unknown;
            showCancelButton?: unknown;
            showUploadButton?: unknown;
            download?: unknown;
            showLink?: unknown;
            imageLoading?: unknown;
            listType?: unknown;
            responseUrlKey?: unknown;
            customIcon?: unknown;
            imagePreview?: unknown;
            onBeforeUpload?: unknown;
            onBeforeRemove?: unknown;
            onButtonClick?: unknown;
            onChange?: unknown;
            onProgress?: unknown;
            onExceedLimit?: unknown;
            onPreview?: unknown;
            onSuccess?: unknown;
            onError?: unknown;
        } & {
            disabled: boolean;
            multiple: boolean;
            imagePreview: boolean;
            draggable: boolean;
            directory: boolean;
            listType: "picture" | "text" | "picture-card";
            defaultFileList: import("./interfaces").FileItem[];
            withCredentials: boolean;
            limit: number;
            autoUpload: boolean;
            showFileList: boolean;
            showRemoveButton: boolean;
            showRetryButton: boolean;
            showCancelButton: boolean;
            showUploadButton: boolean | {
                showOnExceedLimit: boolean;
            };
            download: boolean;
            showLink: boolean;
        } & {
            onChange?: import("../_utils/types").EmitType<(fileList: import("./interfaces").FileItem[], fileItem: import("./interfaces").FileItem) => void> | undefined;
            data?: Record<string, unknown> | ((fileItem: import("./interfaces").FileItem) => Record<string, unknown>) | undefined;
            onError?: import("../_utils/types").EmitType<(fileItem: import("./interfaces").FileItem) => void> | undefined;
            onProgress?: import("../_utils/types").EmitType<(fileItem: import("./interfaces").FileItem, event: ProgressEvent<EventTarget>) => void> | undefined;
            tip?: string | undefined;
            name?: string | ((fileItem: import("./interfaces").FileItem) => string) | undefined;
            accept?: string | undefined;
            onButtonClick?: ((event: Event) => void | Promise<FileList>) | undefined;
            fileList?: import("./interfaces").FileItem[] | undefined;
            onSuccess?: import("../_utils/types").EmitType<(fileItem: import("./interfaces").FileItem) => void> | undefined;
            onPreview?: import("../_utils/types").EmitType<(fileItem: import("./interfaces").FileItem) => void> | undefined;
            onExceedLimit?: import("../_utils/types").EmitType<(fileList: import("./interfaces").FileItem[], files: File[]) => void> | undefined;
            action?: string | undefined;
            headers?: Record<string, any> | undefined;
            customRequest?: ((option: import("./interfaces").RequestOption) => import("./interfaces").UploadRequest) | undefined;
            imageLoading?: "eager" | "lazy" | undefined;
            responseUrlKey?: string | ((fileItem: import("./interfaces").FileItem) => string) | undefined;
            customIcon?: import("./interfaces").CustomIcon | undefined;
            onBeforeUpload?: ((file: File) => Promise<boolean>) | undefined;
            onBeforeRemove?: ((fileItem: import("./interfaces").FileItem) => Promise<boolean>) | undefined;
        }> & {
            onChange?: ((...args: any[]) => any) | undefined;
            onError?: ((...args: any[]) => any) | undefined;
            onProgress?: ((...args: any[]) => any) | undefined;
            onSuccess?: ((...args: any[]) => any) | undefined;
            onPreview?: ((...args: any[]) => any) | undefined;
            "onUpdate:fileList"?: ((...args: any[]) => any) | undefined;
            onExceedLimit?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "multiple" | "imagePreview" | "draggable" | "directory" | "listType" | "fileList" | "defaultFileList" | "withCredentials" | "limit" | "autoUpload" | "showFileList" | "showRemoveButton" | "showRetryButton" | "showCancelButton" | "showUploadButton" | "download" | "showLink">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "change" | "progress" | "success" | "error" | "preview" | "update:fileList" | "exceedLimit", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            fileList?: unknown;
            defaultFileList?: unknown;
            accept?: unknown;
            action?: unknown;
            disabled?: unknown;
            multiple?: unknown;
            directory?: unknown;
            draggable?: unknown;
            tip?: unknown;
            headers?: unknown;
            data?: unknown;
            name?: unknown;
            withCredentials?: unknown;
            customRequest?: unknown;
            limit?: unknown;
            autoUpload?: unknown;
            showFileList?: unknown;
            showRemoveButton?: unknown;
            showRetryButton?: unknown;
            showCancelButton?: unknown;
            showUploadButton?: unknown;
            download?: unknown;
            showLink?: unknown;
            imageLoading?: unknown;
            listType?: unknown;
            responseUrlKey?: unknown;
            customIcon?: unknown;
            imagePreview?: unknown;
            onBeforeUpload?: unknown;
            onBeforeRemove?: unknown;
            onButtonClick?: unknown;
            onChange?: unknown;
            onProgress?: unknown;
            onExceedLimit?: unknown;
            onPreview?: unknown;
            onSuccess?: unknown;
            onError?: unknown;
        } & {
            disabled: boolean;
            multiple: boolean;
            imagePreview: boolean;
            draggable: boolean;
            directory: boolean;
            listType: "picture" | "text" | "picture-card";
            defaultFileList: import("./interfaces").FileItem[];
            withCredentials: boolean;
            limit: number;
            autoUpload: boolean;
            showFileList: boolean;
            showRemoveButton: boolean;
            showRetryButton: boolean;
            showCancelButton: boolean;
            showUploadButton: boolean | {
                showOnExceedLimit: boolean;
            };
            download: boolean;
            showLink: boolean;
        } & {
            onChange?: import("../_utils/types").EmitType<(fileList: import("./interfaces").FileItem[], fileItem: import("./interfaces").FileItem) => void> | undefined;
            data?: Record<string, unknown> | ((fileItem: import("./interfaces").FileItem) => Record<string, unknown>) | undefined;
            onError?: import("../_utils/types").EmitType<(fileItem: import("./interfaces").FileItem) => void> | undefined;
            onProgress?: import("../_utils/types").EmitType<(fileItem: import("./interfaces").FileItem, event: ProgressEvent<EventTarget>) => void> | undefined;
            tip?: string | undefined;
            name?: string | ((fileItem: import("./interfaces").FileItem) => string) | undefined;
            accept?: string | undefined;
            onButtonClick?: ((event: Event) => void | Promise<FileList>) | undefined;
            fileList?: import("./interfaces").FileItem[] | undefined;
            onSuccess?: import("../_utils/types").EmitType<(fileItem: import("./interfaces").FileItem) => void> | undefined;
            onPreview?: import("../_utils/types").EmitType<(fileItem: import("./interfaces").FileItem) => void> | undefined;
            onExceedLimit?: import("../_utils/types").EmitType<(fileList: import("./interfaces").FileItem[], files: File[]) => void> | undefined;
            action?: string | undefined;
            headers?: Record<string, any> | undefined;
            customRequest?: ((option: import("./interfaces").RequestOption) => import("./interfaces").UploadRequest) | undefined;
            imageLoading?: "eager" | "lazy" | undefined;
            responseUrlKey?: string | ((fileItem: import("./interfaces").FileItem) => string) | undefined;
            customIcon?: import("./interfaces").CustomIcon | undefined;
            onBeforeUpload?: ((file: File) => Promise<boolean>) | undefined;
            onBeforeRemove?: ((fileItem: import("./interfaces").FileItem) => Promise<boolean>) | undefined;
        }> & {
            onChange?: ((...args: any[]) => any) | undefined;
            onError?: ((...args: any[]) => any) | undefined;
            onProgress?: ((...args: any[]) => any) | undefined;
            onSuccess?: ((...args: any[]) => any) | undefined;
            onPreview?: ((...args: any[]) => any) | undefined;
            "onUpdate:fileList"?: ((...args: any[]) => any) | undefined;
            onExceedLimit?: ((...args: any[]) => any) | undefined;
        }, {
            prefixCls: string;
            render: () => false | JSX.Element;
            innerSubmit: (fileItem?: import("./interfaces").FileItem | undefined) => void;
            innerAbort: (fileItem: import("./interfaces").FileItem) => void;
        }, unknown, {}, {
            submit(fileItem?: import("./interfaces").FileItem | undefined): void;
            abort(fileItem: import("./interfaces").FileItem): void;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "progress" | "success" | "error" | "preview" | "update:fileList" | "exceedLimit")[], string, {
            disabled: boolean;
            multiple: boolean;
            imagePreview: boolean;
            draggable: boolean;
            directory: boolean;
            listType: "picture" | "text" | "picture-card";
            fileList: import("./interfaces").FileItem[];
            defaultFileList: import("./interfaces").FileItem[];
            withCredentials: boolean;
            limit: number;
            autoUpload: boolean;
            showFileList: boolean;
            showRemoveButton: boolean;
            showRetryButton: boolean;
            showCancelButton: boolean;
            showUploadButton: boolean | {
                showOnExceedLimit: boolean;
            };
            download: boolean;
            showLink: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        fileList?: unknown;
        defaultFileList?: unknown;
        accept?: unknown;
        action?: unknown;
        disabled?: unknown;
        multiple?: unknown;
        directory?: unknown;
        draggable?: unknown;
        tip?: unknown;
        headers?: unknown;
        data?: unknown;
        name?: unknown;
        withCredentials?: unknown;
        customRequest?: unknown;
        limit?: unknown;
        autoUpload?: unknown;
        showFileList?: unknown;
        showRemoveButton?: unknown;
        showRetryButton?: unknown;
        showCancelButton?: unknown;
        showUploadButton?: unknown;
        download?: unknown;
        showLink?: unknown;
        imageLoading?: unknown;
        listType?: unknown;
        responseUrlKey?: unknown;
        customIcon?: unknown;
        imagePreview?: unknown;
        onBeforeUpload?: unknown;
        onBeforeRemove?: unknown;
        onButtonClick?: unknown;
        onChange?: unknown;
        onProgress?: unknown;
        onExceedLimit?: unknown;
        onPreview?: unknown;
        onSuccess?: unknown;
        onError?: unknown;
    } & {
        disabled: boolean;
        multiple: boolean;
        imagePreview: boolean;
        draggable: boolean;
        directory: boolean;
        listType: "picture" | "text" | "picture-card";
        defaultFileList: import("./interfaces").FileItem[];
        withCredentials: boolean;
        limit: number;
        autoUpload: boolean;
        showFileList: boolean;
        showRemoveButton: boolean;
        showRetryButton: boolean;
        showCancelButton: boolean;
        showUploadButton: boolean | {
            showOnExceedLimit: boolean;
        };
        download: boolean;
        showLink: boolean;
    } & {
        onChange?: import("../_utils/types").EmitType<(fileList: import("./interfaces").FileItem[], fileItem: import("./interfaces").FileItem) => void> | undefined;
        data?: Record<string, unknown> | ((fileItem: import("./interfaces").FileItem) => Record<string, unknown>) | undefined;
        onError?: import("../_utils/types").EmitType<(fileItem: import("./interfaces").FileItem) => void> | undefined;
        onProgress?: import("../_utils/types").EmitType<(fileItem: import("./interfaces").FileItem, event: ProgressEvent<EventTarget>) => void> | undefined;
        tip?: string | undefined;
        name?: string | ((fileItem: import("./interfaces").FileItem) => string) | undefined;
        accept?: string | undefined;
        onButtonClick?: ((event: Event) => void | Promise<FileList>) | undefined;
        fileList?: import("./interfaces").FileItem[] | undefined;
        onSuccess?: import("../_utils/types").EmitType<(fileItem: import("./interfaces").FileItem) => void> | undefined;
        onPreview?: import("../_utils/types").EmitType<(fileItem: import("./interfaces").FileItem) => void> | undefined;
        onExceedLimit?: import("../_utils/types").EmitType<(fileList: import("./interfaces").FileItem[], files: File[]) => void> | undefined;
        action?: string | undefined;
        headers?: Record<string, any> | undefined;
        customRequest?: ((option: import("./interfaces").RequestOption) => import("./interfaces").UploadRequest) | undefined;
        imageLoading?: "eager" | "lazy" | undefined;
        responseUrlKey?: string | ((fileItem: import("./interfaces").FileItem) => string) | undefined;
        customIcon?: import("./interfaces").CustomIcon | undefined;
        onBeforeUpload?: ((file: File) => Promise<boolean>) | undefined;
        onBeforeRemove?: ((fileItem: import("./interfaces").FileItem) => Promise<boolean>) | undefined;
    }> & {
        onChange?: ((...args: any[]) => any) | undefined;
        onError?: ((...args: any[]) => any) | undefined;
        onProgress?: ((...args: any[]) => any) | undefined;
        onSuccess?: ((...args: any[]) => any) | undefined;
        onPreview?: ((...args: any[]) => any) | undefined;
        "onUpdate:fileList"?: ((...args: any[]) => any) | undefined;
        onExceedLimit?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        prefixCls: string;
        render: () => false | JSX.Element;
        innerSubmit: (fileItem?: import("./interfaces").FileItem | undefined) => void;
        innerAbort: (fileItem: import("./interfaces").FileItem) => void;
    }> & {} & {} & {
        submit(fileItem?: import("./interfaces").FileItem | undefined): void;
        abort(fileItem: import("./interfaces").FileItem): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    fileList?: unknown;
    defaultFileList?: unknown;
    accept?: unknown;
    action?: unknown;
    disabled?: unknown;
    multiple?: unknown;
    directory?: unknown;
    draggable?: unknown;
    tip?: unknown;
    headers?: unknown;
    data?: unknown;
    name?: unknown;
    withCredentials?: unknown;
    customRequest?: unknown;
    limit?: unknown;
    autoUpload?: unknown;
    showFileList?: unknown;
    showRemoveButton?: unknown;
    showRetryButton?: unknown;
    showCancelButton?: unknown;
    showUploadButton?: unknown;
    download?: unknown;
    showLink?: unknown;
    imageLoading?: unknown;
    listType?: unknown;
    responseUrlKey?: unknown;
    customIcon?: unknown;
    imagePreview?: unknown;
    onBeforeUpload?: unknown;
    onBeforeRemove?: unknown;
    onButtonClick?: unknown;
    onChange?: unknown;
    onProgress?: unknown;
    onExceedLimit?: unknown;
    onPreview?: unknown;
    onSuccess?: unknown;
    onError?: unknown;
} & {
    disabled: boolean;
    multiple: boolean;
    imagePreview: boolean;
    draggable: boolean;
    directory: boolean;
    listType: "picture" | "text" | "picture-card";
    defaultFileList: import("./interfaces").FileItem[];
    withCredentials: boolean;
    limit: number;
    autoUpload: boolean;
    showFileList: boolean;
    showRemoveButton: boolean;
    showRetryButton: boolean;
    showCancelButton: boolean;
    showUploadButton: boolean | {
        showOnExceedLimit: boolean;
    };
    download: boolean;
    showLink: boolean;
} & {
    onChange?: import("../_utils/types").EmitType<(fileList: import("./interfaces").FileItem[], fileItem: import("./interfaces").FileItem) => void> | undefined;
    data?: Record<string, unknown> | ((fileItem: import("./interfaces").FileItem) => Record<string, unknown>) | undefined;
    onError?: import("../_utils/types").EmitType<(fileItem: import("./interfaces").FileItem) => void> | undefined;
    onProgress?: import("../_utils/types").EmitType<(fileItem: import("./interfaces").FileItem, event: ProgressEvent<EventTarget>) => void> | undefined;
    tip?: string | undefined;
    name?: string | ((fileItem: import("./interfaces").FileItem) => string) | undefined;
    accept?: string | undefined;
    onButtonClick?: ((event: Event) => void | Promise<FileList>) | undefined;
    fileList?: import("./interfaces").FileItem[] | undefined;
    onSuccess?: import("../_utils/types").EmitType<(fileItem: import("./interfaces").FileItem) => void> | undefined;
    onPreview?: import("../_utils/types").EmitType<(fileItem: import("./interfaces").FileItem) => void> | undefined;
    onExceedLimit?: import("../_utils/types").EmitType<(fileList: import("./interfaces").FileItem[], files: File[]) => void> | undefined;
    action?: string | undefined;
    headers?: Record<string, any> | undefined;
    customRequest?: ((option: import("./interfaces").RequestOption) => import("./interfaces").UploadRequest) | undefined;
    imageLoading?: "eager" | "lazy" | undefined;
    responseUrlKey?: string | ((fileItem: import("./interfaces").FileItem) => string) | undefined;
    customIcon?: import("./interfaces").CustomIcon | undefined;
    onBeforeUpload?: ((file: File) => Promise<boolean>) | undefined;
    onBeforeRemove?: ((fileItem: import("./interfaces").FileItem) => Promise<boolean>) | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    onError?: ((...args: any[]) => any) | undefined;
    onProgress?: ((...args: any[]) => any) | undefined;
    onSuccess?: ((...args: any[]) => any) | undefined;
    onPreview?: ((...args: any[]) => any) | undefined;
    "onUpdate:fileList"?: ((...args: any[]) => any) | undefined;
    onExceedLimit?: ((...args: any[]) => any) | undefined;
}, {
    prefixCls: string;
    render: () => false | JSX.Element;
    innerSubmit: (fileItem?: import("./interfaces").FileItem | undefined) => void;
    innerAbort: (fileItem: import("./interfaces").FileItem) => void;
}, unknown, {}, {
    submit(fileItem?: import("./interfaces").FileItem | undefined): void;
    abort(fileItem: import("./interfaces").FileItem): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "progress" | "success" | "error" | "preview" | "update:fileList" | "exceedLimit")[], "error" | "progress" | "change" | "preview" | "success" | "update:fileList" | "exceedLimit", {
    disabled: boolean;
    multiple: boolean;
    imagePreview: boolean;
    draggable: boolean;
    directory: boolean;
    listType: "picture" | "text" | "picture-card";
    fileList: import("./interfaces").FileItem[];
    defaultFileList: import("./interfaces").FileItem[];
    withCredentials: boolean;
    limit: number;
    autoUpload: boolean;
    showFileList: boolean;
    showRemoveButton: boolean;
    showRetryButton: boolean;
    showCancelButton: boolean;
    showUploadButton: boolean | {
        showOnExceedLimit: boolean;
    };
    download: boolean;
    showLink: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type UploadInstance = InstanceType<typeof _Upload>;
export default Upload;
