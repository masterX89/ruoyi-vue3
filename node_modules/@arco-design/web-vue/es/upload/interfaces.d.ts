import type { RenderFunction, VNode } from 'vue';
import { Data } from '../_utils/types';
export declare const LIST_TYPES: readonly ["text", "picture", "picture-card"];
export declare type ListType = typeof LIST_TYPES[number];
export declare const FILE_STATUS: readonly ["init", "uploading", "done", "error"];
export declare type FileStatus = typeof FILE_STATUS[number];
export interface FileItem {
    uid: string;
    status?: FileStatus;
    file?: File;
    percent?: number;
    response?: any;
    url?: string;
    name?: string;
}
export interface CustomIcon {
    startIcon?: RenderFunction;
    cancelIcon?: RenderFunction;
    retryIcon?: RenderFunction;
    successIcon?: RenderFunction;
    errorIcon?: RenderFunction;
    removeIcon?: RenderFunction;
    previewIcon?: RenderFunction;
    fileIcon?: (fileItem: FileItem) => VNode;
    fileName?: (fileItem: FileItem) => string | VNode;
}
export interface RequestOption {
    action?: string;
    headers?: Data;
    name?: string | ((fileItem: FileItem) => string);
    fileItem: FileItem;
    data?: Data | ((fileItem: FileItem) => Data);
    withCredentials?: boolean;
    onProgress: (percent: number, event?: ProgressEvent) => void;
    onSuccess: (response?: any) => void;
    onError: (response?: any) => void;
}
export interface UploadRequest extends Data {
    abort?: () => void;
}
