import type { App, CreateComponentPublicInstance } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import { SelectProps } from './select';
import _Option from './option';
import _Optgroup from './optgroup';
declare const Select: import("vue").FunctionalComponent<Partial<{
    options: import("./interface").Option[];
    filterOption: boolean | ((inputValue: string, optionInfo: import("./interface").OptionInfo) => boolean);
    showExtraOptions: boolean;
    disabled: boolean;
    size: "small" | "mini" | "medium" | "large";
    error: boolean;
    defaultInputValue: string;
    defaultValue: string | number | (string | number)[];
    allowClear: boolean;
    multiple: boolean;
    loading: boolean;
    bordered: boolean;
    allowCreate: boolean;
    allowSearch: boolean | {
        retainInputValue?: boolean | undefined;
    };
    maxTagCount: number;
    popupVisible: boolean;
    unmountOnClose: boolean;
    defaultActiveFirstOption: boolean;
    fallbackOption: boolean | ((value: string | number) => import("./interface").OptionData);
}> & Omit<Readonly<{
    multiple?: unknown;
    modelValue?: unknown;
    defaultValue?: unknown;
    inputValue?: unknown;
    defaultInputValue?: unknown;
    size?: unknown;
    placeholder?: unknown;
    loading?: unknown;
    disabled?: unknown;
    error?: unknown;
    allowClear?: unknown;
    allowSearch?: unknown;
    allowCreate?: unknown;
    maxTagCount?: unknown;
    popupContainer?: unknown;
    bordered?: unknown;
    defaultActiveFirstOption?: unknown;
    popupVisible?: unknown;
    unmountOnClose?: unknown;
    filterOption?: unknown;
    options?: unknown;
    virtualListProps?: unknown;
    triggerProps?: unknown;
    formatLabel?: unknown;
    fallbackOption?: unknown;
    showExtraOptions?: unknown;
    onChange?: unknown;
    onInputValueChange?: unknown;
    onPopupVisibleChange?: unknown;
    onClear?: unknown;
    onRemove?: unknown;
    onSearch?: unknown;
} & {
    options: import("./interface").Option[];
    filterOption: boolean | ((inputValue: string, optionInfo: import("./interface").OptionInfo) => boolean);
    showExtraOptions: boolean;
    disabled: boolean;
    size: "small" | "mini" | "medium" | "large";
    error: boolean;
    defaultInputValue: string;
    defaultValue: string | number | (string | number)[];
    allowClear: boolean;
    multiple: boolean;
    loading: boolean;
    bordered: boolean;
    allowCreate: boolean;
    allowSearch: boolean | {
        retainInputValue?: boolean | undefined;
    };
    maxTagCount: number;
    unmountOnClose: boolean;
    defaultActiveFirstOption: boolean;
    fallbackOption: boolean | ((value: string | number) => import("./interface").OptionData);
} & {
    inputValue?: string | undefined;
    onInputValueChange?: import("../_utils/types").EmitType<(inputValue: string) => void> | undefined;
    modelValue?: string | number | (string | number)[] | undefined;
    formatLabel?: ((data: import("./interface").OptionInfo) => string) | undefined;
    placeholder?: string | undefined;
    onChange?: import("../_utils/types").EmitType<(value: string | number | (string | number)[]) => void> | undefined;
    onClear?: import("../_utils/types").EmitType<() => void> | undefined;
    onRemove?: import("../_utils/types").EmitType<(removed: string) => void> | undefined;
    popupContainer?: string | HTMLElement | undefined;
    onPopupVisibleChange?: import("../_utils/types").EmitType<(popupVisible: boolean) => void> | undefined;
    popupVisible?: boolean | undefined;
    virtualListProps?: import("../_components/virtual-list/interface").VirtualListProps | undefined;
    onSearch?: import("../_utils/types").EmitType<(inputValue: string) => void> | undefined;
    triggerProps?: (Partial<{
        disabled: boolean;
        animationName: string;
        position: "br" | "rt" | "tr" | "left" | "right" | "bottom" | "top" | "tl" | "bl" | "lt" | "lb" | "rb";
        popupVisible: boolean;
        defaultPopupVisible: boolean;
        trigger: "focus" | "click" | "hover" | "contextMenu" | ("focus" | "click" | "hover" | "contextMenu")[];
        popupOffset: number;
        showArrow: boolean;
        alignPoint: boolean;
        popupHoverStay: boolean;
        blurToClose: boolean;
        clickToClose: boolean;
        clickOutsideToClose: boolean;
        unmountOnClose: boolean;
        mouseEnterDelay: number;
        mouseLeaveDelay: number;
        focusDelay: number;
        autoFitPopupWidth: boolean;
        autoFitPopupMinWidth: boolean;
        autoFixPosition: boolean;
        updateAtScroll: boolean;
        autoFitTransformOrigin: boolean;
        hideEmpty: boolean;
        autoFitPosition: boolean;
        renderToBody: boolean;
        preventFocus: boolean;
    }> & Omit<Readonly<{
        popupVisible?: unknown;
        defaultPopupVisible?: unknown;
        trigger?: unknown;
        position?: unknown;
        disabled?: unknown;
        popupOffset?: unknown;
        popupTranslate?: unknown;
        showArrow?: unknown;
        alignPoint?: unknown;
        popupHoverStay?: unknown;
        blurToClose?: unknown;
        clickToClose?: unknown;
        clickOutsideToClose?: unknown;
        unmountOnClose?: unknown;
        contentClass?: unknown;
        contentStyle?: unknown;
        arrowClass?: unknown;
        arrowStyle?: unknown;
        popupStyle?: unknown;
        animationName?: unknown;
        duration?: unknown;
        mouseEnterDelay?: unknown;
        mouseLeaveDelay?: unknown;
        focusDelay?: unknown;
        autoFitPopupWidth?: unknown;
        autoFitPopupMinWidth?: unknown;
        autoFixPosition?: unknown;
        popupContainer?: unknown;
        updateAtScroll?: unknown;
        autoFitTransformOrigin?: unknown;
        hideEmpty?: unknown;
        openedCls?: unknown;
        autoFitPosition?: unknown;
        renderToBody?: unknown;
        preventFocus?: unknown;
        onPopupVisibleChange?: unknown;
    } & {
        disabled: boolean;
        animationName: string;
        position: "br" | "rt" | "tr" | "left" | "right" | "bottom" | "top" | "tl" | "bl" | "lt" | "lb" | "rb";
        defaultPopupVisible: boolean;
        trigger: "focus" | "click" | "hover" | "contextMenu" | ("focus" | "click" | "hover" | "contextMenu")[];
        popupOffset: number;
        showArrow: boolean;
        alignPoint: boolean;
        popupHoverStay: boolean;
        blurToClose: boolean;
        clickToClose: boolean;
        clickOutsideToClose: boolean;
        unmountOnClose: boolean;
        mouseEnterDelay: number;
        mouseLeaveDelay: number;
        focusDelay: number;
        autoFitPopupWidth: boolean;
        autoFitPopupMinWidth: boolean;
        autoFixPosition: boolean;
        updateAtScroll: boolean;
        autoFitTransformOrigin: boolean;
        hideEmpty: boolean;
        autoFitPosition: boolean;
        renderToBody: boolean;
        preventFocus: boolean;
    } & {
        popupContainer?: string | HTMLElement | undefined;
        onPopupVisibleChange?: import("../_utils/types").EmitType<(popupVisible: boolean) => void> | undefined;
        popupVisible?: boolean | undefined;
        popupTranslate?: import("../trigger/utils").PopupTranslate | undefined;
        contentClass?: import("../_utils/types").ClassName | undefined;
        contentStyle?: import("vue").CSSProperties | undefined;
        arrowClass?: import("../_utils/types").ClassName | undefined;
        arrowStyle?: import("vue").CSSProperties | undefined;
        popupStyle?: import("vue").CSSProperties | undefined;
        duration?: import("../_utils/types").AnimationDuration | undefined;
        openedCls?: string | undefined;
    }> & {
        "onUpdate:popupVisible"?: ((...args: any[]) => any) | undefined;
        onPopupVisibleChange?: ((...args: any[]) => any) | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "animationName" | "position" | "popupVisible" | "defaultPopupVisible" | "trigger" | "popupOffset" | "showArrow" | "alignPoint" | "popupHoverStay" | "blurToClose" | "clickToClose" | "clickOutsideToClose" | "unmountOnClose" | "mouseEnterDelay" | "mouseLeaveDelay" | "focusDelay" | "autoFitPopupWidth" | "autoFitPopupMinWidth" | "autoFixPosition" | "updateAtScroll" | "autoFitTransformOrigin" | "hideEmpty" | "autoFitPosition" | "renderToBody" | "preventFocus">) | undefined;
}> & {
    "onUpdate:inputValue"?: ((...args: any[]) => any) | undefined;
    onInputValueChange?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
    onClear?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onRemove?: ((...args: any[]) => any) | undefined;
    "onUpdate:popupVisible"?: ((...args: any[]) => any) | undefined;
    onPopupVisibleChange?: ((...args: any[]) => any) | undefined;
    onSearch?: ((...args: any[]) => any) | undefined;
    onDropdownScroll?: ((...args: any[]) => any) | undefined;
    onDropdownReachBottom?: ((...args: any[]) => any) | undefined;
} & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "options" | "filterOption" | "showExtraOptions" | "disabled" | "size" | "error" | "defaultInputValue" | "defaultValue" | "allowClear" | "multiple" | "loading" | "bordered" | "allowCreate" | "allowSearch" | "maxTagCount" | "popupVisible" | "unmountOnClose" | "defaultActiveFirstOption" | "fallbackOption">, {}> & {
    Option: import("vue").DefineComponent<{
        value: (StringConstructor | NumberConstructor)[];
        label: StringConstructor;
        disabled: BooleanConstructor;
        tagProps: {
            type: import("vue").PropType<Partial<{
                size: "small" | "mini" | "medium" | "large";
                defaultChecked: boolean;
                loading: boolean;
                visible: boolean;
                defaultVisible: boolean;
                closable: boolean;
                checkable: boolean;
                checked: boolean;
            }> & Omit<Readonly<{
                color?: unknown;
                size?: unknown;
                visible?: unknown;
                defaultVisible?: unknown;
                loading?: unknown;
                closable?: unknown;
                checkable?: unknown;
                checked?: unknown;
                defaultChecked?: unknown;
                onClose?: unknown;
                onCheck?: unknown;
            } & {
                size: "small" | "mini" | "medium" | "large";
                defaultChecked: boolean;
                loading: boolean;
                defaultVisible: boolean;
                closable: boolean;
                checkable: boolean;
            } & {
                onClose?: import("../_utils/types").EmitType<(event: MouseEvent) => void> | undefined;
                onCheck?: import("../_utils/types").EmitType<(checked: boolean, event: MouseEvent) => void> | undefined;
                color?: string | undefined;
                visible?: boolean | undefined;
                checked?: boolean | undefined;
            }> & {
                "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
                "onUpdate:checked"?: ((...args: any[]) => any) | undefined;
                onClose?: ((...args: any[]) => any) | undefined;
                onCheck?: ((...args: any[]) => any) | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "size" | "defaultChecked" | "loading" | "visible" | "defaultVisible" | "closable" | "checkable" | "checked">>;
        };
        extra: {
            type: ObjectConstructor;
        };
    }, void, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        value?: unknown;
        label?: unknown;
        disabled?: unknown;
        tagProps?: unknown;
        extra?: unknown;
    } & {
        disabled: boolean;
    } & {
        label?: string | undefined;
        value?: string | number | undefined;
        tagProps?: (Partial<{
            size: "small" | "mini" | "medium" | "large";
            defaultChecked: boolean;
            loading: boolean;
            visible: boolean;
            defaultVisible: boolean;
            closable: boolean;
            checkable: boolean;
            checked: boolean;
        }> & Omit<Readonly<{
            color?: unknown;
            size?: unknown;
            visible?: unknown;
            defaultVisible?: unknown;
            loading?: unknown;
            closable?: unknown;
            checkable?: unknown;
            checked?: unknown;
            defaultChecked?: unknown;
            onClose?: unknown;
            onCheck?: unknown;
        } & {
            size: "small" | "mini" | "medium" | "large";
            defaultChecked: boolean;
            loading: boolean;
            defaultVisible: boolean;
            closable: boolean;
            checkable: boolean;
        } & {
            onClose?: import("../_utils/types").EmitType<(event: MouseEvent) => void> | undefined;
            onCheck?: import("../_utils/types").EmitType<(checked: boolean, event: MouseEvent) => void> | undefined;
            color?: string | undefined;
            visible?: boolean | undefined;
            checked?: boolean | undefined;
        }> & {
            "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
            "onUpdate:checked"?: ((...args: any[]) => any) | undefined;
            onClose?: ((...args: any[]) => any) | undefined;
            onCheck?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "size" | "defaultChecked" | "loading" | "visible" | "defaultVisible" | "closable" | "checkable" | "checked">) | undefined;
        extra?: Record<string, any> | undefined;
    }>, {
        disabled: boolean;
    }>;
    OptGroup: import("vue").DefineComponent<{
        label: {
            type: StringConstructor;
        };
    }, void, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        label?: unknown;
    } & {} & {
        label?: string | undefined;
    }>, {}>;
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type SelectInstance = CreateComponentPublicInstance<SelectProps>;
export declare type SelectOptionInstance = InstanceType<typeof _Option>;
export declare type SelectOptGroupInstance = InstanceType<typeof _Optgroup>;
export { _Option as Option, _Optgroup as Optgroup };
export default Select;
