import { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    value: (StringConstructor | NumberConstructor)[];
    label: StringConstructor;
    disabled: BooleanConstructor;
    tagProps: {
        type: PropType<Partial<{
            size: "small" | "mini" | "medium" | "large";
            defaultChecked: boolean;
            loading: boolean;
            visible: boolean;
            defaultVisible: boolean;
            closable: boolean;
            checkable: boolean;
            checked: boolean;
        }> & Omit<Readonly<{
            color?: unknown;
            size?: unknown;
            visible?: unknown;
            defaultVisible?: unknown;
            loading?: unknown;
            closable?: unknown;
            checkable?: unknown;
            checked?: unknown;
            defaultChecked?: unknown;
            onClose?: unknown;
            onCheck?: unknown;
        } & {
            size: "small" | "mini" | "medium" | "large";
            defaultChecked: boolean;
            loading: boolean;
            defaultVisible: boolean;
            closable: boolean;
            checkable: boolean;
        } & {
            onClose?: import("../_utils/types").EmitType<(event: MouseEvent) => void> | undefined;
            onCheck?: import("../_utils/types").EmitType<(checked: boolean, event: MouseEvent) => void> | undefined;
            color?: string | undefined;
            visible?: boolean | undefined;
            checked?: boolean | undefined;
        }> & {
            "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
            "onUpdate:checked"?: ((...args: any[]) => any) | undefined;
            onClose?: ((...args: any[]) => any) | undefined;
            onCheck?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "size" | "defaultChecked" | "loading" | "visible" | "defaultVisible" | "closable" | "checkable" | "checked">>;
    };
    extra: {
        type: ObjectConstructor;
    };
}, void, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    value?: unknown;
    label?: unknown;
    disabled?: unknown;
    tagProps?: unknown;
    extra?: unknown;
} & {
    disabled: boolean;
} & {
    label?: string | undefined;
    value?: string | number | undefined;
    tagProps?: (Partial<{
        size: "small" | "mini" | "medium" | "large";
        defaultChecked: boolean;
        loading: boolean;
        visible: boolean;
        defaultVisible: boolean;
        closable: boolean;
        checkable: boolean;
        checked: boolean;
    }> & Omit<Readonly<{
        color?: unknown;
        size?: unknown;
        visible?: unknown;
        defaultVisible?: unknown;
        loading?: unknown;
        closable?: unknown;
        checkable?: unknown;
        checked?: unknown;
        defaultChecked?: unknown;
        onClose?: unknown;
        onCheck?: unknown;
    } & {
        size: "small" | "mini" | "medium" | "large";
        defaultChecked: boolean;
        loading: boolean;
        defaultVisible: boolean;
        closable: boolean;
        checkable: boolean;
    } & {
        onClose?: import("../_utils/types").EmitType<(event: MouseEvent) => void> | undefined;
        onCheck?: import("../_utils/types").EmitType<(checked: boolean, event: MouseEvent) => void> | undefined;
        color?: string | undefined;
        visible?: boolean | undefined;
        checked?: boolean | undefined;
    }> & {
        "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
        "onUpdate:checked"?: ((...args: any[]) => any) | undefined;
        onClose?: ((...args: any[]) => any) | undefined;
        onCheck?: ((...args: any[]) => any) | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "size" | "defaultChecked" | "loading" | "visible" | "defaultVisible" | "closable" | "checkable" | "checked">) | undefined;
    extra?: Record<string, any> | undefined;
}>, {
    disabled: boolean;
}>;
export default _default;
