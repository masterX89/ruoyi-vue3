import type { PropType } from 'vue';
import { Data, EmitType } from '../_utils/types';
import { Option, OptionData, OptionInfo } from './interface';
import { VirtualListProps } from '../_components/virtual-list/interface';
declare const _default: import("vue").DefineComponent<{
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        type: PropType<string | number | (string | number)[]>;
    };
    defaultValue: {
        type: PropType<string | number | (string | number)[]>;
        default: (props: Data) => never[] | "";
    };
    inputValue: {
        type: StringConstructor;
    };
    defaultInputValue: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: PropType<"small" | "mini" | "medium" | "large">;
        default: () => "small" | "mini" | "medium" | "large";
    };
    placeholder: StringConstructor;
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: boolean;
    };
    allowClear: {
        type: BooleanConstructor;
        default: boolean;
    };
    allowSearch: {
        type: PropType<boolean | {
            retainInputValue?: boolean | undefined;
        }>;
        default: (props: Data) => boolean;
    };
    allowCreate: {
        type: BooleanConstructor;
        default: boolean;
    };
    maxTagCount: {
        type: NumberConstructor;
        default: number;
    };
    popupContainer: {
        type: PropType<string | HTMLElement>;
    };
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    defaultActiveFirstOption: {
        type: BooleanConstructor;
        default: boolean;
    };
    popupVisible: {
        type: BooleanConstructor;
        default: undefined;
    };
    unmountOnClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    filterOption: {
        type: PropType<boolean | ((inputValue: string, optionInfo: OptionInfo) => boolean)>;
        default: boolean;
    };
    options: {
        type: PropType<Option[]>;
        default: () => never[];
    };
    virtualListProps: {
        type: PropType<VirtualListProps>;
    };
    triggerProps: {
        type: PropType<Partial<{
            disabled: boolean;
            animationName: string;
            position: "br" | "rt" | "tr" | "left" | "right" | "bottom" | "top" | "tl" | "bl" | "lt" | "lb" | "rb";
            popupVisible: boolean;
            defaultPopupVisible: boolean;
            trigger: "focus" | "click" | "hover" | "contextMenu" | ("focus" | "click" | "hover" | "contextMenu")[];
            popupOffset: number;
            showArrow: boolean;
            alignPoint: boolean;
            popupHoverStay: boolean;
            blurToClose: boolean;
            clickToClose: boolean;
            clickOutsideToClose: boolean;
            unmountOnClose: boolean;
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            focusDelay: number;
            autoFitPopupWidth: boolean;
            autoFitPopupMinWidth: boolean;
            autoFixPosition: boolean;
            updateAtScroll: boolean;
            autoFitTransformOrigin: boolean;
            hideEmpty: boolean;
            autoFitPosition: boolean;
            renderToBody: boolean;
            preventFocus: boolean;
        }> & Omit<Readonly<{
            popupVisible?: unknown;
            defaultPopupVisible?: unknown;
            trigger?: unknown;
            position?: unknown;
            disabled?: unknown;
            popupOffset?: unknown;
            popupTranslate?: unknown;
            showArrow?: unknown;
            alignPoint?: unknown;
            popupHoverStay?: unknown;
            blurToClose?: unknown;
            clickToClose?: unknown;
            clickOutsideToClose?: unknown;
            unmountOnClose?: unknown;
            contentClass?: unknown;
            contentStyle?: unknown;
            arrowClass?: unknown;
            arrowStyle?: unknown;
            popupStyle?: unknown;
            animationName?: unknown;
            duration?: unknown;
            mouseEnterDelay?: unknown;
            mouseLeaveDelay?: unknown;
            focusDelay?: unknown;
            autoFitPopupWidth?: unknown;
            autoFitPopupMinWidth?: unknown;
            autoFixPosition?: unknown;
            popupContainer?: unknown;
            updateAtScroll?: unknown;
            autoFitTransformOrigin?: unknown;
            hideEmpty?: unknown;
            openedCls?: unknown;
            autoFitPosition?: unknown;
            renderToBody?: unknown;
            preventFocus?: unknown;
            onPopupVisibleChange?: unknown;
        } & {
            disabled: boolean;
            animationName: string;
            position: "br" | "rt" | "tr" | "left" | "right" | "bottom" | "top" | "tl" | "bl" | "lt" | "lb" | "rb";
            defaultPopupVisible: boolean;
            trigger: "focus" | "click" | "hover" | "contextMenu" | ("focus" | "click" | "hover" | "contextMenu")[];
            popupOffset: number;
            showArrow: boolean;
            alignPoint: boolean;
            popupHoverStay: boolean;
            blurToClose: boolean;
            clickToClose: boolean;
            clickOutsideToClose: boolean;
            unmountOnClose: boolean;
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            focusDelay: number;
            autoFitPopupWidth: boolean;
            autoFitPopupMinWidth: boolean;
            autoFixPosition: boolean;
            updateAtScroll: boolean;
            autoFitTransformOrigin: boolean;
            hideEmpty: boolean;
            autoFitPosition: boolean;
            renderToBody: boolean;
            preventFocus: boolean;
        } & {
            popupContainer?: string | HTMLElement | undefined;
            onPopupVisibleChange?: EmitType<(popupVisible: boolean) => void> | undefined;
            popupVisible?: boolean | undefined;
            popupTranslate?: import("../trigger/utils").PopupTranslate | undefined;
            contentClass?: import("../_utils/types").ClassName | undefined;
            contentStyle?: import("vue").CSSProperties | undefined;
            arrowClass?: import("../_utils/types").ClassName | undefined;
            arrowStyle?: import("vue").CSSProperties | undefined;
            popupStyle?: import("vue").CSSProperties | undefined;
            duration?: import("../_utils/types").AnimationDuration | undefined;
            openedCls?: string | undefined;
        }> & {
            "onUpdate:popupVisible"?: ((...args: any[]) => any) | undefined;
            onPopupVisibleChange?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "animationName" | "position" | "popupVisible" | "defaultPopupVisible" | "trigger" | "popupOffset" | "showArrow" | "alignPoint" | "popupHoverStay" | "blurToClose" | "clickToClose" | "clickOutsideToClose" | "unmountOnClose" | "mouseEnterDelay" | "mouseLeaveDelay" | "focusDelay" | "autoFitPopupWidth" | "autoFitPopupMinWidth" | "autoFixPosition" | "updateAtScroll" | "autoFitTransformOrigin" | "hideEmpty" | "autoFitPosition" | "renderToBody" | "preventFocus">>;
    };
    formatLabel: {
        type: PropType<(data: OptionInfo) => string>;
    };
    fallbackOption: {
        type: PropType<boolean | ((value: string | number) => OptionData)>;
        default: boolean;
    };
    showExtraOptions: {
        type: BooleanConstructor;
        default: boolean;
    };
    onChange: {
        type: PropType<EmitType<(value: string | number | Array<string | number>) => void>>;
    };
    onInputValueChange: {
        type: PropType<EmitType<(inputValue: string) => void>>;
    };
    onPopupVisibleChange: {
        type: PropType<EmitType<(popupVisible: boolean) => void>>;
    };
    onClear: {
        type: PropType<EmitType<() => void>>;
    };
    onRemove: {
        type: PropType<EmitType<(removed: string) => void>>;
    };
    onSearch: {
        type: PropType<EmitType<(inputValue: string) => void>>;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:inputValue" | "inputValueChange" | "change" | "clear" | "update:modelValue" | "remove" | "update:popupVisible" | "popupVisibleChange" | "search" | "dropdownScroll" | "dropdownReachBottom")[], "update:inputValue" | "inputValueChange" | "change" | "clear" | "update:modelValue" | "remove" | "update:popupVisible" | "popupVisibleChange" | "search" | "dropdownScroll" | "dropdownReachBottom", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    multiple?: unknown;
    modelValue?: unknown;
    defaultValue?: unknown;
    inputValue?: unknown;
    defaultInputValue?: unknown;
    size?: unknown;
    placeholder?: unknown;
    loading?: unknown;
    disabled?: unknown;
    error?: unknown;
    allowClear?: unknown;
    allowSearch?: unknown;
    allowCreate?: unknown;
    maxTagCount?: unknown;
    popupContainer?: unknown;
    bordered?: unknown;
    defaultActiveFirstOption?: unknown;
    popupVisible?: unknown;
    unmountOnClose?: unknown;
    filterOption?: unknown;
    options?: unknown;
    virtualListProps?: unknown;
    triggerProps?: unknown;
    formatLabel?: unknown;
    fallbackOption?: unknown;
    showExtraOptions?: unknown;
    onChange?: unknown;
    onInputValueChange?: unknown;
    onPopupVisibleChange?: unknown;
    onClear?: unknown;
    onRemove?: unknown;
    onSearch?: unknown;
} & {
    options: Option[];
    filterOption: boolean | ((inputValue: string, optionInfo: OptionInfo) => boolean);
    showExtraOptions: boolean;
    disabled: boolean;
    size: "small" | "mini" | "medium" | "large";
    error: boolean;
    defaultInputValue: string;
    defaultValue: string | number | (string | number)[];
    allowClear: boolean;
    multiple: boolean;
    loading: boolean;
    bordered: boolean;
    allowCreate: boolean;
    allowSearch: boolean | {
        retainInputValue?: boolean | undefined;
    };
    maxTagCount: number;
    unmountOnClose: boolean;
    defaultActiveFirstOption: boolean;
    fallbackOption: boolean | ((value: string | number) => OptionData);
} & {
    inputValue?: string | undefined;
    onInputValueChange?: EmitType<(inputValue: string) => void> | undefined;
    modelValue?: string | number | (string | number)[] | undefined;
    formatLabel?: ((data: OptionInfo) => string) | undefined;
    placeholder?: string | undefined;
    onChange?: EmitType<(value: string | number | Array<string | number>) => void> | undefined;
    onClear?: EmitType<() => void> | undefined;
    onRemove?: EmitType<(removed: string) => void> | undefined;
    popupContainer?: string | HTMLElement | undefined;
    onPopupVisibleChange?: EmitType<(popupVisible: boolean) => void> | undefined;
    popupVisible?: boolean | undefined;
    virtualListProps?: VirtualListProps | undefined;
    onSearch?: EmitType<(inputValue: string) => void> | undefined;
    triggerProps?: (Partial<{
        disabled: boolean;
        animationName: string;
        position: "br" | "rt" | "tr" | "left" | "right" | "bottom" | "top" | "tl" | "bl" | "lt" | "lb" | "rb";
        popupVisible: boolean;
        defaultPopupVisible: boolean;
        trigger: "focus" | "click" | "hover" | "contextMenu" | ("focus" | "click" | "hover" | "contextMenu")[];
        popupOffset: number;
        showArrow: boolean;
        alignPoint: boolean;
        popupHoverStay: boolean;
        blurToClose: boolean;
        clickToClose: boolean;
        clickOutsideToClose: boolean;
        unmountOnClose: boolean;
        mouseEnterDelay: number;
        mouseLeaveDelay: number;
        focusDelay: number;
        autoFitPopupWidth: boolean;
        autoFitPopupMinWidth: boolean;
        autoFixPosition: boolean;
        updateAtScroll: boolean;
        autoFitTransformOrigin: boolean;
        hideEmpty: boolean;
        autoFitPosition: boolean;
        renderToBody: boolean;
        preventFocus: boolean;
    }> & Omit<Readonly<{
        popupVisible?: unknown;
        defaultPopupVisible?: unknown;
        trigger?: unknown;
        position?: unknown;
        disabled?: unknown;
        popupOffset?: unknown;
        popupTranslate?: unknown;
        showArrow?: unknown;
        alignPoint?: unknown;
        popupHoverStay?: unknown;
        blurToClose?: unknown;
        clickToClose?: unknown;
        clickOutsideToClose?: unknown;
        unmountOnClose?: unknown;
        contentClass?: unknown;
        contentStyle?: unknown;
        arrowClass?: unknown;
        arrowStyle?: unknown;
        popupStyle?: unknown;
        animationName?: unknown;
        duration?: unknown;
        mouseEnterDelay?: unknown;
        mouseLeaveDelay?: unknown;
        focusDelay?: unknown;
        autoFitPopupWidth?: unknown;
        autoFitPopupMinWidth?: unknown;
        autoFixPosition?: unknown;
        popupContainer?: unknown;
        updateAtScroll?: unknown;
        autoFitTransformOrigin?: unknown;
        hideEmpty?: unknown;
        openedCls?: unknown;
        autoFitPosition?: unknown;
        renderToBody?: unknown;
        preventFocus?: unknown;
        onPopupVisibleChange?: unknown;
    } & {
        disabled: boolean;
        animationName: string;
        position: "br" | "rt" | "tr" | "left" | "right" | "bottom" | "top" | "tl" | "bl" | "lt" | "lb" | "rb";
        defaultPopupVisible: boolean;
        trigger: "focus" | "click" | "hover" | "contextMenu" | ("focus" | "click" | "hover" | "contextMenu")[];
        popupOffset: number;
        showArrow: boolean;
        alignPoint: boolean;
        popupHoverStay: boolean;
        blurToClose: boolean;
        clickToClose: boolean;
        clickOutsideToClose: boolean;
        unmountOnClose: boolean;
        mouseEnterDelay: number;
        mouseLeaveDelay: number;
        focusDelay: number;
        autoFitPopupWidth: boolean;
        autoFitPopupMinWidth: boolean;
        autoFixPosition: boolean;
        updateAtScroll: boolean;
        autoFitTransformOrigin: boolean;
        hideEmpty: boolean;
        autoFitPosition: boolean;
        renderToBody: boolean;
        preventFocus: boolean;
    } & {
        popupContainer?: string | HTMLElement | undefined;
        onPopupVisibleChange?: EmitType<(popupVisible: boolean) => void> | undefined;
        popupVisible?: boolean | undefined;
        popupTranslate?: import("../trigger/utils").PopupTranslate | undefined;
        contentClass?: import("../_utils/types").ClassName | undefined;
        contentStyle?: import("vue").CSSProperties | undefined;
        arrowClass?: import("../_utils/types").ClassName | undefined;
        arrowStyle?: import("vue").CSSProperties | undefined;
        popupStyle?: import("vue").CSSProperties | undefined;
        duration?: import("../_utils/types").AnimationDuration | undefined;
        openedCls?: string | undefined;
    }> & {
        "onUpdate:popupVisible"?: ((...args: any[]) => any) | undefined;
        onPopupVisibleChange?: ((...args: any[]) => any) | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "animationName" | "position" | "popupVisible" | "defaultPopupVisible" | "trigger" | "popupOffset" | "showArrow" | "alignPoint" | "popupHoverStay" | "blurToClose" | "clickToClose" | "clickOutsideToClose" | "unmountOnClose" | "mouseEnterDelay" | "mouseLeaveDelay" | "focusDelay" | "autoFitPopupWidth" | "autoFitPopupMinWidth" | "autoFixPosition" | "updateAtScroll" | "autoFitTransformOrigin" | "hideEmpty" | "autoFitPosition" | "renderToBody" | "preventFocus">) | undefined;
}> & {
    "onUpdate:inputValue"?: ((...args: any[]) => any) | undefined;
    onInputValueChange?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
    onClear?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onRemove?: ((...args: any[]) => any) | undefined;
    "onUpdate:popupVisible"?: ((...args: any[]) => any) | undefined;
    onPopupVisibleChange?: ((...args: any[]) => any) | undefined;
    onSearch?: ((...args: any[]) => any) | undefined;
    onDropdownScroll?: ((...args: any[]) => any) | undefined;
    onDropdownReachBottom?: ((...args: any[]) => any) | undefined;
}, {
    options: Option[];
    filterOption: boolean | ((inputValue: string, optionInfo: OptionInfo) => boolean);
    showExtraOptions: boolean;
    disabled: boolean;
    size: "small" | "mini" | "medium" | "large";
    error: boolean;
    defaultInputValue: string;
    defaultValue: string | number | (string | number)[];
    allowClear: boolean;
    multiple: boolean;
    loading: boolean;
    bordered: boolean;
    allowCreate: boolean;
    allowSearch: boolean | {
        retainInputValue?: boolean | undefined;
    };
    maxTagCount: number;
    popupVisible: boolean;
    unmountOnClose: boolean;
    defaultActiveFirstOption: boolean;
    fallbackOption: boolean | ((value: string | number) => OptionData);
}>;
export default _default;
