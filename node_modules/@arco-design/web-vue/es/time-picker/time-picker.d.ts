import { PropType } from 'vue';
import { Dayjs } from 'dayjs';
import { EmitType } from '../_utils/types';
declare const _default: import("vue").DefineComponent<{
    type: {
        type: PropType<"time" | "time-range">;
        default: string;
    };
    modelValue: {
        type: PropType<string | number | Date | (string | number | Date)[]>;
    };
    defaultValue: {
        type: PropType<string | number | Date | (string | number | Date)[]>;
    };
    disabled: {
        type: BooleanConstructor;
    };
    allowClear: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
    };
    error: {
        type: BooleanConstructor;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
    };
    size: {
        type: PropType<"small" | "mini" | "medium" | "large">;
        default: () => "small" | "mini" | "medium" | "large";
    };
    popupContainer: {
        type: PropType<string | HTMLElement>;
    };
    use12Hours: {
        type: BooleanConstructor;
    };
    step: {
        type: PropType<{
            hour?: number | undefined;
            minute?: number | undefined;
            second?: number | undefined;
        }>;
    };
    disabledHours: {
        type: PropType<() => number[]>;
    };
    disabledMinutes: {
        type: PropType<(selectedHour?: number | undefined) => number[]>;
    };
    disabledSeconds: {
        type: PropType<(selectedHour?: number | undefined, selectedMinute?: number | undefined) => number[]>;
    };
    hideDisabledOptions: {
        type: BooleanConstructor;
    };
    disableConfirm: {
        type: BooleanConstructor;
    };
    position: {
        type: PropType<"br" | "tr" | "bottom" | "top" | "tl" | "bl">;
        default: string;
    };
    popupVisible: {
        type: BooleanConstructor;
        default: undefined;
    };
    defaultPopupVisible: {
        type: BooleanConstructor;
        default: boolean;
    };
    triggerProps: {
        type: PropType<Record<string, unknown>>;
    };
    unmountOnClose: {
        type: BooleanConstructor;
    };
    onChange: {
        type: PropType<EmitType<(timeString: string | Array<string | undefined> | undefined, time: Date | Array<Date | undefined> | undefined) => void>>;
    };
    onSelect: {
        type: PropType<EmitType<(timeString: string | Array<string | undefined>, time: Date | Array<Date | undefined>) => void>>;
    };
    onClear: {
        type: PropType<EmitType<() => void>>;
    };
    onPopupVisibleChange: {
        type: PropType<EmitType<(popupVisible: boolean) => void>>;
    };
}, {
    refInput: import("vue").Ref<any>;
    isRange: import("vue").ComputedRef<boolean>;
    prefixCls: string;
    panelVisible: import("vue").ComputedRef<boolean>;
    focusedInputIndex: import("vue").Ref<number>;
    computedPlaceholder: import("vue").ComputedRef<string | string[]>;
    panelValue: import("vue").Ref<Dayjs | (Dayjs | undefined)[] | undefined>;
    inputValue: import("vue").Ref<string | (string | undefined)[] | undefined>;
    computedFormat: import("vue").ComputedRef<string>;
    computedUse12Hours: import("vue").ComputedRef<boolean>;
    inputProps: import("vue").ComputedRef<{
        focusedIndex: number;
        onFocusedIndexChange: (index: number) => void;
        onChange: (e: any) => void;
        onPressEnter: () => void;
    } | {
        onChange: (e: any) => void;
        onPressEnter: () => void;
        focusedIndex?: undefined;
        onFocusedIndexChange?: undefined;
    }>;
    panelProps: import("vue").ComputedRef<{
        displayIndex: number;
        onDisplayIndexChange: (index: number) => void;
    } | {
        displayIndex?: undefined;
        onDisplayIndexChange?: undefined;
    }>;
    onPanelVisibleChange: any;
    onInputClear: () => void;
    onPanelSelect: (value: Dayjs | Array<Dayjs | undefined>) => void;
    onPanelConfirm: (value: Dayjs | Dayjs[]) => void;
    onPanelClick: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "clear" | "update:modelValue" | "select" | "update:popupVisible" | "popup-visible-change")[], "select" | "change" | "clear" | "update:modelValue" | "update:popupVisible" | "popup-visible-change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    type?: unknown;
    modelValue?: unknown;
    defaultValue?: unknown;
    disabled?: unknown;
    allowClear?: unknown;
    readonly?: unknown;
    error?: unknown;
    format?: unknown;
    placeholder?: unknown;
    size?: unknown;
    popupContainer?: unknown;
    use12Hours?: unknown;
    step?: unknown;
    disabledHours?: unknown;
    disabledMinutes?: unknown;
    disabledSeconds?: unknown;
    hideDisabledOptions?: unknown;
    disableConfirm?: unknown;
    position?: unknown;
    popupVisible?: unknown;
    defaultPopupVisible?: unknown;
    triggerProps?: unknown;
    unmountOnClose?: unknown;
    onChange?: unknown;
    onSelect?: unknown;
    onClear?: unknown;
    onPopupVisibleChange?: unknown;
} & {
    disabled: boolean;
    size: "small" | "mini" | "medium" | "large";
    error: boolean;
    readonly: boolean;
    allowClear: boolean;
    format: string;
    position: "br" | "tr" | "bottom" | "top" | "tl" | "bl";
    type: "time" | "time-range";
    defaultPopupVisible: boolean;
    unmountOnClose: boolean;
    disableConfirm: boolean;
    use12Hours: boolean;
    hideDisabledOptions: boolean;
} & {
    modelValue?: string | number | Date | (string | number | Date)[] | undefined;
    placeholder?: string | undefined;
    defaultValue?: string | number | Date | (string | number | Date)[] | undefined;
    onChange?: EmitType<(timeString: string | Array<string | undefined> | undefined, time: Date | Array<Date | undefined> | undefined) => void> | undefined;
    onSelect?: EmitType<(timeString: string | Array<string | undefined>, time: Date | Array<Date | undefined>) => void> | undefined;
    onClear?: EmitType<() => void> | undefined;
    popupContainer?: string | HTMLElement | undefined;
    onPopupVisibleChange?: EmitType<(popupVisible: boolean) => void> | undefined;
    popupVisible?: boolean | undefined;
    step?: {
        hour?: number | undefined;
        minute?: number | undefined;
        second?: number | undefined;
    } | undefined;
    triggerProps?: Record<string, unknown> | undefined;
    disabledHours?: (() => number[]) | undefined;
    disabledMinutes?: ((selectedHour?: number | undefined) => number[]) | undefined;
    disabledSeconds?: ((selectedHour?: number | undefined, selectedMinute?: number | undefined) => number[]) | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    onSelect?: ((...args: any[]) => any) | undefined;
    onClear?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:popupVisible"?: ((...args: any[]) => any) | undefined;
    "onPopup-visible-change"?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    size: "small" | "mini" | "medium" | "large";
    error: boolean;
    readonly: boolean;
    allowClear: boolean;
    format: string;
    position: "br" | "tr" | "bottom" | "top" | "tl" | "bl";
    type: "time" | "time-range";
    popupVisible: boolean;
    defaultPopupVisible: boolean;
    unmountOnClose: boolean;
    disableConfirm: boolean;
    use12Hours: boolean;
    hideDisabledOptions: boolean;
}>;
export default _default;
