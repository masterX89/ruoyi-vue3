import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _GridRow from './grid-row';
import _GridCol from './grid-col';
import _GridItem from './grid-item';
declare const Grid: import("vue").FunctionalComponent<import("./interface").BaseGridProps, {}> & {
    Row: import("vue").DefineComponent<{
        gutter: {
            type: import("vue").PropType<number | Partial<Record<"xxl" | "xl" | "lg" | "md" | "sm" | "xs", number>> | import("./interface").GridRowGutter[]>;
            default: number;
        };
        justify: {
            type: StringConstructor;
            validator: (value: string) => boolean;
            default: string;
        };
        align: {
            type: StringConstructor;
            validator: (value: string) => boolean;
            default: string;
        };
        div: {
            type: BooleanConstructor;
        };
        wrap: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, {
        classNames: import("vue").ComputedRef<{
            [x: string]: string | boolean;
        }>;
        styles: import("vue").ComputedRef<{
            marginTop?: string | undefined;
            marginBottom?: string | undefined;
            marginLeft?: string | undefined;
            marginRight?: string | undefined;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        gutter?: unknown;
        justify?: unknown;
        align?: unknown;
        div?: unknown;
        wrap?: unknown;
    } & {
        div: boolean;
        wrap: boolean;
        justify: string;
        gutter: number | Partial<Record<"xxl" | "xl" | "lg" | "md" | "sm" | "xs", number>> | import("./interface").GridRowGutter[];
        align: string;
    } & {}>, {
        div: boolean;
        wrap: boolean;
        justify: string;
        gutter: number | Partial<Record<"xxl" | "xl" | "lg" | "md" | "sm" | "xs", number>> | import("./interface").GridRowGutter[];
        align: string;
    }>;
    Col: import("vue").DefineComponent<{
        span: {
            type: NumberConstructor;
            default: number;
        };
        offset: {
            type: NumberConstructor;
        };
        order: {
            type: NumberConstructor;
        };
        xs: {
            type: import("vue").PropType<number | {
                [key: string]: any;
            }>;
        };
        sm: {
            type: import("vue").PropType<number | {
                [key: string]: any;
            }>;
        };
        md: {
            type: import("vue").PropType<number | {
                [key: string]: any;
            }>;
        };
        lg: {
            type: import("vue").PropType<number | {
                [key: string]: any;
            }>;
        };
        xl: {
            type: import("vue").PropType<number | {
                [key: string]: any;
            }>;
        };
        xxl: {
            type: import("vue").PropType<number | {
                [key: string]: any;
            }>;
        };
        flex: {
            type: import("vue").PropType<string | number>;
        };
    }, {
        classNames: import("vue").ComputedRef<string | {
            [x: string]: number | boolean | undefined;
        }>;
        styles: import("vue").ComputedRef<{
            flex?: import("./interface").FlexType | undefined;
            paddingLeft?: string | undefined;
            paddingRight?: string | undefined;
            paddingTop?: string | undefined;
            paddingBottom?: string | undefined;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        span?: unknown;
        offset?: unknown;
        order?: unknown;
        xs?: unknown;
        sm?: unknown;
        md?: unknown;
        lg?: unknown;
        xl?: unknown;
        xxl?: unknown;
        flex?: unknown;
    } & {
        span: number;
    } & {
        flex?: string | number | undefined;
        offset?: number | undefined;
        order?: number | undefined;
        xxl?: number | {
            [key: string]: any;
        } | undefined;
        xl?: number | {
            [key: string]: any;
        } | undefined;
        lg?: number | {
            [key: string]: any;
        } | undefined;
        md?: number | {
            [key: string]: any;
        } | undefined;
        sm?: number | {
            [key: string]: any;
        } | undefined;
        xs?: number | {
            [key: string]: any;
        } | undefined;
    }>, {
        span: number;
    }>;
    Item: import("vue").DefineComponent<{
        span: NumberConstructor;
        offset: NumberConstructor;
        suffix: BooleanConstructor;
    }, unknown, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        span?: unknown;
        offset?: unknown;
        suffix?: unknown;
    } & {
        suffix: boolean;
    } & {
        span?: number | undefined;
        offset?: number | undefined;
    }>, {
        suffix: boolean;
    }>;
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export { _GridRow as Row, _GridCol as Col, _GridItem as GridItem };
export default Grid;
