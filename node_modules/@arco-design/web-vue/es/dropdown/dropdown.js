import { defineComponent, reactive, createVNode, mergeProps } from "vue";
import { getPrefixCls } from "../_utils/global-config.js";
import Trigger from "../trigger/index.js";
import DropdownPanel from "../_components/dropdown/dropdown-panel.js";
import DropDownOption from "../_components/dropdown/dropdown-option.js";
import DropDownOptGroup from "../_components/dropdown/dropdown-optgroup.js";
import { travelDropDownChildren, isGroup, isSubmenu } from "./utils.js";
import { useTrigger } from "../_hooks/use-trigger.js";
import IconRight from "../icon/icon-right/index.js";
var _Dropdown = defineComponent({
  name: "Dropdown",
  props: {
    popupVisible: {
      type: Boolean,
      default: void 0
    },
    defaultPopupVisible: {
      type: Boolean,
      default: false
    },
    trigger: {
      type: String,
      default: "click"
    },
    position: {
      type: String,
      default: "bottom"
    },
    popupContainer: {
      type: [String, Object]
    }
  },
  emits: [
    "update:popupVisible",
    "popupVisibleChange",
    "select"
  ],
  setup(props, {
    emit,
    slots
  }) {
    const prefixCls = getPrefixCls("dropdown");
    const {
      _popupVisible,
      computedPopupVisible,
      handlePopupVisibleChange
    } = useTrigger(props, {
      emit
    });
    const handleClickOption = (value) => {
      emit("select", value);
      handlePopupVisibleChange(false);
    };
    const path = reactive([]);
    const handleSubmenuChange = (visible, value, level) => {
      if (visible) {
        path[level - 1] = value;
      } else {
        path.splice(level - 1);
      }
    };
    const renderOption = (item, level = 1) => {
      var _a, _b, _c;
      if (isGroup(item)) {
        return createVNode(DropDownOptGroup, mergeProps(item._props, {
          "label": item.title
        }), {
          label: (_a = item._slots) == null ? void 0 : _a.title,
          default: () => item.options.map((item2) => renderOption(item2, level))
        });
      }
      if (isSubmenu(item)) {
        return createVNode(Trigger, {
          "disabled": item.disabled,
          "trigger": (_b = item.trigger) != null ? _b : "click",
          "position": (_c = item.position) != null ? _c : "rt",
          "popupOffset": 4,
          "popupVisible": path.includes(item.value),
          "onPopupVisibleChange": (visible) => handleSubmenuChange(visible, item.value, level)
        }, {
          default: () => [createVNode(DropDownOption, mergeProps(item._props, {
            "value": item.value,
            "disabled": item.disabled,
            "isActive": path.includes(item.value)
          }), {
            default: item.render,
            suffix: () => createVNode(IconRight, null, null)
          })],
          content: () => {
            var _a2;
            return createVNode(DropdownPanel, {
              "class": `${prefixCls}-submenu`,
              "isEmpty": ((_a2 = item.children) == null ? void 0 : _a2.length) === 0
            }, {
              empty: slots.empty,
              footer: item.footer,
              default: () => {
                var _a3;
                return (_a3 = item.children) == null ? void 0 : _a3.map((item2) => renderOption(item2, level + 1));
              }
            });
          }
        });
      }
      return createVNode(DropDownOption, mergeProps(item._props, {
        "value": item.value,
        "disabled": item.disabled,
        "onClick": handleClickOption
      }), item._slots);
    };
    return () => {
      var _a, _b;
      const options = travelDropDownChildren((_b = (_a = slots.content) == null ? void 0 : _a.call(slots)) != null ? _b : []);
      return createVNode(Trigger, {
        "popupVisible": computedPopupVisible.value,
        "animationName": "slide-dynamic-origin",
        "autoFitTransformOrigin": true,
        "trigger": props.trigger,
        "position": props.position,
        "popupOffset": 4,
        "popupContainer": props.popupContainer,
        "onPopupVisibleChange": handlePopupVisibleChange
      }, {
        default: () => {
          var _a2;
          return [(_a2 = slots.default) == null ? void 0 : _a2.call(slots)];
        },
        content: () => createVNode(DropdownPanel, {
          "isEmpty": options.length === 0
        }, {
          default: () => [options.map((item) => renderOption(item))],
          empty: slots.empty,
          footer: slots.footer
        })
      });
    };
  }
});
export { _Dropdown as default };
