import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _Dropdown from './dropdown';
import _DropdownOption from './dropdown-option';
import _DropdownGroup from './dropdown-group';
import _DropdownSubmenu from './dropdown-submenu';
declare const Dropdown: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            position: "br" | "tr" | "bottom" | "top" | "tl" | "bl";
            popupVisible: boolean;
            defaultPopupVisible: boolean;
            trigger: "focus" | "click" | "hover" | "contextMenu";
        }> & Omit<Readonly<{
            popupVisible?: unknown;
            defaultPopupVisible?: unknown;
            trigger?: unknown;
            position?: unknown;
            popupContainer?: unknown;
        } & {
            position: "br" | "tr" | "bottom" | "top" | "tl" | "bl";
            defaultPopupVisible: boolean;
            trigger: "focus" | "click" | "hover" | "contextMenu";
        } & {
            popupContainer?: string | HTMLElement | null | undefined;
            popupVisible?: boolean | undefined;
        }> & {
            onSelect?: ((...args: any[]) => any) | undefined;
            "onUpdate:popupVisible"?: ((...args: any[]) => any) | undefined;
            onPopupVisibleChange?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "position" | "popupVisible" | "defaultPopupVisible" | "trigger">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "select" | "update:popupVisible" | "popupVisibleChange", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            popupVisible?: unknown;
            defaultPopupVisible?: unknown;
            trigger?: unknown;
            position?: unknown;
            popupContainer?: unknown;
        } & {
            position: "br" | "tr" | "bottom" | "top" | "tl" | "bl";
            defaultPopupVisible: boolean;
            trigger: "focus" | "click" | "hover" | "contextMenu";
        } & {
            popupContainer?: string | HTMLElement | null | undefined;
            popupVisible?: boolean | undefined;
        }> & {
            onSelect?: ((...args: any[]) => any) | undefined;
            "onUpdate:popupVisible"?: ((...args: any[]) => any) | undefined;
            onPopupVisibleChange?: ((...args: any[]) => any) | undefined;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("select" | "update:popupVisible" | "popupVisibleChange")[], string, {
            position: "br" | "tr" | "bottom" | "top" | "tl" | "bl";
            popupVisible: boolean;
            defaultPopupVisible: boolean;
            trigger: "focus" | "click" | "hover" | "contextMenu";
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        popupVisible?: unknown;
        defaultPopupVisible?: unknown;
        trigger?: unknown;
        position?: unknown;
        popupContainer?: unknown;
    } & {
        position: "br" | "tr" | "bottom" | "top" | "tl" | "bl";
        defaultPopupVisible: boolean;
        trigger: "focus" | "click" | "hover" | "contextMenu";
    } & {
        popupContainer?: string | HTMLElement | null | undefined;
        popupVisible?: boolean | undefined;
    }> & {
        onSelect?: ((...args: any[]) => any) | undefined;
        "onUpdate:popupVisible"?: ((...args: any[]) => any) | undefined;
        onPopupVisibleChange?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    popupVisible?: unknown;
    defaultPopupVisible?: unknown;
    trigger?: unknown;
    position?: unknown;
    popupContainer?: unknown;
} & {
    position: "br" | "tr" | "bottom" | "top" | "tl" | "bl";
    defaultPopupVisible: boolean;
    trigger: "focus" | "click" | "hover" | "contextMenu";
} & {
    popupContainer?: string | HTMLElement | null | undefined;
    popupVisible?: boolean | undefined;
}> & {
    onSelect?: ((...args: any[]) => any) | undefined;
    "onUpdate:popupVisible"?: ((...args: any[]) => any) | undefined;
    onPopupVisibleChange?: ((...args: any[]) => any) | undefined;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("select" | "update:popupVisible" | "popupVisibleChange")[], "select" | "update:popupVisible" | "popupVisibleChange", {
    position: "br" | "tr" | "bottom" | "top" | "tl" | "bl";
    popupVisible: boolean;
    defaultPopupVisible: boolean;
    trigger: "focus" | "click" | "hover" | "contextMenu";
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    Option: import("vue").DefineComponent<{
        value: {
            type: (StringConstructor | NumberConstructor)[];
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, void, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        value?: unknown;
        disabled?: unknown;
    } & {
        disabled: boolean;
    } & {
        value?: string | number | undefined;
    }>, {
        disabled: boolean;
    }>;
    Group: import("vue").DefineComponent<{
        title: StringConstructor;
    }, void, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        title?: unknown;
    } & {} & {
        title?: string | undefined;
    }>, {}>;
    Submenu: import("vue").DefineComponent<{
        value: {
            type: (StringConstructor | NumberConstructor)[];
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        trigger: {
            type: StringConstructor;
            default: string;
        };
        position: {
            type: StringConstructor;
            default: string;
        };
    }, void, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        value?: unknown;
        disabled?: unknown;
        trigger?: unknown;
        position?: unknown;
    } & {
        disabled: boolean;
        position: string;
        trigger: string;
    } & {
        value?: string | number | undefined;
    }>, {
        disabled: boolean;
        position: string;
        trigger: string;
    }>;
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type DropdownInstance = InstanceType<typeof _Dropdown>;
export declare type DropdownOptionInstance = InstanceType<typeof _DropdownOption>;
export declare type DropdownGroupInstance = InstanceType<typeof _DropdownGroup>;
export declare type DropdownSubmenuInstance = InstanceType<typeof _DropdownSubmenu>;
export { _DropdownOption as Doption, _DropdownGroup as Dgroup, _DropdownSubmenu as Dsubmenu, };
export default Dropdown;
