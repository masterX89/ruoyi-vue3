import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _Descriptions from './descriptions';
declare const Descriptions: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            size: "small" | "mini" | "medium" | "large";
            data: import("./descriptions").DescData[];
            bordered: boolean;
            column: number;
            layout: "horizontal" | "vertical" | "inline-horizontal" | "inline-vertical";
            align: "center" | "left" | "right" | {
                label?: "center" | "left" | "right" | undefined;
                value?: "center" | "left" | "right" | undefined;
            };
        }> & Omit<Readonly<{
            data?: unknown;
            column?: unknown;
            title?: unknown;
            layout?: unknown;
            align?: unknown;
            size?: unknown;
            bordered?: unknown;
            labelStyle?: unknown;
            valueStyle?: unknown;
        } & {
            size: "small" | "mini" | "medium" | "large";
            data: import("./descriptions").DescData[];
            bordered: boolean;
            column: number;
            layout: "horizontal" | "vertical" | "inline-horizontal" | "inline-vertical";
            align: "center" | "left" | "right" | {
                label?: "center" | "left" | "right" | undefined;
                value?: "center" | "left" | "right" | undefined;
            };
        } & {
            title?: string | undefined;
            labelStyle?: import("vue").CSSProperties | undefined;
            valueStyle?: import("vue").CSSProperties | undefined;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "size" | "data" | "bordered" | "column" | "layout" | "align">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            data?: unknown;
            column?: unknown;
            title?: unknown;
            layout?: unknown;
            align?: unknown;
            size?: unknown;
            bordered?: unknown;
            labelStyle?: unknown;
            valueStyle?: unknown;
        } & {
            size: "small" | "mini" | "medium" | "large";
            data: import("./descriptions").DescData[];
            bordered: boolean;
            column: number;
            layout: "horizontal" | "vertical" | "inline-horizontal" | "inline-vertical";
            align: "center" | "left" | "right" | {
                label?: "center" | "left" | "right" | undefined;
                value?: "center" | "left" | "right" | undefined;
            };
        } & {
            title?: string | undefined;
            labelStyle?: import("vue").CSSProperties | undefined;
            valueStyle?: import("vue").CSSProperties | undefined;
        }>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            size: "small" | "mini" | "medium" | "large";
            data: import("./descriptions").DescData[];
            bordered: boolean;
            column: number;
            layout: "horizontal" | "vertical" | "inline-horizontal" | "inline-vertical";
            align: "center" | "left" | "right" | {
                label?: "center" | "left" | "right" | undefined;
                value?: "center" | "left" | "right" | undefined;
            };
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        data?: unknown;
        column?: unknown;
        title?: unknown;
        layout?: unknown;
        align?: unknown;
        size?: unknown;
        bordered?: unknown;
        labelStyle?: unknown;
        valueStyle?: unknown;
    } & {
        size: "small" | "mini" | "medium" | "large";
        data: import("./descriptions").DescData[];
        bordered: boolean;
        column: number;
        layout: "horizontal" | "vertical" | "inline-horizontal" | "inline-vertical";
        align: "center" | "left" | "right" | {
            label?: "center" | "left" | "right" | undefined;
            value?: "center" | "left" | "right" | undefined;
        };
    } & {
        title?: string | undefined;
        labelStyle?: import("vue").CSSProperties | undefined;
        valueStyle?: import("vue").CSSProperties | undefined;
    }> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    data?: unknown;
    column?: unknown;
    title?: unknown;
    layout?: unknown;
    align?: unknown;
    size?: unknown;
    bordered?: unknown;
    labelStyle?: unknown;
    valueStyle?: unknown;
} & {
    size: "small" | "mini" | "medium" | "large";
    data: import("./descriptions").DescData[];
    bordered: boolean;
    column: number;
    layout: "horizontal" | "vertical" | "inline-horizontal" | "inline-vertical";
    align: "center" | "left" | "right" | {
        label?: "center" | "left" | "right" | undefined;
        value?: "center" | "left" | "right" | undefined;
    };
} & {
    title?: string | undefined;
    labelStyle?: import("vue").CSSProperties | undefined;
    valueStyle?: import("vue").CSSProperties | undefined;
}>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    size: "small" | "mini" | "medium" | "large";
    data: import("./descriptions").DescData[];
    bordered: boolean;
    column: number;
    layout: "horizontal" | "vertical" | "inline-horizontal" | "inline-vertical";
    align: "center" | "left" | "right" | {
        label?: "center" | "left" | "right" | undefined;
        value?: "center" | "left" | "right" | undefined;
    };
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type DescriptionsInstance = InstanceType<typeof _Descriptions>;
export default Descriptions;
