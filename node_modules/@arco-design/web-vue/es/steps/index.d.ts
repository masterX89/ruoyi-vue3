import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _Steps from './steps';
import _StepsStep from './step';
declare const Steps: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            small: boolean;
            direction: "horizontal" | "vertical";
            type: "default" | "dot" | "arrow" | "navigation";
            lineLess: boolean;
            status: "error" | "wait" | "finish" | "process";
            current: number;
            defaultCurrent: number;
            labelPlacement: "horizontal" | "vertical";
            changeable: boolean;
        }> & Omit<Readonly<{
            type?: unknown;
            direction?: unknown;
            labelPlacement?: unknown;
            current?: unknown;
            defaultCurrent?: unknown;
            status?: unknown;
            lineLess?: unknown;
            small?: unknown;
            changeable?: unknown;
        } & {
            small: boolean;
            direction: "horizontal" | "vertical";
            type: "default" | "dot" | "arrow" | "navigation";
            lineLess: boolean;
            status: "error" | "wait" | "finish" | "process";
            defaultCurrent: number;
            labelPlacement: "horizontal" | "vertical";
            changeable: boolean;
        } & {
            current?: number | undefined;
        }> & {
            onChange?: ((...args: any[]) => any) | undefined;
            "onUpdate:current"?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "small" | "direction" | "type" | "lineLess" | "status" | "current" | "defaultCurrent" | "labelPlacement" | "changeable">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "change" | "update:current", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            type?: unknown;
            direction?: unknown;
            labelPlacement?: unknown;
            current?: unknown;
            defaultCurrent?: unknown;
            status?: unknown;
            lineLess?: unknown;
            small?: unknown;
            changeable?: unknown;
        } & {
            small: boolean;
            direction: "horizontal" | "vertical";
            type: "default" | "dot" | "arrow" | "navigation";
            lineLess: boolean;
            status: "error" | "wait" | "finish" | "process";
            defaultCurrent: number;
            labelPlacement: "horizontal" | "vertical";
            changeable: boolean;
        } & {
            current?: number | undefined;
        }> & {
            onChange?: ((...args: any[]) => any) | undefined;
            "onUpdate:current"?: ((...args: any[]) => any) | undefined;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:current")[], string, {
            small: boolean;
            direction: "horizontal" | "vertical";
            type: "default" | "dot" | "arrow" | "navigation";
            lineLess: boolean;
            status: "error" | "wait" | "finish" | "process";
            current: number;
            defaultCurrent: number;
            labelPlacement: "horizontal" | "vertical";
            changeable: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        type?: unknown;
        direction?: unknown;
        labelPlacement?: unknown;
        current?: unknown;
        defaultCurrent?: unknown;
        status?: unknown;
        lineLess?: unknown;
        small?: unknown;
        changeable?: unknown;
    } & {
        small: boolean;
        direction: "horizontal" | "vertical";
        type: "default" | "dot" | "arrow" | "navigation";
        lineLess: boolean;
        status: "error" | "wait" | "finish" | "process";
        defaultCurrent: number;
        labelPlacement: "horizontal" | "vertical";
        changeable: boolean;
    } & {
        current?: number | undefined;
    }> & {
        onChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:current"?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    type?: unknown;
    direction?: unknown;
    labelPlacement?: unknown;
    current?: unknown;
    defaultCurrent?: unknown;
    status?: unknown;
    lineLess?: unknown;
    small?: unknown;
    changeable?: unknown;
} & {
    small: boolean;
    direction: "horizontal" | "vertical";
    type: "default" | "dot" | "arrow" | "navigation";
    lineLess: boolean;
    status: "error" | "wait" | "finish" | "process";
    defaultCurrent: number;
    labelPlacement: "horizontal" | "vertical";
    changeable: boolean;
} & {
    current?: number | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:current"?: ((...args: any[]) => any) | undefined;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:current")[], "change" | "update:current", {
    small: boolean;
    direction: "horizontal" | "vertical";
    type: "default" | "dot" | "arrow" | "navigation";
    lineLess: boolean;
    status: "error" | "wait" | "finish" | "process";
    current: number;
    defaultCurrent: number;
    labelPlacement: "horizontal" | "vertical";
    changeable: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    Step: import("vue").DefineComponent<{
        title: StringConstructor;
        description: StringConstructor;
        status: {
            type: import("vue").PropType<"error" | "wait" | "finish" | "process">;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        step: {
            type: NumberConstructor;
            default: number;
        };
        current: {
            type: NumberConstructor;
            default: number;
        };
        type: {
            type: import("vue").PropType<"default" | "dot" | "arrow" | "navigation">;
            default: string;
        };
        direction: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: string;
        };
        labelPlacement: {
            type: import("vue").PropType<"horizontal" | "vertical">;
            default: string;
        };
        lineLess: {
            type: BooleanConstructor;
            default: boolean;
        };
        nextStepError: {
            type: BooleanConstructor;
            default: boolean;
        };
        onClick: {
            type: import("vue").PropType<import("../_utils/types").EmitType<(step: number, ev: Event) => void>>;
        };
    }, {
        prefixCls: string;
        iconCls: string;
        cls: import("vue").ComputedRef<(string | {
            [x: string]: boolean;
        })[]>;
        showTail: import("vue").ComputedRef<boolean>;
        handleClick: (ev: Event) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        title?: unknown;
        description?: unknown;
        status?: unknown;
        disabled?: unknown;
        step?: unknown;
        current?: unknown;
        type?: unknown;
        direction?: unknown;
        labelPlacement?: unknown;
        lineLess?: unknown;
        nextStepError?: unknown;
        onClick?: unknown;
    } & {
        disabled: boolean;
        direction: "horizontal" | "vertical";
        type: "default" | "dot" | "arrow" | "navigation";
        lineLess: boolean;
        step: number;
        current: number;
        labelPlacement: "horizontal" | "vertical";
        nextStepError: boolean;
    } & {
        title?: string | undefined;
        onClick?: import("../_utils/types").EmitType<(step: number, ev: Event) => void> | undefined;
        description?: string | undefined;
        status?: "error" | "wait" | "finish" | "process" | undefined;
    }> & {
        onClick?: ((...args: any[]) => any) | undefined;
    }, {
        disabled: boolean;
        direction: "horizontal" | "vertical";
        type: "default" | "dot" | "arrow" | "navigation";
        lineLess: boolean;
        step: number;
        current: number;
        labelPlacement: "horizontal" | "vertical";
        nextStepError: boolean;
    }>;
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type StepsInstance = InstanceType<typeof _Steps>;
export declare type StepsStepInstance = InstanceType<typeof _StepsStep>;
export { _StepsStep as Step };
export default Steps;
