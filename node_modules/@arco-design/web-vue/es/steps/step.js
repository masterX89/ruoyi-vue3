import { defineComponent, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, createCommentVNode, renderSlot, createBlock, Fragment, createTextVNode, toDisplayString, createElementVNode } from "vue";
import { getPrefixCls } from "../_utils/global-config.js";
import IconCheck from "../icon/icon-check/index.js";
import IconClose from "../icon/icon-close/index.js";
import _export_sfc from "../_virtual/plugin-vue_export-helper";
const _sfc_main = defineComponent({
  name: "Step",
  components: {
    IconCheck,
    IconClose
  },
  props: {
    title: String,
    description: String,
    status: {
      type: String
    },
    disabled: {
      type: Boolean,
      default: false
    },
    step: {
      type: Number,
      default: 1
    },
    current: {
      type: Number,
      default: 1
    },
    type: {
      type: String,
      default: "default"
    },
    direction: {
      type: String,
      default: "horizontal"
    },
    labelPlacement: {
      type: String,
      default: "horizontal"
    },
    lineLess: {
      type: Boolean,
      default: false
    },
    nextStepError: {
      type: Boolean,
      default: false
    },
    onClick: {
      type: [Function, Array]
    }
  },
  emits: ["click"],
  setup(props, { emit }) {
    const prefixCls = getPrefixCls("steps-item");
    const iconCls = getPrefixCls("steps-icon");
    const showTail = computed(() => !props.lineLess && (props.labelPlacement === "vertical" || props.direction === "vertical"));
    const handleClick = (ev) => {
      if (!props.disabled) {
        emit("click", props.step, ev);
      }
    };
    const cls = computed(() => [
      prefixCls,
      `${prefixCls}-${props.status}`,
      {
        [`${prefixCls}-active`]: props.step === props.current,
        [`${prefixCls}-next-error`]: props.nextStepError,
        [`${prefixCls}-disabled`]: props.disabled
      }
    ]);
    return {
      prefixCls,
      iconCls,
      cls,
      showTail,
      handleClick
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_icon_check = resolveComponent("icon-check");
  const _component_icon_close = resolveComponent("icon-close");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.cls),
    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))
  }, [
    _ctx.showTail ? (openBlock(), createElementBlock("div", {
      key: 0,
      class: normalizeClass(`${_ctx.prefixCls}-tail`)
    }, null, 2)) : createCommentVNode("v-if", true),
    _ctx.type !== "arrow" ? (openBlock(), createElementBlock("div", {
      key: 1,
      class: normalizeClass(`${_ctx.prefixCls}-node`)
    }, [
      renderSlot(_ctx.$slots, "node", {
        step: _ctx.step,
        status: _ctx.status
      }, () => [
        _ctx.type !== "dot" ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(_ctx.iconCls)
        }, [
          renderSlot(_ctx.$slots, "icon", {
            step: _ctx.step,
            status: _ctx.status
          }, () => [
            _ctx.status === "finish" ? (openBlock(), createBlock(_component_icon_check, { key: 0 })) : _ctx.status === "error" ? (openBlock(), createBlock(_component_icon_close, { key: 1 })) : (openBlock(), createElementBlock(Fragment, { key: 2 }, [
              createTextVNode(toDisplayString(_ctx.step), 1)
            ], 2112))
          ])
        ], 2)) : createCommentVNode("v-if", true)
      ])
    ], 2)) : createCommentVNode("v-if", true),
    createElementVNode("div", {
      class: normalizeClass(`${_ctx.prefixCls}-content`)
    }, [
      createElementVNode("div", {
        class: normalizeClass(`${_ctx.prefixCls}-title`)
      }, [
        renderSlot(_ctx.$slots, "default", {}, () => [
          createTextVNode(toDisplayString(_ctx.title), 1)
        ])
      ], 2),
      _ctx.description || _ctx.$slots.description ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass(`${_ctx.prefixCls}-description`)
      }, [
        renderSlot(_ctx.$slots, "description", {}, () => [
          createTextVNode(toDisplayString(_ctx.description), 1)
        ])
      ], 2)) : createCommentVNode("v-if", true)
    ], 2)
  ], 2);
}
var Step = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { Step as default };
