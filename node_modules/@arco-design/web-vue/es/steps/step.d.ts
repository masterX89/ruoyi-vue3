import { PropType } from 'vue';
import { EmitType } from '../_utils/types';
declare const _default: import("vue").DefineComponent<{
    title: StringConstructor;
    description: StringConstructor;
    status: {
        type: PropType<"error" | "wait" | "finish" | "process">;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    step: {
        type: NumberConstructor;
        default: number;
    };
    current: {
        type: NumberConstructor;
        default: number;
    };
    type: {
        type: PropType<"default" | "dot" | "arrow" | "navigation">;
        default: string;
    };
    direction: {
        type: PropType<"horizontal" | "vertical">;
        default: string;
    };
    labelPlacement: {
        type: PropType<"horizontal" | "vertical">;
        default: string;
    };
    lineLess: {
        type: BooleanConstructor;
        default: boolean;
    };
    nextStepError: {
        type: BooleanConstructor;
        default: boolean;
    };
    onClick: {
        type: PropType<EmitType<(step: number, ev: Event) => void>>;
    };
}, {
    prefixCls: string;
    iconCls: string;
    cls: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    showTail: import("vue").ComputedRef<boolean>;
    handleClick: (ev: Event) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    title?: unknown;
    description?: unknown;
    status?: unknown;
    disabled?: unknown;
    step?: unknown;
    current?: unknown;
    type?: unknown;
    direction?: unknown;
    labelPlacement?: unknown;
    lineLess?: unknown;
    nextStepError?: unknown;
    onClick?: unknown;
} & {
    disabled: boolean;
    direction: "horizontal" | "vertical";
    type: "default" | "dot" | "arrow" | "navigation";
    lineLess: boolean;
    step: number;
    current: number;
    labelPlacement: "horizontal" | "vertical";
    nextStepError: boolean;
} & {
    title?: string | undefined;
    onClick?: EmitType<(step: number, ev: Event) => void> | undefined;
    description?: string | undefined;
    status?: "error" | "wait" | "finish" | "process" | undefined;
}> & {
    onClick?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    direction: "horizontal" | "vertical";
    type: "default" | "dot" | "arrow" | "navigation";
    lineLess: boolean;
    step: number;
    current: number;
    labelPlacement: "horizontal" | "vertical";
    nextStepError: boolean;
}>;
export default _default;
