import { defineComponent, ref, computed, mergeProps, createVNode } from "vue";
import { getPrefixCls } from "../_utils/global-config.js";
import { getChildrenComponents } from "../_utils/vue-utils.js";
var _Steps = defineComponent({
  name: "Steps",
  props: {
    type: {
      type: String,
      default: "default"
    },
    direction: {
      type: String,
      default: "horizontal"
    },
    labelPlacement: {
      type: String,
      default: "horizontal"
    },
    current: {
      type: Number,
      default: void 0
    },
    defaultCurrent: {
      type: Number,
      default: 1
    },
    status: {
      type: String,
      default: "process"
    },
    lineLess: {
      type: Boolean,
      default: false
    },
    small: {
      type: Boolean,
      default: false
    },
    changeable: {
      type: Boolean,
      default: false
    }
  },
  emits: [
    "update:current",
    "change"
  ],
  setup(props, {
    emit,
    slots
  }) {
    const prefixCls = getPrefixCls("steps");
    const _current = ref(props.defaultCurrent);
    const computedCurrent = computed(() => {
      var _a;
      return (_a = props.current) != null ? _a : _current.value;
    });
    const direction = computed(() => ["navigation", "arrow"].includes(props.type) ? "horizontal" : props.direction);
    const labelPlacement = computed(() => {
      if (props.type === "dot") {
        return direction.value === "vertical" ? "horizontal" : "vertical";
      }
      if (props.type === "navigation") {
        return "horizontal";
      }
      return props.labelPlacement;
    });
    const handleClick = (step, e) => {
      if (props.changeable) {
        _current.value = step;
        emit("update:current", step);
        emit("change", step, e);
      }
    };
    const getStatus = (step, current) => {
      if (step < current) {
        return "finish";
      }
      if (step > current) {
        return "wait";
      }
      return props.status;
    };
    const cls = computed(() => [prefixCls, `${prefixCls}-${direction.value}`, `${prefixCls}-label-${labelPlacement.value}`, `${prefixCls}-mode-${props.type}`, {
      [`${prefixCls}-changeable`]: props.changeable,
      [`${prefixCls}-size-small`]: props.small && props.type !== "dot",
      [`${prefixCls}-line-less`]: props.lineLess
    }]);
    return () => {
      var _a, _b;
      const children = getChildrenComponents((_b = (_a = slots.default) == null ? void 0 : _a.call(slots)) != null ? _b : [], "Step", (vn, index) => {
        var _a2, _b2;
        const step = index + 1;
        const status = getStatus(step, computedCurrent.value);
        return {
          step,
          current: computedCurrent.value,
          status: (_b2 = (_a2 = vn.props) == null ? void 0 : _a2.status) != null ? _b2 : status,
          direction: direction.value,
          labelPlacement: labelPlacement.value,
          lineLess: props.lineLess,
          type: props.type,
          onClick: handleClick
        };
      });
      children.forEach((vn, index) => {
        var _a2, _b2;
        const next = children[index + 1];
        if (next && ((_a2 = next.props) == null ? void 0 : _a2.status) === "error") {
          vn.props = mergeProps((_b2 = vn.props) != null ? _b2 : {}, {
            nextStepError: true
          });
        }
      });
      return createVNode("div", {
        "class": cls.value
      }, [children]);
    };
  }
});
export { _Steps as default };
