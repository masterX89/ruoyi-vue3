import type { PropType, CSSProperties } from 'vue';
import type { AnimationDuration, ClassName, EmitType } from '../_utils/types';
import { PopupTranslate } from './utils';
declare const _default: import("vue").DefineComponent<{
    popupVisible: {
        type: BooleanConstructor;
        default: undefined;
    };
    defaultPopupVisible: {
        type: BooleanConstructor;
        default: boolean;
    };
    trigger: {
        type: PropType<"focus" | "click" | "hover" | "contextMenu" | ("focus" | "click" | "hover" | "contextMenu")[]>;
        default: string;
        validator: (value: any) => boolean;
    };
    position: {
        type: PropType<"br" | "rt" | "tr" | "left" | "right" | "bottom" | "top" | "tl" | "bl" | "lt" | "lb" | "rb">;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    popupOffset: {
        type: NumberConstructor;
        default: number;
    };
    popupTranslate: {
        type: PropType<PopupTranslate>;
    };
    showArrow: {
        type: BooleanConstructor;
        default: boolean;
    };
    alignPoint: {
        type: BooleanConstructor;
        default: boolean;
    };
    popupHoverStay: {
        type: BooleanConstructor;
        default: boolean;
    };
    blurToClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    clickToClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    clickOutsideToClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    unmountOnClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    contentClass: {
        type: PropType<ClassName>;
    };
    contentStyle: {
        type: PropType<CSSProperties>;
    };
    arrowClass: {
        type: PropType<ClassName>;
    };
    arrowStyle: {
        type: PropType<CSSProperties>;
    };
    popupStyle: {
        type: PropType<CSSProperties>;
    };
    animationName: {
        type: StringConstructor;
        default: string;
    };
    duration: {
        type: PropType<AnimationDuration>;
    };
    mouseEnterDelay: {
        type: NumberConstructor;
        default: number;
    };
    mouseLeaveDelay: {
        type: NumberConstructor;
        default: number;
    };
    focusDelay: {
        type: NumberConstructor;
        default: number;
    };
    autoFitPopupWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoFitPopupMinWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoFixPosition: {
        type: BooleanConstructor;
        default: boolean;
    };
    popupContainer: {
        type: PropType<string | HTMLElement>;
    };
    updateAtScroll: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoFitTransformOrigin: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideEmpty: {
        type: BooleanConstructor;
        default: boolean;
    };
    openedCls: {
        type: StringConstructor;
    };
    autoFitPosition: {
        type: BooleanConstructor;
        default: boolean;
    };
    renderToBody: {
        type: BooleanConstructor;
        default: boolean;
    };
    preventFocus: {
        type: BooleanConstructor;
        default: boolean;
    };
    onPopupVisibleChange: {
        type: PropType<EmitType<(popupVisible: boolean) => void>>;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:popupVisible" | "popupVisibleChange")[], "update:popupVisible" | "popupVisibleChange", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    popupVisible?: unknown;
    defaultPopupVisible?: unknown;
    trigger?: unknown;
    position?: unknown;
    disabled?: unknown;
    popupOffset?: unknown;
    popupTranslate?: unknown;
    showArrow?: unknown;
    alignPoint?: unknown;
    popupHoverStay?: unknown;
    blurToClose?: unknown;
    clickToClose?: unknown;
    clickOutsideToClose?: unknown;
    unmountOnClose?: unknown;
    contentClass?: unknown;
    contentStyle?: unknown;
    arrowClass?: unknown;
    arrowStyle?: unknown;
    popupStyle?: unknown;
    animationName?: unknown;
    duration?: unknown;
    mouseEnterDelay?: unknown;
    mouseLeaveDelay?: unknown;
    focusDelay?: unknown;
    autoFitPopupWidth?: unknown;
    autoFitPopupMinWidth?: unknown;
    autoFixPosition?: unknown;
    popupContainer?: unknown;
    updateAtScroll?: unknown;
    autoFitTransformOrigin?: unknown;
    hideEmpty?: unknown;
    openedCls?: unknown;
    autoFitPosition?: unknown;
    renderToBody?: unknown;
    preventFocus?: unknown;
    onPopupVisibleChange?: unknown;
} & {
    disabled: boolean;
    animationName: string;
    position: "br" | "rt" | "tr" | "left" | "right" | "bottom" | "top" | "tl" | "bl" | "lt" | "lb" | "rb";
    defaultPopupVisible: boolean;
    trigger: "focus" | "click" | "hover" | "contextMenu" | ("focus" | "click" | "hover" | "contextMenu")[];
    popupOffset: number;
    showArrow: boolean;
    alignPoint: boolean;
    popupHoverStay: boolean;
    blurToClose: boolean;
    clickToClose: boolean;
    clickOutsideToClose: boolean;
    unmountOnClose: boolean;
    mouseEnterDelay: number;
    mouseLeaveDelay: number;
    focusDelay: number;
    autoFitPopupWidth: boolean;
    autoFitPopupMinWidth: boolean;
    autoFixPosition: boolean;
    updateAtScroll: boolean;
    autoFitTransformOrigin: boolean;
    hideEmpty: boolean;
    autoFitPosition: boolean;
    renderToBody: boolean;
    preventFocus: boolean;
} & {
    popupContainer?: string | HTMLElement | undefined;
    onPopupVisibleChange?: EmitType<(popupVisible: boolean) => void> | undefined;
    popupVisible?: boolean | undefined;
    popupTranslate?: PopupTranslate | undefined;
    contentClass?: ClassName | undefined;
    contentStyle?: CSSProperties | undefined;
    arrowClass?: ClassName | undefined;
    arrowStyle?: CSSProperties | undefined;
    popupStyle?: CSSProperties | undefined;
    duration?: AnimationDuration | undefined;
    openedCls?: string | undefined;
}> & {
    "onUpdate:popupVisible"?: ((...args: any[]) => any) | undefined;
    onPopupVisibleChange?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    animationName: string;
    position: "br" | "rt" | "tr" | "left" | "right" | "bottom" | "top" | "tl" | "bl" | "lt" | "lb" | "rb";
    popupVisible: boolean;
    defaultPopupVisible: boolean;
    trigger: "focus" | "click" | "hover" | "contextMenu" | ("focus" | "click" | "hover" | "contextMenu")[];
    popupOffset: number;
    showArrow: boolean;
    alignPoint: boolean;
    popupHoverStay: boolean;
    blurToClose: boolean;
    clickToClose: boolean;
    clickOutsideToClose: boolean;
    unmountOnClose: boolean;
    mouseEnterDelay: number;
    mouseLeaveDelay: number;
    focusDelay: number;
    autoFitPopupWidth: boolean;
    autoFitPopupMinWidth: boolean;
    autoFixPosition: boolean;
    updateAtScroll: boolean;
    autoFitTransformOrigin: boolean;
    hideEmpty: boolean;
    autoFitPosition: boolean;
    renderToBody: boolean;
    preventFocus: boolean;
}>;
export default _default;
