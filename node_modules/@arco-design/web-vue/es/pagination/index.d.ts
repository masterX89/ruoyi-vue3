import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _Pagination from './pagination';
declare const Pagination: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            disabled: boolean;
            size: "small" | "mini" | "medium" | "large";
            defaultCurrent: number;
            defaultPageSize: number;
            hideOnSinglePage: boolean;
            simple: boolean;
            showTotal: boolean;
            showMore: boolean;
            showJumper: boolean;
            showPageSize: boolean;
            pageSizeOptions: number[];
            baseSize: number;
            bufferSize: number;
        }> & Omit<Readonly<{
            total?: unknown;
            current?: unknown;
            defaultCurrent?: unknown;
            pageSize?: unknown;
            defaultPageSize?: unknown;
            disabled?: unknown;
            hideOnSinglePage?: unknown;
            simple?: unknown;
            showTotal?: unknown;
            showMore?: unknown;
            showJumper?: unknown;
            showPageSize?: unknown;
            pageSizeOptions?: unknown;
            pageSizeProps?: unknown;
            size?: unknown;
            pageItemStyle?: unknown;
            activePageItemStyle?: unknown;
            baseSize?: unknown;
            bufferSize?: unknown;
            onChange?: unknown;
            onPageSizeChange?: unknown;
        } & {
            disabled: boolean;
            size: "small" | "mini" | "medium" | "large";
            total: number;
            defaultCurrent: number;
            defaultPageSize: number;
            hideOnSinglePage: boolean;
            simple: boolean;
            showTotal: boolean;
            showMore: boolean;
            showJumper: boolean;
            showPageSize: boolean;
            pageSizeOptions: number[];
            baseSize: number;
            bufferSize: number;
        } & {
            onChange?: import("../_utils/types").EmitType<(value: number) => void> | undefined;
            current?: number | undefined;
            onPageSizeChange?: import("../_utils/types").EmitType<(value: number) => void> | undefined;
            pageSize?: number | undefined;
            pageSizeProps?: unknown;
            pageItemStyle?: import("vue").CSSProperties | undefined;
            activePageItemStyle?: import("vue").CSSProperties | undefined;
        }> & {
            onChange?: ((...args: any[]) => any) | undefined;
            "onUpdate:current"?: ((...args: any[]) => any) | undefined;
            onPageSizeChange?: ((...args: any[]) => any) | undefined;
            "onUpdate:pageSize"?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "size" | "defaultCurrent" | "defaultPageSize" | "hideOnSinglePage" | "simple" | "showTotal" | "showMore" | "showJumper" | "showPageSize" | "pageSizeOptions" | "baseSize" | "bufferSize">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "change" | "pageSizeChange" | "update:current" | "update:pageSize", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            total?: unknown;
            current?: unknown;
            defaultCurrent?: unknown;
            pageSize?: unknown;
            defaultPageSize?: unknown;
            disabled?: unknown;
            hideOnSinglePage?: unknown;
            simple?: unknown;
            showTotal?: unknown;
            showMore?: unknown;
            showJumper?: unknown;
            showPageSize?: unknown;
            pageSizeOptions?: unknown;
            pageSizeProps?: unknown;
            size?: unknown;
            pageItemStyle?: unknown;
            activePageItemStyle?: unknown;
            baseSize?: unknown;
            bufferSize?: unknown;
            onChange?: unknown;
            onPageSizeChange?: unknown;
        } & {
            disabled: boolean;
            size: "small" | "mini" | "medium" | "large";
            total: number;
            defaultCurrent: number;
            defaultPageSize: number;
            hideOnSinglePage: boolean;
            simple: boolean;
            showTotal: boolean;
            showMore: boolean;
            showJumper: boolean;
            showPageSize: boolean;
            pageSizeOptions: number[];
            baseSize: number;
            bufferSize: number;
        } & {
            onChange?: import("../_utils/types").EmitType<(value: number) => void> | undefined;
            current?: number | undefined;
            onPageSizeChange?: import("../_utils/types").EmitType<(value: number) => void> | undefined;
            pageSize?: number | undefined;
            pageSizeProps?: unknown;
            pageItemStyle?: import("vue").CSSProperties | undefined;
            activePageItemStyle?: import("vue").CSSProperties | undefined;
        }> & {
            onChange?: ((...args: any[]) => any) | undefined;
            "onUpdate:current"?: ((...args: any[]) => any) | undefined;
            onPageSizeChange?: ((...args: any[]) => any) | undefined;
            "onUpdate:pageSize"?: ((...args: any[]) => any) | undefined;
        }, () => JSX.Element | null, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "pageSizeChange" | "update:current" | "update:pageSize")[], string, {
            disabled: boolean;
            size: "small" | "mini" | "medium" | "large";
            defaultCurrent: number;
            defaultPageSize: number;
            hideOnSinglePage: boolean;
            simple: boolean;
            showTotal: boolean;
            showMore: boolean;
            showJumper: boolean;
            showPageSize: boolean;
            pageSizeOptions: number[];
            baseSize: number;
            bufferSize: number;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        total?: unknown;
        current?: unknown;
        defaultCurrent?: unknown;
        pageSize?: unknown;
        defaultPageSize?: unknown;
        disabled?: unknown;
        hideOnSinglePage?: unknown;
        simple?: unknown;
        showTotal?: unknown;
        showMore?: unknown;
        showJumper?: unknown;
        showPageSize?: unknown;
        pageSizeOptions?: unknown;
        pageSizeProps?: unknown;
        size?: unknown;
        pageItemStyle?: unknown;
        activePageItemStyle?: unknown;
        baseSize?: unknown;
        bufferSize?: unknown;
        onChange?: unknown;
        onPageSizeChange?: unknown;
    } & {
        disabled: boolean;
        size: "small" | "mini" | "medium" | "large";
        total: number;
        defaultCurrent: number;
        defaultPageSize: number;
        hideOnSinglePage: boolean;
        simple: boolean;
        showTotal: boolean;
        showMore: boolean;
        showJumper: boolean;
        showPageSize: boolean;
        pageSizeOptions: number[];
        baseSize: number;
        bufferSize: number;
    } & {
        onChange?: import("../_utils/types").EmitType<(value: number) => void> | undefined;
        current?: number | undefined;
        onPageSizeChange?: import("../_utils/types").EmitType<(value: number) => void> | undefined;
        pageSize?: number | undefined;
        pageSizeProps?: unknown;
        pageItemStyle?: import("vue").CSSProperties | undefined;
        activePageItemStyle?: import("vue").CSSProperties | undefined;
    }> & {
        onChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:current"?: ((...args: any[]) => any) | undefined;
        onPageSizeChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:pageSize"?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element | null> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    total?: unknown;
    current?: unknown;
    defaultCurrent?: unknown;
    pageSize?: unknown;
    defaultPageSize?: unknown;
    disabled?: unknown;
    hideOnSinglePage?: unknown;
    simple?: unknown;
    showTotal?: unknown;
    showMore?: unknown;
    showJumper?: unknown;
    showPageSize?: unknown;
    pageSizeOptions?: unknown;
    pageSizeProps?: unknown;
    size?: unknown;
    pageItemStyle?: unknown;
    activePageItemStyle?: unknown;
    baseSize?: unknown;
    bufferSize?: unknown;
    onChange?: unknown;
    onPageSizeChange?: unknown;
} & {
    disabled: boolean;
    size: "small" | "mini" | "medium" | "large";
    total: number;
    defaultCurrent: number;
    defaultPageSize: number;
    hideOnSinglePage: boolean;
    simple: boolean;
    showTotal: boolean;
    showMore: boolean;
    showJumper: boolean;
    showPageSize: boolean;
    pageSizeOptions: number[];
    baseSize: number;
    bufferSize: number;
} & {
    onChange?: import("../_utils/types").EmitType<(value: number) => void> | undefined;
    current?: number | undefined;
    onPageSizeChange?: import("../_utils/types").EmitType<(value: number) => void> | undefined;
    pageSize?: number | undefined;
    pageSizeProps?: unknown;
    pageItemStyle?: import("vue").CSSProperties | undefined;
    activePageItemStyle?: import("vue").CSSProperties | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:current"?: ((...args: any[]) => any) | undefined;
    onPageSizeChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:pageSize"?: ((...args: any[]) => any) | undefined;
}, () => JSX.Element | null, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "pageSizeChange" | "update:current" | "update:pageSize")[], "change" | "pageSizeChange" | "update:current" | "update:pageSize", {
    disabled: boolean;
    size: "small" | "mini" | "medium" | "large";
    defaultCurrent: number;
    defaultPageSize: number;
    hideOnSinglePage: boolean;
    simple: boolean;
    showTotal: boolean;
    showMore: boolean;
    showJumper: boolean;
    showPageSize: boolean;
    pageSizeOptions: number[];
    baseSize: number;
    bufferSize: number;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type PaginationInstance = InstanceType<typeof _Pagination>;
export declare type PaginationProps = PaginationInstance['$props'];
export default Pagination;
