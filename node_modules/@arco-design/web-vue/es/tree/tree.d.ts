import { PropType } from 'vue';
import { FieldNames, TreeNodeData, FilterTreeNode, DropPosition, TreeNodeKey } from './interface';
import { VirtualListProps, ScrollIntoViewOptions } from '../_components/virtual-list/interface';
declare const _default: import("vue").DefineComponent<{
    size: {
        type: PropType<"small" | "mini" | "medium" | "large">;
        default: string;
    };
    blockNode: {
        type: BooleanConstructor;
    };
    defaultExpandAll: {
        type: BooleanConstructor;
        default: boolean;
    };
    multiple: {
        type: BooleanConstructor;
    };
    checkable: {
        type: BooleanConstructor;
    };
    selectable: {
        type: BooleanConstructor;
        default: boolean;
    };
    checkStrictly: {
        type: BooleanConstructor;
    };
    checkedStrategy: {
        type: PropType<"all" | "child" | "parent">;
        default: string;
    };
    defaultSelectedKeys: {
        type: PropType<(string | number)[]>;
    };
    selectedKeys: {
        type: PropType<(string | number)[]>;
    };
    defaultCheckedKeys: {
        type: PropType<(string | number)[]>;
    };
    checkedKeys: {
        type: PropType<(string | number)[]>;
    };
    defaultExpandedKeys: {
        type: PropType<(string | number)[]>;
    };
    expandedKeys: {
        type: PropType<(string | number)[]>;
    };
    data: {
        type: PropType<TreeNodeData[]>;
        default: () => never[];
    };
    fieldNames: {
        type: PropType<FieldNames>;
    };
    showLine: {
        type: BooleanConstructor;
    };
    loadMore: {
        type: PropType<(node: TreeNodeData) => Promise<void>>;
    };
    draggable: {
        type: BooleanConstructor;
    };
    allowDrop: {
        type: PropType<(options: {
            dropNode: TreeNodeData;
            dropPosition: -1 | 0 | 1;
        }) => boolean>;
    };
    filterTreeNode: {
        type: PropType<FilterTreeNode>;
    };
    virtualListProps: {
        type: PropType<VirtualListProps>;
    };
    defaultExpandSelected: {
        type: BooleanConstructor;
    };
    defaultExpandChecked: {
        type: BooleanConstructor;
    };
    autoExpandParent: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    classNames: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    visibleTreeNodeList: import("vue").ComputedRef<import("./interface").Node[]>;
    treeContext: {
        switcherIcon: import("vue").Slot | undefined;
        loadingIcon: import("vue").Slot | undefined;
        dragIcon: import("vue").Slot | undefined;
        nodeTitle: import("vue").Slot | undefined;
        nodeExtra: import("vue").Slot | undefined;
        treeData: {
            key: TreeNodeKey;
            treeNodeProps: {
                selectable: boolean;
                disabled: boolean;
                disableCheckbox: boolean;
                checkable: boolean;
                draggable: boolean;
                isLeaf: boolean;
                isTail: boolean;
                blockNode: boolean;
                showLine: boolean;
                level: number;
                lineless: boolean[];
                title?: string | undefined;
                icon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>[]) | undefined;
                key?: string | number | undefined;
                switcherIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>[]) | undefined;
                loadingIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>[]) | undefined;
                dragIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>[]) | undefined;
            };
            treeNodeData: {
                key?: string | number | undefined;
                title?: string | undefined;
                selectable?: boolean | undefined;
                disabled?: boolean | undefined;
                disableCheckbox?: boolean | undefined;
                checkable?: boolean | undefined;
                draggable?: boolean | undefined;
                isLeaf?: boolean | undefined;
                icon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>[]) | undefined;
                switcherIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>[]) | undefined;
                loadingIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>[]) | undefined;
                dragIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>[]) | undefined;
                children?: any[] | undefined;
            };
            parent?: any | undefined;
            parentKey?: TreeNodeKey | undefined;
            pathParentKeys: TreeNodeKey[];
            children?: any[] | undefined;
            selectable: boolean;
            disabled: boolean;
            disableCheckbox: boolean;
            checkable: boolean;
            draggable: boolean;
            isLeaf: boolean;
            isTail: boolean;
            blockNode: boolean;
            showLine: boolean;
            level: number;
            lineless: boolean[];
            title?: string | undefined;
            icon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>[]) | undefined;
            switcherIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>[]) | undefined;
            loadingIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>[]) | undefined;
            dragIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>[]) | undefined;
        }[];
        flattenTreeData: import("./interface").Node[];
        key2TreeNode: import("./utils").Key2TreeNode;
        checkedKeys: TreeNodeKey[];
        indeterminateKeys: TreeNodeKey[];
        selectedKeys: TreeNodeKey[];
        expandedKeys: TreeNodeKey[];
        loadingKeys: TreeNodeKey[];
        currentExpandKeys: TreeNodeKey[];
        onLoadMore: ((key: TreeNodeKey) => Promise<void>) | undefined;
        onCheck: (checked: boolean, key: TreeNodeKey, e?: Event | undefined) => void;
        onSelect: (key: TreeNodeKey, e: Event) => void;
        onExpand: (expanded: boolean, key: TreeNodeKey, e?: Event | undefined) => void;
        onExpandEnd: (key: TreeNodeKey) => void;
        allowDrop: (key: TreeNodeKey, dropPosition: DropPosition) => boolean;
        onDragStart: (key: TreeNodeKey, e: DragEvent) => void;
        onDragEnd: (key: TreeNodeKey, e: DragEvent) => void;
        onDragOver: (key: TreeNodeKey, e: DragEvent) => void;
        onDragLeave: (key: TreeNodeKey, e: DragEvent) => void;
        onDrop: (key: TreeNodeKey, dropPosition: number, e: DragEvent) => void;
    };
    virtualListRef: import("vue").Ref<any>;
}, unknown, {}, {
    toggleCheck(key: TreeNodeKey, e: Event): void;
    scrollIntoView(options: ScrollIntoViewOptions): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("check" | "select" | "drop" | "expand" | "dragStart" | "dragOver" | "dragLeave" | "dragEnd" | "update:selectedKeys" | "update:checkedKeys" | "update:expandedKeys")[], "select" | "expand" | "check" | "drop" | "dragStart" | "dragOver" | "dragLeave" | "dragEnd" | "update:selectedKeys" | "update:checkedKeys" | "update:expandedKeys", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    size?: unknown;
    blockNode?: unknown;
    defaultExpandAll?: unknown;
    multiple?: unknown;
    checkable?: unknown;
    selectable?: unknown;
    checkStrictly?: unknown;
    checkedStrategy?: unknown;
    defaultSelectedKeys?: unknown;
    selectedKeys?: unknown;
    defaultCheckedKeys?: unknown;
    checkedKeys?: unknown;
    defaultExpandedKeys?: unknown;
    expandedKeys?: unknown;
    data?: unknown;
    fieldNames?: unknown;
    showLine?: unknown;
    loadMore?: unknown;
    draggable?: unknown;
    allowDrop?: unknown;
    filterTreeNode?: unknown;
    virtualListProps?: unknown;
    defaultExpandSelected?: unknown;
    defaultExpandChecked?: unknown;
    autoExpandParent?: unknown;
} & {
    size: "small" | "mini" | "medium" | "large";
    data: TreeNodeData[];
    multiple: boolean;
    checkable: boolean;
    checkStrictly: boolean;
    draggable: boolean;
    showLine: boolean;
    selectable: boolean;
    blockNode: boolean;
    defaultExpandAll: boolean;
    checkedStrategy: "all" | "child" | "parent";
    defaultExpandSelected: boolean;
    defaultExpandChecked: boolean;
    autoExpandParent: boolean;
} & {
    virtualListProps?: VirtualListProps | undefined;
    loadMore?: ((node: TreeNodeData) => Promise<void>) | undefined;
    checkedKeys?: (string | number)[] | undefined;
    selectedKeys?: (string | number)[] | undefined;
    expandedKeys?: (string | number)[] | undefined;
    allowDrop?: ((options: {
        dropNode: TreeNodeData;
        dropPosition: -1 | 0 | 1;
    }) => boolean) | undefined;
    defaultSelectedKeys?: (string | number)[] | undefined;
    defaultCheckedKeys?: (string | number)[] | undefined;
    defaultExpandedKeys?: (string | number)[] | undefined;
    fieldNames?: FieldNames | undefined;
    filterTreeNode?: FilterTreeNode | undefined;
}> & {
    onSelect?: ((...args: any[]) => any) | undefined;
    onDrop?: ((...args: any[]) => any) | undefined;
    onCheck?: ((...args: any[]) => any) | undefined;
    onExpand?: ((...args: any[]) => any) | undefined;
    onDragStart?: ((...args: any[]) => any) | undefined;
    onDragEnd?: ((...args: any[]) => any) | undefined;
    onDragOver?: ((...args: any[]) => any) | undefined;
    onDragLeave?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectedKeys"?: ((...args: any[]) => any) | undefined;
    "onUpdate:checkedKeys"?: ((...args: any[]) => any) | undefined;
    "onUpdate:expandedKeys"?: ((...args: any[]) => any) | undefined;
}, {
    size: "small" | "mini" | "medium" | "large";
    data: TreeNodeData[];
    multiple: boolean;
    checkable: boolean;
    checkStrictly: boolean;
    draggable: boolean;
    showLine: boolean;
    selectable: boolean;
    blockNode: boolean;
    defaultExpandAll: boolean;
    checkedStrategy: "all" | "child" | "parent";
    defaultExpandSelected: boolean;
    defaultExpandChecked: boolean;
    autoExpandParent: boolean;
}>;
export default _default;
