import { Slot, VNode } from 'vue';
import { VirtualListProps } from '../_components/virtual-list/interface';
export declare type TreeNodeKey = number | string;
export interface TreeNodeData {
    key?: string | number;
    title?: string;
    selectable?: boolean;
    disabled?: boolean;
    disableCheckbox?: boolean;
    checkable?: boolean;
    draggable?: boolean;
    isLeaf?: boolean;
    icon?: () => VNode[];
    switcherIcon?: () => VNode[];
    loadingIcon?: () => VNode[];
    dragIcon?: () => VNode[];
    children?: TreeNodeData[];
}
export interface TreeNodeProps extends Omit<TreeNodeData, 'children'> {
    selectable: boolean;
    disabled: boolean;
    disableCheckbox: boolean;
    checkable: boolean;
    draggable: boolean;
    isLeaf: boolean;
    isTail: boolean;
    blockNode: boolean;
    showLine: boolean;
    level: number;
    lineless: boolean[];
}
export interface Node extends TreeNodeProps {
    key: TreeNodeKey;
    treeNodeProps: TreeNodeProps;
    treeNodeData: TreeNodeData;
    parent?: Node;
    parentKey?: TreeNodeKey;
    pathParentKeys: TreeNodeKey[];
    children?: Node[];
}
export declare type FilterTreeNode = (node: TreeNodeData) => boolean;
export interface FieldNames {
    key?: string;
    title?: string;
    disabled?: string;
    children?: string;
    isLeaf?: string;
    disableCheckbox?: string;
    checkable?: string;
}
export declare type LoadMore = (node: TreeNodeData) => Promise<void>;
export declare type DropPosition = -1 | 0 | 1;
export interface TreeProps {
    size: 'mini' | 'small' | 'medium' | 'large';
    blockNode: boolean;
    defaultExpandAll: boolean;
    multiple: boolean;
    checkable: boolean;
    draggable: boolean;
    allowDrop?: (options: {
        dropNode: TreeNodeData;
        dropPosition: DropPosition;
    }) => boolean;
    selectable: boolean;
    checkStrictly: boolean;
    checkedStrategy: 'all' | 'parent' | 'child';
    defaultSelectedKeys?: TreeNodeKey[];
    selectedKeys?: TreeNodeKey[];
    defaultCheckedKeys?: TreeNodeKey[];
    checkedKeys?: TreeNodeKey[];
    defaultExpandedKeys?: TreeNodeKey[];
    expandedKeys?: TreeNodeKey[];
    data: TreeNodeData[];
    fieldNames?: FieldNames;
    virtualListProps?: VirtualListProps;
    showLine: boolean;
    loadMore?: LoadMore;
    defaultExpandSelected?: boolean;
    defaultExpandChecked?: boolean;
    autoExpandParent?: boolean;
    dragIcon?: Slot;
    switcherIcon?: Slot;
    loadingIcon?: Slot;
    extra?: Slot;
    title?: Slot;
    onSelect?: (selectedKeys: TreeNodeKey[], event: {
        selected: boolean;
        selectedNodes: TreeNodeData[];
        node: TreeNodeData;
        e: Event;
    }) => void;
    onCheck?: (checkedKeys: TreeNodeKey[], event: {
        checked: boolean;
        checkedNodes: TreeNodeData[];
        node: TreeNodeData;
        e: Event;
    }) => void;
    onExpand?: (expandedKeys: TreeNodeKey[], event: {
        expanded: boolean;
        expandedNodes: TreeNodeData[];
        node: TreeNodeData;
        e?: Event;
    }) => void;
    onDragStart?: (e: DragEvent, node: TreeNodeData) => void;
    onDragEnd?: (e: DragEvent, node: TreeNodeData) => void;
    onDragOver?: (e: DragEvent, node: TreeNodeData) => void;
    onDragLeave?: (e: DragEvent, node: TreeNodeData) => void;
    onDrop?: (event: {
        e: DragEvent;
        dragNode: TreeNodeData;
        dropNode: TreeNodeData;
        dropPosition: DropPosition;
    }) => void;
    filterTreeNode?: (node: TreeNodeData) => boolean;
}
