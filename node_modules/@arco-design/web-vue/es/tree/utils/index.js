function getFlattenTreeData(tree) {
  const flattenTreeData = [];
  function preOrder(tree2) {
    if (!tree2)
      return;
    tree2.forEach((node) => {
      flattenTreeData.push(node);
      preOrder(node.children);
    });
  }
  preOrder(tree);
  return flattenTreeData;
}
function getKey2TreeNode(flattenTreeData) {
  const key2TreeNode = {};
  flattenTreeData.forEach((node) => {
    key2TreeNode[node.key] = node;
  });
  return key2TreeNode;
}
function getChildrenKeys(node, filter) {
  const keys = [];
  if (node.children) {
    const filterMethod = (node2) => {
      return !filter || filter(node2);
    };
    node.children.forEach((child) => {
      var _a;
      if (filterMethod(child)) {
        keys.push(child.key);
        if ((_a = child == null ? void 0 : child.children) == null ? void 0 : _a.length) {
          const childKeys = getChildrenKeys(child, filter);
          keys.push(...childKeys);
        }
      }
    });
  }
  return keys;
}
function isNodeCheckable(node) {
  return node.checkable && !node.disabled && !node.disableCheckbox;
}
function getCheckedStateByCheck(options) {
  const {
    node,
    checked,
    checkedKeys,
    indeterminateKeys,
    checkStrictly = false
  } = options;
  const { key } = node;
  const checkedKeysSet = new Set(checkedKeys);
  const indeterminateKeysSet = new Set(indeterminateKeys);
  checked ? checkedKeysSet.add(key) : checkedKeysSet.delete(key);
  indeterminateKeysSet.delete(key);
  if (!checkStrictly) {
    updateChildrenCheckState({
      node,
      checked,
      checkedKeysSet,
      indeterminateKeysSet
    });
    updateParentCheckState({
      node,
      checkedKeysSet,
      indeterminateKeysSet
    });
  }
  return [[...checkedKeysSet], [...indeterminateKeysSet]];
}
function getCheckedStateByInitKeys(options) {
  const { initCheckedKeys, key2TreeNode, checkStrictly } = options;
  let checkedKeysSet = new Set();
  let indeterminateKeys = [];
  if (!checkStrictly) {
    initCheckedKeys.forEach((key) => {
      if (!checkedKeysSet.has(key)) {
        const node = key2TreeNode[key];
        const [newCheckedKeys, newIndeterminateKeys] = getCheckedStateByCheck({
          node,
          checkedKeys: [...checkedKeysSet],
          indeterminateKeys,
          checked: true,
          checkStrictly
        });
        checkedKeysSet = new Set(newCheckedKeys);
        indeterminateKeys = newIndeterminateKeys;
      }
    });
  } else {
    checkedKeysSet = new Set(initCheckedKeys);
  }
  return [[...checkedKeysSet], indeterminateKeys];
}
function updateChildrenCheckState(options) {
  const { node, checked, checkedKeysSet, indeterminateKeysSet } = options;
  const checkableChildKeys = getChildrenKeys(node, isNodeCheckable);
  if (checked) {
    checkableChildKeys.forEach((v) => {
      checkedKeysSet.add(v);
    });
  } else {
    checkableChildKeys.forEach((v) => {
      checkedKeysSet.delete(v);
    });
  }
  return [checkedKeysSet, indeterminateKeysSet];
}
function updateParentCheckState(options) {
  const { node, checkedKeysSet, indeterminateKeysSet } = options;
  let parentNode = node.parent;
  while (parentNode) {
    if (isNodeCheckable(parentNode)) {
      const { key: parentKey, children } = parentNode;
      const { checked, indeterminate } = getStateFromNodes({
        nodes: children || [],
        checkedKeysSet,
        indeterminateKeysSet
      });
      checked ? checkedKeysSet.add(parentKey) : checkedKeysSet.delete(parentKey);
      indeterminate ? indeterminateKeysSet.add(parentKey) : indeterminateKeysSet.delete(parentKey);
    }
    parentNode = parentNode.parent;
  }
  return [checkedKeysSet, indeterminateKeysSet];
}
function getStateFromNodes(options) {
  const { nodes, checkedKeysSet, indeterminateKeysSet } = options;
  let checkedCount = 0;
  let indeterminate = false;
  const checkableNodes = nodes.filter(isNodeCheckable);
  for (let i = 0; i < checkableNodes.length; i++) {
    const child = checkableNodes[i];
    const childChecked = checkedKeysSet.has(child.key);
    const childIndeterminate = indeterminateKeysSet.has(child.key);
    if (childChecked) {
      checkedCount++;
    }
    if (childIndeterminate || !childChecked && checkedCount > 0) {
      indeterminate = true;
      break;
    }
  }
  const checked = checkedCount === checkableNodes.length;
  return {
    checked,
    indeterminate: indeterminate || !checked && checkedCount > 0
  };
}
export { getCheckedStateByCheck, getCheckedStateByInitKeys, getChildrenKeys, getFlattenTreeData, getKey2TreeNode, isNodeCheckable };
