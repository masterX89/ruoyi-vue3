import { App } from 'vue';
import { ArcoOptions } from '../_utils/types';
import _Tree from './tree';
declare const Tree: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            size: "small" | "mini" | "medium" | "large";
            data: import("./interface").TreeNodeData[];
            multiple: boolean;
            checkable: boolean;
            checkStrictly: boolean;
            draggable: boolean;
            showLine: boolean;
            selectable: boolean;
            blockNode: boolean;
            defaultExpandAll: boolean;
            checkedStrategy: "all" | "child" | "parent";
            defaultExpandSelected: boolean;
            defaultExpandChecked: boolean;
            autoExpandParent: boolean;
        }> & Omit<Readonly<{
            size?: unknown;
            blockNode?: unknown;
            defaultExpandAll?: unknown;
            multiple?: unknown;
            checkable?: unknown;
            selectable?: unknown;
            checkStrictly?: unknown;
            checkedStrategy?: unknown;
            defaultSelectedKeys?: unknown;
            selectedKeys?: unknown;
            defaultCheckedKeys?: unknown;
            checkedKeys?: unknown;
            defaultExpandedKeys?: unknown;
            expandedKeys?: unknown;
            data?: unknown;
            fieldNames?: unknown;
            showLine?: unknown;
            loadMore?: unknown;
            draggable?: unknown;
            allowDrop?: unknown;
            filterTreeNode?: unknown;
            virtualListProps?: unknown;
            defaultExpandSelected?: unknown;
            defaultExpandChecked?: unknown;
            autoExpandParent?: unknown;
        } & {
            size: "small" | "mini" | "medium" | "large";
            data: import("./interface").TreeNodeData[];
            multiple: boolean;
            checkable: boolean;
            checkStrictly: boolean;
            draggable: boolean;
            showLine: boolean;
            selectable: boolean;
            blockNode: boolean;
            defaultExpandAll: boolean;
            checkedStrategy: "all" | "child" | "parent";
            defaultExpandSelected: boolean;
            defaultExpandChecked: boolean;
            autoExpandParent: boolean;
        } & {
            virtualListProps?: import("../_components/virtual-list/interface").VirtualListProps | undefined;
            loadMore?: ((node: import("./interface").TreeNodeData) => Promise<void>) | undefined;
            checkedKeys?: (string | number)[] | undefined;
            selectedKeys?: (string | number)[] | undefined;
            expandedKeys?: (string | number)[] | undefined;
            allowDrop?: ((options: {
                dropNode: import("./interface").TreeNodeData;
                dropPosition: 0 | 1 | -1;
            }) => boolean) | undefined;
            defaultSelectedKeys?: (string | number)[] | undefined;
            defaultCheckedKeys?: (string | number)[] | undefined;
            defaultExpandedKeys?: (string | number)[] | undefined;
            fieldNames?: import("./interface").FieldNames | undefined;
            filterTreeNode?: import("./interface").FilterTreeNode | undefined;
        }> & {
            onSelect?: ((...args: any[]) => any) | undefined;
            onDrop?: ((...args: any[]) => any) | undefined;
            onCheck?: ((...args: any[]) => any) | undefined;
            onExpand?: ((...args: any[]) => any) | undefined;
            onDragStart?: ((...args: any[]) => any) | undefined;
            onDragEnd?: ((...args: any[]) => any) | undefined;
            onDragOver?: ((...args: any[]) => any) | undefined;
            onDragLeave?: ((...args: any[]) => any) | undefined;
            "onUpdate:selectedKeys"?: ((...args: any[]) => any) | undefined;
            "onUpdate:checkedKeys"?: ((...args: any[]) => any) | undefined;
            "onUpdate:expandedKeys"?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "size" | "data" | "multiple" | "checkable" | "checkStrictly" | "draggable" | "showLine" | "selectable" | "blockNode" | "defaultExpandAll" | "checkedStrategy" | "defaultExpandSelected" | "defaultExpandChecked" | "autoExpandParent">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "check" | "select" | "drop" | "expand" | "dragStart" | "dragOver" | "dragLeave" | "dragEnd" | "update:selectedKeys" | "update:checkedKeys" | "update:expandedKeys", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            size?: unknown;
            blockNode?: unknown;
            defaultExpandAll?: unknown;
            multiple?: unknown;
            checkable?: unknown;
            selectable?: unknown;
            checkStrictly?: unknown;
            checkedStrategy?: unknown;
            defaultSelectedKeys?: unknown;
            selectedKeys?: unknown;
            defaultCheckedKeys?: unknown;
            checkedKeys?: unknown;
            defaultExpandedKeys?: unknown;
            expandedKeys?: unknown;
            data?: unknown;
            fieldNames?: unknown;
            showLine?: unknown;
            loadMore?: unknown;
            draggable?: unknown;
            allowDrop?: unknown;
            filterTreeNode?: unknown;
            virtualListProps?: unknown;
            defaultExpandSelected?: unknown;
            defaultExpandChecked?: unknown;
            autoExpandParent?: unknown;
        } & {
            size: "small" | "mini" | "medium" | "large";
            data: import("./interface").TreeNodeData[];
            multiple: boolean;
            checkable: boolean;
            checkStrictly: boolean;
            draggable: boolean;
            showLine: boolean;
            selectable: boolean;
            blockNode: boolean;
            defaultExpandAll: boolean;
            checkedStrategy: "all" | "child" | "parent";
            defaultExpandSelected: boolean;
            defaultExpandChecked: boolean;
            autoExpandParent: boolean;
        } & {
            virtualListProps?: import("../_components/virtual-list/interface").VirtualListProps | undefined;
            loadMore?: ((node: import("./interface").TreeNodeData) => Promise<void>) | undefined;
            checkedKeys?: (string | number)[] | undefined;
            selectedKeys?: (string | number)[] | undefined;
            expandedKeys?: (string | number)[] | undefined;
            allowDrop?: ((options: {
                dropNode: import("./interface").TreeNodeData;
                dropPosition: 0 | 1 | -1;
            }) => boolean) | undefined;
            defaultSelectedKeys?: (string | number)[] | undefined;
            defaultCheckedKeys?: (string | number)[] | undefined;
            defaultExpandedKeys?: (string | number)[] | undefined;
            fieldNames?: import("./interface").FieldNames | undefined;
            filterTreeNode?: import("./interface").FilterTreeNode | undefined;
        }> & {
            onSelect?: ((...args: any[]) => any) | undefined;
            onDrop?: ((...args: any[]) => any) | undefined;
            onCheck?: ((...args: any[]) => any) | undefined;
            onExpand?: ((...args: any[]) => any) | undefined;
            onDragStart?: ((...args: any[]) => any) | undefined;
            onDragEnd?: ((...args: any[]) => any) | undefined;
            onDragOver?: ((...args: any[]) => any) | undefined;
            onDragLeave?: ((...args: any[]) => any) | undefined;
            "onUpdate:selectedKeys"?: ((...args: any[]) => any) | undefined;
            "onUpdate:checkedKeys"?: ((...args: any[]) => any) | undefined;
            "onUpdate:expandedKeys"?: ((...args: any[]) => any) | undefined;
        }, {
            classNames: import("vue").ComputedRef<(string | {
                [x: string]: boolean;
            })[]>;
            visibleTreeNodeList: import("vue").ComputedRef<import("./interface").Node[]>;
            treeContext: {
                switcherIcon: import("vue").Slot | undefined;
                loadingIcon: import("vue").Slot | undefined;
                dragIcon: import("vue").Slot | undefined;
                nodeTitle: import("vue").Slot | undefined;
                nodeExtra: import("vue").Slot | undefined;
                treeData: {
                    key: import("./interface").TreeNodeKey;
                    treeNodeProps: {
                        selectable: boolean;
                        disabled: boolean;
                        disableCheckbox: boolean;
                        checkable: boolean;
                        draggable: boolean;
                        isLeaf: boolean;
                        isTail: boolean;
                        blockNode: boolean;
                        showLine: boolean;
                        level: number;
                        lineless: boolean[];
                        title?: string | undefined;
                        icon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                            [key: string]: any;
                        }>[]) | undefined;
                        key?: string | number | undefined;
                        switcherIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                            [key: string]: any;
                        }>[]) | undefined;
                        loadingIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                            [key: string]: any;
                        }>[]) | undefined;
                        dragIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                            [key: string]: any;
                        }>[]) | undefined;
                    };
                    treeNodeData: {
                        key?: string | number | undefined;
                        title?: string | undefined;
                        selectable?: boolean | undefined;
                        disabled?: boolean | undefined;
                        disableCheckbox?: boolean | undefined;
                        checkable?: boolean | undefined;
                        draggable?: boolean | undefined;
                        isLeaf?: boolean | undefined;
                        icon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                            [key: string]: any;
                        }>[]) | undefined;
                        switcherIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                            [key: string]: any;
                        }>[]) | undefined;
                        loadingIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                            [key: string]: any;
                        }>[]) | undefined;
                        dragIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                            [key: string]: any;
                        }>[]) | undefined;
                        children?: any[] | undefined;
                    };
                    parent?: any | undefined;
                    parentKey?: import("./interface").TreeNodeKey | undefined;
                    pathParentKeys: import("./interface").TreeNodeKey[];
                    children?: any[] | undefined;
                    selectable: boolean;
                    disabled: boolean;
                    disableCheckbox: boolean;
                    checkable: boolean;
                    draggable: boolean;
                    isLeaf: boolean;
                    isTail: boolean;
                    blockNode: boolean;
                    showLine: boolean;
                    level: number;
                    lineless: boolean[];
                    title?: string | undefined;
                    icon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                        [key: string]: any;
                    }>[]) | undefined;
                    switcherIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                        [key: string]: any;
                    }>[]) | undefined;
                    loadingIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                        [key: string]: any;
                    }>[]) | undefined;
                    dragIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                        [key: string]: any;
                    }>[]) | undefined;
                }[];
                flattenTreeData: import("./interface").Node[];
                key2TreeNode: import("./utils").Key2TreeNode;
                checkedKeys: import("./interface").TreeNodeKey[];
                indeterminateKeys: import("./interface").TreeNodeKey[];
                selectedKeys: import("./interface").TreeNodeKey[];
                expandedKeys: import("./interface").TreeNodeKey[];
                loadingKeys: import("./interface").TreeNodeKey[];
                currentExpandKeys: import("./interface").TreeNodeKey[];
                onLoadMore: ((key: import("./interface").TreeNodeKey) => Promise<void>) | undefined;
                onCheck: (checked: boolean, key: import("./interface").TreeNodeKey, e?: Event | undefined) => void;
                onSelect: (key: import("./interface").TreeNodeKey, e: Event) => void;
                onExpand: (expanded: boolean, key: import("./interface").TreeNodeKey, e?: Event | undefined) => void;
                onExpandEnd: (key: import("./interface").TreeNodeKey) => void;
                allowDrop: (key: import("./interface").TreeNodeKey, dropPosition: import("./interface").DropPosition) => boolean;
                onDragStart: (key: import("./interface").TreeNodeKey, e: DragEvent) => void;
                onDragEnd: (key: import("./interface").TreeNodeKey, e: DragEvent) => void;
                onDragOver: (key: import("./interface").TreeNodeKey, e: DragEvent) => void;
                onDragLeave: (key: import("./interface").TreeNodeKey, e: DragEvent) => void;
                onDrop: (key: import("./interface").TreeNodeKey, dropPosition: number, e: DragEvent) => void;
            };
            virtualListRef: import("vue").Ref<any>;
        }, unknown, {}, {
            toggleCheck(key: import("./interface").TreeNodeKey, e: Event): void;
            scrollIntoView(options: import("../_components/virtual-list/interface").ScrollIntoViewOptions): void;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("check" | "select" | "drop" | "expand" | "dragStart" | "dragOver" | "dragLeave" | "dragEnd" | "update:selectedKeys" | "update:checkedKeys" | "update:expandedKeys")[], string, {
            size: "small" | "mini" | "medium" | "large";
            data: import("./interface").TreeNodeData[];
            multiple: boolean;
            checkable: boolean;
            checkStrictly: boolean;
            draggable: boolean;
            showLine: boolean;
            selectable: boolean;
            blockNode: boolean;
            defaultExpandAll: boolean;
            checkedStrategy: "all" | "child" | "parent";
            defaultExpandSelected: boolean;
            defaultExpandChecked: boolean;
            autoExpandParent: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        size?: unknown;
        blockNode?: unknown;
        defaultExpandAll?: unknown;
        multiple?: unknown;
        checkable?: unknown;
        selectable?: unknown;
        checkStrictly?: unknown;
        checkedStrategy?: unknown;
        defaultSelectedKeys?: unknown;
        selectedKeys?: unknown;
        defaultCheckedKeys?: unknown;
        checkedKeys?: unknown;
        defaultExpandedKeys?: unknown;
        expandedKeys?: unknown;
        data?: unknown;
        fieldNames?: unknown;
        showLine?: unknown;
        loadMore?: unknown;
        draggable?: unknown;
        allowDrop?: unknown;
        filterTreeNode?: unknown;
        virtualListProps?: unknown;
        defaultExpandSelected?: unknown;
        defaultExpandChecked?: unknown;
        autoExpandParent?: unknown;
    } & {
        size: "small" | "mini" | "medium" | "large";
        data: import("./interface").TreeNodeData[];
        multiple: boolean;
        checkable: boolean;
        checkStrictly: boolean;
        draggable: boolean;
        showLine: boolean;
        selectable: boolean;
        blockNode: boolean;
        defaultExpandAll: boolean;
        checkedStrategy: "all" | "child" | "parent";
        defaultExpandSelected: boolean;
        defaultExpandChecked: boolean;
        autoExpandParent: boolean;
    } & {
        virtualListProps?: import("../_components/virtual-list/interface").VirtualListProps | undefined;
        loadMore?: ((node: import("./interface").TreeNodeData) => Promise<void>) | undefined;
        checkedKeys?: (string | number)[] | undefined;
        selectedKeys?: (string | number)[] | undefined;
        expandedKeys?: (string | number)[] | undefined;
        allowDrop?: ((options: {
            dropNode: import("./interface").TreeNodeData;
            dropPosition: 0 | 1 | -1;
        }) => boolean) | undefined;
        defaultSelectedKeys?: (string | number)[] | undefined;
        defaultCheckedKeys?: (string | number)[] | undefined;
        defaultExpandedKeys?: (string | number)[] | undefined;
        fieldNames?: import("./interface").FieldNames | undefined;
        filterTreeNode?: import("./interface").FilterTreeNode | undefined;
    }> & {
        onSelect?: ((...args: any[]) => any) | undefined;
        onDrop?: ((...args: any[]) => any) | undefined;
        onCheck?: ((...args: any[]) => any) | undefined;
        onExpand?: ((...args: any[]) => any) | undefined;
        onDragStart?: ((...args: any[]) => any) | undefined;
        onDragEnd?: ((...args: any[]) => any) | undefined;
        onDragOver?: ((...args: any[]) => any) | undefined;
        onDragLeave?: ((...args: any[]) => any) | undefined;
        "onUpdate:selectedKeys"?: ((...args: any[]) => any) | undefined;
        "onUpdate:checkedKeys"?: ((...args: any[]) => any) | undefined;
        "onUpdate:expandedKeys"?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        classNames: import("vue").ComputedRef<(string | {
            [x: string]: boolean;
        })[]>;
        visibleTreeNodeList: import("vue").ComputedRef<import("./interface").Node[]>;
        treeContext: {
            switcherIcon: import("vue").Slot | undefined;
            loadingIcon: import("vue").Slot | undefined;
            dragIcon: import("vue").Slot | undefined;
            nodeTitle: import("vue").Slot | undefined;
            nodeExtra: import("vue").Slot | undefined;
            treeData: {
                key: import("./interface").TreeNodeKey;
                treeNodeProps: {
                    selectable: boolean;
                    disabled: boolean;
                    disableCheckbox: boolean;
                    checkable: boolean;
                    draggable: boolean;
                    isLeaf: boolean;
                    isTail: boolean;
                    blockNode: boolean;
                    showLine: boolean;
                    level: number;
                    lineless: boolean[];
                    title?: string | undefined;
                    icon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                        [key: string]: any;
                    }>[]) | undefined;
                    key?: string | number | undefined;
                    switcherIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                        [key: string]: any;
                    }>[]) | undefined;
                    loadingIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                        [key: string]: any;
                    }>[]) | undefined;
                    dragIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                        [key: string]: any;
                    }>[]) | undefined;
                };
                treeNodeData: {
                    key?: string | number | undefined;
                    title?: string | undefined;
                    selectable?: boolean | undefined;
                    disabled?: boolean | undefined;
                    disableCheckbox?: boolean | undefined;
                    checkable?: boolean | undefined;
                    draggable?: boolean | undefined;
                    isLeaf?: boolean | undefined;
                    icon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                        [key: string]: any;
                    }>[]) | undefined;
                    switcherIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                        [key: string]: any;
                    }>[]) | undefined;
                    loadingIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                        [key: string]: any;
                    }>[]) | undefined;
                    dragIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                        [key: string]: any;
                    }>[]) | undefined;
                    children?: any[] | undefined;
                };
                parent?: any | undefined;
                parentKey?: import("./interface").TreeNodeKey | undefined;
                pathParentKeys: import("./interface").TreeNodeKey[];
                children?: any[] | undefined;
                selectable: boolean;
                disabled: boolean;
                disableCheckbox: boolean;
                checkable: boolean;
                draggable: boolean;
                isLeaf: boolean;
                isTail: boolean;
                blockNode: boolean;
                showLine: boolean;
                level: number;
                lineless: boolean[];
                title?: string | undefined;
                icon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>[]) | undefined;
                switcherIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>[]) | undefined;
                loadingIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>[]) | undefined;
                dragIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>[]) | undefined;
            }[];
            flattenTreeData: import("./interface").Node[];
            key2TreeNode: import("./utils").Key2TreeNode;
            checkedKeys: import("./interface").TreeNodeKey[];
            indeterminateKeys: import("./interface").TreeNodeKey[];
            selectedKeys: import("./interface").TreeNodeKey[];
            expandedKeys: import("./interface").TreeNodeKey[];
            loadingKeys: import("./interface").TreeNodeKey[];
            currentExpandKeys: import("./interface").TreeNodeKey[];
            onLoadMore: ((key: import("./interface").TreeNodeKey) => Promise<void>) | undefined;
            onCheck: (checked: boolean, key: import("./interface").TreeNodeKey, e?: Event | undefined) => void;
            onSelect: (key: import("./interface").TreeNodeKey, e: Event) => void;
            onExpand: (expanded: boolean, key: import("./interface").TreeNodeKey, e?: Event | undefined) => void;
            onExpandEnd: (key: import("./interface").TreeNodeKey) => void;
            allowDrop: (key: import("./interface").TreeNodeKey, dropPosition: import("./interface").DropPosition) => boolean;
            onDragStart: (key: import("./interface").TreeNodeKey, e: DragEvent) => void;
            onDragEnd: (key: import("./interface").TreeNodeKey, e: DragEvent) => void;
            onDragOver: (key: import("./interface").TreeNodeKey, e: DragEvent) => void;
            onDragLeave: (key: import("./interface").TreeNodeKey, e: DragEvent) => void;
            onDrop: (key: import("./interface").TreeNodeKey, dropPosition: number, e: DragEvent) => void;
        };
        virtualListRef: import("vue").Ref<any>;
    }> & {} & {} & {
        toggleCheck(key: import("./interface").TreeNodeKey, e: Event): void;
        scrollIntoView(options: import("../_components/virtual-list/interface").ScrollIntoViewOptions): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    size?: unknown;
    blockNode?: unknown;
    defaultExpandAll?: unknown;
    multiple?: unknown;
    checkable?: unknown;
    selectable?: unknown;
    checkStrictly?: unknown;
    checkedStrategy?: unknown;
    defaultSelectedKeys?: unknown;
    selectedKeys?: unknown;
    defaultCheckedKeys?: unknown;
    checkedKeys?: unknown;
    defaultExpandedKeys?: unknown;
    expandedKeys?: unknown;
    data?: unknown;
    fieldNames?: unknown;
    showLine?: unknown;
    loadMore?: unknown;
    draggable?: unknown;
    allowDrop?: unknown;
    filterTreeNode?: unknown;
    virtualListProps?: unknown;
    defaultExpandSelected?: unknown;
    defaultExpandChecked?: unknown;
    autoExpandParent?: unknown;
} & {
    size: "small" | "mini" | "medium" | "large";
    data: import("./interface").TreeNodeData[];
    multiple: boolean;
    checkable: boolean;
    checkStrictly: boolean;
    draggable: boolean;
    showLine: boolean;
    selectable: boolean;
    blockNode: boolean;
    defaultExpandAll: boolean;
    checkedStrategy: "all" | "child" | "parent";
    defaultExpandSelected: boolean;
    defaultExpandChecked: boolean;
    autoExpandParent: boolean;
} & {
    virtualListProps?: import("../_components/virtual-list/interface").VirtualListProps | undefined;
    loadMore?: ((node: import("./interface").TreeNodeData) => Promise<void>) | undefined;
    checkedKeys?: (string | number)[] | undefined;
    selectedKeys?: (string | number)[] | undefined;
    expandedKeys?: (string | number)[] | undefined;
    allowDrop?: ((options: {
        dropNode: import("./interface").TreeNodeData;
        dropPosition: 0 | 1 | -1;
    }) => boolean) | undefined;
    defaultSelectedKeys?: (string | number)[] | undefined;
    defaultCheckedKeys?: (string | number)[] | undefined;
    defaultExpandedKeys?: (string | number)[] | undefined;
    fieldNames?: import("./interface").FieldNames | undefined;
    filterTreeNode?: import("./interface").FilterTreeNode | undefined;
}> & {
    onSelect?: ((...args: any[]) => any) | undefined;
    onDrop?: ((...args: any[]) => any) | undefined;
    onCheck?: ((...args: any[]) => any) | undefined;
    onExpand?: ((...args: any[]) => any) | undefined;
    onDragStart?: ((...args: any[]) => any) | undefined;
    onDragEnd?: ((...args: any[]) => any) | undefined;
    onDragOver?: ((...args: any[]) => any) | undefined;
    onDragLeave?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectedKeys"?: ((...args: any[]) => any) | undefined;
    "onUpdate:checkedKeys"?: ((...args: any[]) => any) | undefined;
    "onUpdate:expandedKeys"?: ((...args: any[]) => any) | undefined;
}, {
    classNames: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    visibleTreeNodeList: import("vue").ComputedRef<import("./interface").Node[]>;
    treeContext: {
        switcherIcon: import("vue").Slot | undefined;
        loadingIcon: import("vue").Slot | undefined;
        dragIcon: import("vue").Slot | undefined;
        nodeTitle: import("vue").Slot | undefined;
        nodeExtra: import("vue").Slot | undefined;
        treeData: {
            key: import("./interface").TreeNodeKey;
            treeNodeProps: {
                selectable: boolean;
                disabled: boolean;
                disableCheckbox: boolean;
                checkable: boolean;
                draggable: boolean;
                isLeaf: boolean;
                isTail: boolean;
                blockNode: boolean;
                showLine: boolean;
                level: number;
                lineless: boolean[];
                title?: string | undefined;
                icon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>[]) | undefined;
                key?: string | number | undefined;
                switcherIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>[]) | undefined;
                loadingIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>[]) | undefined;
                dragIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>[]) | undefined;
            };
            treeNodeData: {
                key?: string | number | undefined;
                title?: string | undefined;
                selectable?: boolean | undefined;
                disabled?: boolean | undefined;
                disableCheckbox?: boolean | undefined;
                checkable?: boolean | undefined;
                draggable?: boolean | undefined;
                isLeaf?: boolean | undefined;
                icon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>[]) | undefined;
                switcherIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>[]) | undefined;
                loadingIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>[]) | undefined;
                dragIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>[]) | undefined;
                children?: any[] | undefined;
            };
            parent?: any | undefined;
            parentKey?: import("./interface").TreeNodeKey | undefined;
            pathParentKeys: import("./interface").TreeNodeKey[];
            children?: any[] | undefined;
            selectable: boolean;
            disabled: boolean;
            disableCheckbox: boolean;
            checkable: boolean;
            draggable: boolean;
            isLeaf: boolean;
            isTail: boolean;
            blockNode: boolean;
            showLine: boolean;
            level: number;
            lineless: boolean[];
            title?: string | undefined;
            icon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>[]) | undefined;
            switcherIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>[]) | undefined;
            loadingIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>[]) | undefined;
            dragIcon?: (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>[]) | undefined;
        }[];
        flattenTreeData: import("./interface").Node[];
        key2TreeNode: import("./utils").Key2TreeNode;
        checkedKeys: import("./interface").TreeNodeKey[];
        indeterminateKeys: import("./interface").TreeNodeKey[];
        selectedKeys: import("./interface").TreeNodeKey[];
        expandedKeys: import("./interface").TreeNodeKey[];
        loadingKeys: import("./interface").TreeNodeKey[];
        currentExpandKeys: import("./interface").TreeNodeKey[];
        onLoadMore: ((key: import("./interface").TreeNodeKey) => Promise<void>) | undefined;
        onCheck: (checked: boolean, key: import("./interface").TreeNodeKey, e?: Event | undefined) => void;
        onSelect: (key: import("./interface").TreeNodeKey, e: Event) => void;
        onExpand: (expanded: boolean, key: import("./interface").TreeNodeKey, e?: Event | undefined) => void;
        onExpandEnd: (key: import("./interface").TreeNodeKey) => void;
        allowDrop: (key: import("./interface").TreeNodeKey, dropPosition: import("./interface").DropPosition) => boolean;
        onDragStart: (key: import("./interface").TreeNodeKey, e: DragEvent) => void;
        onDragEnd: (key: import("./interface").TreeNodeKey, e: DragEvent) => void;
        onDragOver: (key: import("./interface").TreeNodeKey, e: DragEvent) => void;
        onDragLeave: (key: import("./interface").TreeNodeKey, e: DragEvent) => void;
        onDrop: (key: import("./interface").TreeNodeKey, dropPosition: number, e: DragEvent) => void;
    };
    virtualListRef: import("vue").Ref<any>;
}, unknown, {}, {
    toggleCheck(key: import("./interface").TreeNodeKey, e: Event): void;
    scrollIntoView(options: import("../_components/virtual-list/interface").ScrollIntoViewOptions): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("check" | "select" | "drop" | "expand" | "dragStart" | "dragOver" | "dragLeave" | "dragEnd" | "update:selectedKeys" | "update:checkedKeys" | "update:expandedKeys")[], "select" | "expand" | "check" | "drop" | "dragStart" | "dragOver" | "dragLeave" | "dragEnd" | "update:selectedKeys" | "update:checkedKeys" | "update:expandedKeys", {
    size: "small" | "mini" | "medium" | "large";
    data: import("./interface").TreeNodeData[];
    multiple: boolean;
    checkable: boolean;
    checkStrictly: boolean;
    draggable: boolean;
    showLine: boolean;
    selectable: boolean;
    blockNode: boolean;
    defaultExpandAll: boolean;
    checkedStrategy: "all" | "child" | "parent";
    defaultExpandSelected: boolean;
    defaultExpandChecked: boolean;
    autoExpandParent: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type TreeInstance = InstanceType<typeof _Tree>;
export default Tree;
