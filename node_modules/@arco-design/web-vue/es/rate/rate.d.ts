import { PropType } from 'vue';
import { EmitType } from '../_utils/types';
declare const _default: import("vue").DefineComponent<{
    count: {
        type: NumberConstructor;
        default: number;
    };
    modelValue: {
        type: NumberConstructor;
        default: undefined;
    };
    defaultValue: {
        type: NumberConstructor;
        default: number;
    };
    allowHalf: {
        type: BooleanConstructor;
        default: boolean;
    };
    allowClear: {
        type: BooleanConstructor;
        default: boolean;
    };
    grading: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    onChange: {
        type: PropType<EmitType<(index: number) => void>>;
    };
    onHoverChange: {
        type: PropType<EmitType<(index: number) => void>>;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue" | "hoverChange")[], "change" | "update:modelValue" | "hoverChange", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    count?: unknown;
    modelValue?: unknown;
    defaultValue?: unknown;
    allowHalf?: unknown;
    allowClear?: unknown;
    grading?: unknown;
    readonly?: unknown;
    disabled?: unknown;
    onChange?: unknown;
    onHoverChange?: unknown;
} & {
    disabled: boolean;
    defaultValue: number;
    readonly: boolean;
    allowClear: boolean;
    count: number;
    allowHalf: boolean;
    grading: boolean;
} & {
    modelValue?: number | undefined;
    onChange?: EmitType<(index: number) => void> | undefined;
    onHoverChange?: EmitType<(index: number) => void> | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onHoverChange?: ((...args: any[]) => any) | undefined;
}, {
    modelValue: number;
    disabled: boolean;
    defaultValue: number;
    readonly: boolean;
    allowClear: boolean;
    count: number;
    allowHalf: boolean;
    grading: boolean;
}>;
export default _default;
