import { defineComponent, inject, ref, computed, watch, nextTick, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, withModifiers, Fragment, createVNode, withCtx, renderSlot, createCommentVNode } from "vue";
import { getPrefixCls } from "../_utils/global-config.js";
import IconHover from "../_components/icon-hover.js";
import { RADIO_TYPES, radioGroupKey } from "./context.js";
import { isUndefined } from "../_utils/is.js";
import _export_sfc from "../_virtual/plugin-vue_export-helper";
const _sfc_main = defineComponent({
  name: "Radio",
  components: {
    IconHover
  },
  props: {
    modelValue: {
      type: [String, Number, Boolean],
      default: void 0
    },
    defaultChecked: {
      type: Boolean,
      default: false
    },
    value: {
      type: [String, Number, Boolean],
      default: true
    },
    type: {
      type: String,
      default: "radio",
      validator: (value) => RADIO_TYPES.includes(value)
    },
    disabled: {
      type: Boolean,
      default: false
    },
    uninjectGroupContext: {
      type: Boolean,
      default: false
    },
    onChange: {
      type: [Function, Array]
    }
  },
  emits: [
    "update:modelValue",
    "change"
  ],
  setup(props, { emit }) {
    const prefixCls = getPrefixCls("radio");
    const radioGroupCtx = !props.uninjectGroupContext ? inject(radioGroupKey, void 0) : void 0;
    const inputRef = ref(null);
    const _checked = ref(props.defaultChecked);
    const isGroup = computed(() => (radioGroupCtx == null ? void 0 : radioGroupCtx.name) === "ArcoRadioGroup");
    const mergedType = computed(() => {
      var _a;
      return (_a = radioGroupCtx == null ? void 0 : radioGroupCtx.type) != null ? _a : props.type;
    });
    const mergedDisabled = computed(() => (radioGroupCtx == null ? void 0 : radioGroupCtx.disabled) || props.disabled);
    const computedChecked = computed(() => {
      var _a, _b;
      if (isGroup.value) {
        return (radioGroupCtx == null ? void 0 : radioGroupCtx.value) === ((_a = props.value) != null ? _a : true);
      }
      if (!isUndefined(props.modelValue)) {
        return props.modelValue === ((_b = props.value) != null ? _b : true);
      }
      return _checked.value;
    });
    watch(computedChecked, (curValue, preValue) => {
      if (curValue !== preValue) {
        _checked.value = curValue;
        if (inputRef.value) {
          inputRef.value.checked = curValue;
        }
      }
    });
    const handleClick = (e) => {
      if (inputRef.value && e.target !== inputRef.value) {
        e.preventDefault();
        inputRef.value.click();
      }
    };
    const handleChange = (e) => {
      var _a, _b, _c;
      if (isGroup.value) {
        radioGroupCtx == null ? void 0 : radioGroupCtx.handleChange((_a = props.value) != null ? _a : true, e);
      }
      _checked.value = true;
      emit("update:modelValue", (_b = props.value) != null ? _b : true);
      emit("change", (_c = props.value) != null ? _c : true, e);
      nextTick(() => {
        if (inputRef.value && inputRef.value.checked !== computedChecked.value) {
          inputRef.value.checked = computedChecked.value;
        }
      });
    };
    const cls = computed(() => [
      `${mergedType.value === "button" ? `${prefixCls}-button` : prefixCls}`,
      {
        [`${prefixCls}-checked`]: computedChecked.value,
        [`${prefixCls}-disabled`]: mergedDisabled.value
      }
    ]);
    return {
      prefixCls,
      cls,
      inputRef,
      mergedType,
      mergedDisabled,
      computedChecked,
      handleChange,
      handleClick
    };
  }
});
const _hoisted_1 = ["checked", "value", "disabled"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_icon_hover = resolveComponent("icon-hover");
  return openBlock(), createElementBlock("span", {
    class: normalizeClass(_ctx.cls),
    onClick: _cache[2] || (_cache[2] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))
  }, [
    createElementVNode("input", {
      ref: "inputRef",
      type: "radio",
      checked: _ctx.computedChecked,
      value: _ctx.value,
      class: normalizeClass(`${_ctx.prefixCls}-target`),
      disabled: _ctx.mergedDisabled,
      onClick: _cache[0] || (_cache[0] = withModifiers(() => {
      }, ["stop"])),
      onChange: _cache[1] || (_cache[1] = (...args) => _ctx.handleChange && _ctx.handleChange(...args))
    }, null, 42, _hoisted_1),
    _ctx.mergedType === "radio" ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
      createVNode(_component_icon_hover, {
        class: normalizeClass(`${_ctx.prefixCls}-icon-hover`),
        disabled: _ctx.mergedDisabled || _ctx.computedChecked
      }, {
        default: withCtx(() => [
          createElementVNode("span", {
            class: normalizeClass(`${_ctx.prefixCls}-icon`)
          }, null, 2)
        ]),
        _: 1
      }, 8, ["class", "disabled"]),
      _ctx.$slots.default ? (openBlock(), createElementBlock("span", {
        key: 0,
        class: normalizeClass(`${_ctx.prefixCls}-label`)
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 2)) : createCommentVNode("v-if", true)
    ], 64)) : (openBlock(), createElementBlock("span", {
      key: 1,
      class: normalizeClass(`${_ctx.prefixCls}-button-content`)
    }, [
      renderSlot(_ctx.$slots, "default")
    ], 2))
  ], 2);
}
var _Radio = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _Radio as default };
