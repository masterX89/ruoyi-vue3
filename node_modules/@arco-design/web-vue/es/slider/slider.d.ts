import type { PropType, CSSProperties } from 'vue';
import { EmitType } from '../_utils/types';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: PropType<number | [number, number]>;
        default: undefined;
    };
    defaultValue: {
        type: PropType<number | [number, number]>;
        default: number;
    };
    step: {
        type: NumberConstructor;
        default: number;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    marks: {
        type: PropType<Record<number, string>>;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    direction: {
        type: PropType<"horizontal" | "vertical">;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    showTicks: {
        type: BooleanConstructor;
        default: boolean;
    };
    showInput: {
        type: BooleanConstructor;
        default: boolean;
    };
    range: {
        type: BooleanConstructor;
        default: boolean;
    };
    formatTooltip: {
        type: FunctionConstructor;
    };
    onChange: {
        type: PropType<EmitType<(value: number | [number, number]) => void>>;
    };
}, {
    prefixCls: string;
    cls: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    trackCls: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    trackRef: import("vue").Ref<HTMLElement | null>;
    computedValue: import("vue").ComputedRef<[number, number]>;
    markList: import("vue").ComputedRef<{
        key: number;
        content: string | undefined;
        isActive: boolean;
    }[]>;
    getBtnStyle: (value: number) => CSSProperties;
    getBarStyle: ([start, end]: [number, number]) => CSSProperties;
    handleClick: (e: MouseEvent) => void;
    handleMoveStart: () => void;
    handleEndMoving: (x: number, y: number) => void;
    handleMoveEnd: () => void;
    handleStartMoving: (x: number, y: number) => void;
    handleStartChange: (value?: number | undefined) => void;
    handleEndChange: (value?: number | undefined) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue")[], "change" | "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    defaultValue?: unknown;
    step?: unknown;
    min?: unknown;
    marks?: unknown;
    max?: unknown;
    direction?: unknown;
    disabled?: unknown;
    showTicks?: unknown;
    showInput?: unknown;
    range?: unknown;
    formatTooltip?: unknown;
    onChange?: unknown;
} & {
    disabled: boolean;
    defaultValue: number | [number, number];
    direction: "horizontal" | "vertical";
    range: boolean;
    step: number;
    max: number;
    min: number;
    showTicks: boolean;
    showInput: boolean;
} & {
    modelValue?: number | [number, number] | undefined;
    onChange?: EmitType<(value: number | [number, number]) => void> | undefined;
    formatTooltip?: Function | undefined;
    marks?: Record<number, string> | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    modelValue: number | [number, number];
    disabled: boolean;
    defaultValue: number | [number, number];
    direction: "horizontal" | "vertical";
    range: boolean;
    step: number;
    max: number;
    min: number;
    showTicks: boolean;
    showInput: boolean;
}>;
export default _default;
