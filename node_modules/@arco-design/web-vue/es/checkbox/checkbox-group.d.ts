import type { PropType } from 'vue';
import { EmitType } from '../_utils/types';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: PropType<(string | number | boolean)[]>;
        default: undefined;
    };
    defaultValue: {
        type: PropType<(string | number | boolean)[]>;
        default: () => never[];
    };
    direction: {
        type: PropType<"horizontal" | "vertical">;
        default: string;
        validator: (value: any) => boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    onChange: {
        type: PropType<EmitType<(value: Array<string | number | boolean>, e: Event) => void>>;
    };
}, {
    prefixCls: string;
    cls: import("vue").ComputedRef<string[]>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue")[], "change" | "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    defaultValue?: unknown;
    direction?: unknown;
    disabled?: unknown;
    onChange?: unknown;
} & {
    disabled: boolean;
    defaultValue: (string | number | boolean)[];
    direction: "horizontal" | "vertical";
} & {
    modelValue?: (string | number | boolean)[] | undefined;
    onChange?: EmitType<(value: Array<string | number | boolean>, e: Event) => void> | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    modelValue: (string | number | boolean)[];
    disabled: boolean;
    defaultValue: (string | number | boolean)[];
    direction: "horizontal" | "vertical";
}>;
export default _default;
