import { defineComponent, ref, inject, computed, watch, nextTick, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, withModifiers, createVNode, withCtx, createBlock, createCommentVNode, renderSlot } from "vue";
import { getPrefixCls } from "../_utils/global-config.js";
import IconHover from "../_components/icon-hover.js";
import IconCheck from "./icon-check.js";
import { isArray } from "../_utils/is.js";
import { checkboxGroupKey } from "./context.js";
import _export_sfc from "../_virtual/plugin-vue_export-helper";
const _sfc_main = defineComponent({
  name: "Checkbox",
  components: {
    IconCheck,
    IconHover
  },
  props: {
    modelValue: {
      type: [Boolean, Array],
      default: void 0
    },
    defaultChecked: {
      type: Boolean,
      default: false
    },
    value: {
      type: [String, Number]
    },
    disabled: {
      type: Boolean,
      default: false
    },
    indeterminate: {
      type: Boolean,
      default: false
    },
    uninjectGroupContext: {
      type: Boolean,
      default: false
    },
    onChange: {
      type: [Function, Array]
    }
  },
  emits: [
    "update:modelValue",
    "change"
  ],
  setup(props, { emit }) {
    const prefixCls = getPrefixCls("checkbox");
    const checkboxRef = ref();
    const checkboxGroupCtx = !props.uninjectGroupContext ? inject(checkboxGroupKey, void 0) : void 0;
    const isGroup = (checkboxGroupCtx == null ? void 0 : checkboxGroupCtx.name) === "ArcoCheckboxGroup";
    const mergedDisabled = computed(() => (checkboxGroupCtx == null ? void 0 : checkboxGroupCtx.disabled) || props.disabled);
    const _checked = ref(props.defaultChecked);
    const computedValue = computed(() => {
      var _a;
      return isGroup ? checkboxGroupCtx == null ? void 0 : checkboxGroupCtx.computedValue : (_a = props.modelValue) != null ? _a : _checked.value;
    });
    const computedChecked = computed(() => {
      var _a;
      return isArray(computedValue.value) ? computedValue.value.includes((_a = props.value) != null ? _a : true) : computedValue.value;
    });
    const handleChange = (e) => {
      var _a, _b;
      const { checked } = e.target;
      let newValue = checked;
      if (isArray(computedValue.value)) {
        const set = new Set(computedValue.value);
        if (checked) {
          set.add((_a = props.value) != null ? _a : true);
        } else {
          set.delete((_b = props.value) != null ? _b : true);
        }
        newValue = Array.from(set);
      }
      _checked.value = checked;
      if (isGroup && isArray(newValue)) {
        checkboxGroupCtx == null ? void 0 : checkboxGroupCtx.handleChange(newValue, e);
      } else {
        emit("update:modelValue", newValue);
        emit("change", newValue, e);
      }
      nextTick(() => {
        if (checkboxRef.value && checkboxRef.value.checked !== computedChecked.value) {
          checkboxRef.value.checked = computedChecked.value;
        }
      });
    };
    const cls = computed(() => [
      prefixCls,
      {
        [`${prefixCls}-checked`]: computedChecked.value,
        [`${prefixCls}-indeterminate`]: props.indeterminate,
        [`${prefixCls}-disabled`]: mergedDisabled.value
      }
    ]);
    const handleClick = (e) => {
      if (checkboxRef.value && e.target !== checkboxRef.value) {
        checkboxRef.value.click();
      }
    };
    watch(computedValue, (value) => {
      var _a;
      let checked;
      if (isArray(value)) {
        checked = value.includes((_a = props.value) != null ? _a : true);
      } else {
        checked = value;
      }
      if (_checked.value !== checked) {
        _checked.value = checked;
      }
      if (checkboxRef.value && checkboxRef.value.checked !== checked) {
        checkboxRef.value.checked = checked;
      }
    });
    return {
      prefixCls,
      cls,
      checkboxRef,
      mergedDisabled,
      computedValue,
      computedChecked,
      handleClick,
      handleChange
    };
  }
});
const _hoisted_1 = ["checked", "value", "disabled"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_icon_check = resolveComponent("icon-check");
  const _component_icon_hover = resolveComponent("icon-hover");
  return openBlock(), createElementBlock("span", {
    class: normalizeClass(_ctx.cls),
    onClick: _cache[2] || (_cache[2] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))
  }, [
    createElementVNode("input", {
      ref: "checkboxRef",
      type: "checkbox",
      checked: _ctx.computedChecked,
      value: _ctx.value,
      class: normalizeClass(`${_ctx.prefixCls}-target`),
      disabled: _ctx.mergedDisabled,
      onClick: _cache[0] || (_cache[0] = withModifiers(() => {
      }, ["stop"])),
      onChange: _cache[1] || (_cache[1] = (...args) => _ctx.handleChange && _ctx.handleChange(...args))
    }, null, 42, _hoisted_1),
    createVNode(_component_icon_hover, {
      class: normalizeClass(`${_ctx.prefixCls}-icon-hover`),
      disabled: _ctx.mergedDisabled || _ctx.computedChecked
    }, {
      default: withCtx(() => [
        createElementVNode("div", {
          class: normalizeClass(`${_ctx.prefixCls}-icon`)
        }, [
          _ctx.computedChecked ? (openBlock(), createBlock(_component_icon_check, {
            key: 0,
            class: normalizeClass(`${_ctx.prefixCls}-icon-check`)
          }, null, 8, ["class"])) : createCommentVNode("v-if", true)
        ], 2)
      ]),
      _: 1
    }, 8, ["class", "disabled"]),
    _ctx.$slots.default ? (openBlock(), createElementBlock("span", {
      key: 0,
      class: normalizeClass(`${_ctx.prefixCls}-label`)
    }, [
      renderSlot(_ctx.$slots, "default")
    ], 2)) : createCommentVNode("v-if", true)
  ], 2);
}
var _Checkbox = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _Checkbox as default };
