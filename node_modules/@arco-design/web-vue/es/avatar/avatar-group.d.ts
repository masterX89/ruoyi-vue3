import { PropType, CSSProperties } from 'vue';
import { ShapeType } from './constants';
declare const _default: import("vue").DefineComponent<{
    shape: {
        type: PropType<"circle" | "square">;
        default: string;
        validator: (value: ShapeType) => boolean;
    };
    size: NumberConstructor;
    autoFixFontSize: {
        type: BooleanConstructor;
        default: boolean;
    };
    maxCount: {
        type: NumberConstructor;
    };
    zIndexAscend: {
        type: BooleanConstructor;
        default: boolean;
    };
    maxStyle: {
        type: PropType<CSSProperties>;
    };
    maxPopoverTriggerProps: {
        type: PropType<Partial<{
            disabled: boolean;
            animationName: string;
            position: "br" | "rt" | "tr" | "left" | "right" | "bottom" | "top" | "tl" | "bl" | "lt" | "lb" | "rb";
            popupVisible: boolean;
            defaultPopupVisible: boolean;
            trigger: "focus" | "click" | "hover" | "contextMenu" | ("focus" | "click" | "hover" | "contextMenu")[];
            popupOffset: number;
            showArrow: boolean;
            alignPoint: boolean;
            popupHoverStay: boolean;
            blurToClose: boolean;
            clickToClose: boolean;
            clickOutsideToClose: boolean;
            unmountOnClose: boolean;
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            focusDelay: number;
            autoFitPopupWidth: boolean;
            autoFitPopupMinWidth: boolean;
            autoFixPosition: boolean;
            updateAtScroll: boolean;
            autoFitTransformOrigin: boolean;
            hideEmpty: boolean;
            autoFitPosition: boolean;
            renderToBody: boolean;
            preventFocus: boolean;
        }> & Omit<Readonly<{
            popupVisible?: unknown;
            defaultPopupVisible?: unknown;
            trigger?: unknown;
            position?: unknown;
            disabled?: unknown;
            popupOffset?: unknown;
            popupTranslate?: unknown;
            showArrow?: unknown;
            alignPoint?: unknown;
            popupHoverStay?: unknown;
            blurToClose?: unknown;
            clickToClose?: unknown;
            clickOutsideToClose?: unknown;
            unmountOnClose?: unknown;
            contentClass?: unknown;
            contentStyle?: unknown;
            arrowClass?: unknown;
            arrowStyle?: unknown;
            popupStyle?: unknown;
            animationName?: unknown;
            duration?: unknown;
            mouseEnterDelay?: unknown;
            mouseLeaveDelay?: unknown;
            focusDelay?: unknown;
            autoFitPopupWidth?: unknown;
            autoFitPopupMinWidth?: unknown;
            autoFixPosition?: unknown;
            popupContainer?: unknown;
            updateAtScroll?: unknown;
            autoFitTransformOrigin?: unknown;
            hideEmpty?: unknown;
            openedCls?: unknown;
            autoFitPosition?: unknown;
            renderToBody?: unknown;
            preventFocus?: unknown;
            onPopupVisibleChange?: unknown;
        } & {
            disabled: boolean;
            animationName: string;
            position: "br" | "rt" | "tr" | "left" | "right" | "bottom" | "top" | "tl" | "bl" | "lt" | "lb" | "rb";
            defaultPopupVisible: boolean;
            trigger: "focus" | "click" | "hover" | "contextMenu" | ("focus" | "click" | "hover" | "contextMenu")[];
            popupOffset: number;
            showArrow: boolean;
            alignPoint: boolean;
            popupHoverStay: boolean;
            blurToClose: boolean;
            clickToClose: boolean;
            clickOutsideToClose: boolean;
            unmountOnClose: boolean;
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            focusDelay: number;
            autoFitPopupWidth: boolean;
            autoFitPopupMinWidth: boolean;
            autoFixPosition: boolean;
            updateAtScroll: boolean;
            autoFitTransformOrigin: boolean;
            hideEmpty: boolean;
            autoFitPosition: boolean;
            renderToBody: boolean;
            preventFocus: boolean;
        } & {
            popupContainer?: string | HTMLElement | undefined;
            onPopupVisibleChange?: import("../_utils/types").EmitType<(popupVisible: boolean) => void> | undefined;
            popupVisible?: boolean | undefined;
            popupTranslate?: import("../trigger/utils").PopupTranslate | undefined;
            contentClass?: import("../_utils/types").ClassName | undefined;
            contentStyle?: CSSProperties | undefined;
            arrowClass?: import("../_utils/types").ClassName | undefined;
            arrowStyle?: CSSProperties | undefined;
            popupStyle?: CSSProperties | undefined;
            duration?: import("../_utils/types").AnimationDuration | undefined;
            openedCls?: string | undefined;
        }> & {
            "onUpdate:popupVisible"?: ((...args: any[]) => any) | undefined;
            onPopupVisibleChange?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "animationName" | "position" | "popupVisible" | "defaultPopupVisible" | "trigger" | "popupOffset" | "showArrow" | "alignPoint" | "popupHoverStay" | "blurToClose" | "clickToClose" | "clickOutsideToClose" | "unmountOnClose" | "mouseEnterDelay" | "mouseLeaveDelay" | "focusDelay" | "autoFitPopupWidth" | "autoFitPopupMinWidth" | "autoFixPosition" | "updateAtScroll" | "autoFitTransformOrigin" | "hideEmpty" | "autoFitPosition" | "renderToBody" | "preventFocus">>;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    shape?: unknown;
    size?: unknown;
    autoFixFontSize?: unknown;
    maxCount?: unknown;
    zIndexAscend?: unknown;
    maxStyle?: unknown;
    maxPopoverTriggerProps?: unknown;
} & {
    shape: "circle" | "square";
    autoFixFontSize: boolean;
    zIndexAscend: boolean;
} & {
    size?: number | undefined;
    maxCount?: number | undefined;
    maxStyle?: CSSProperties | undefined;
    maxPopoverTriggerProps?: (Partial<{
        disabled: boolean;
        animationName: string;
        position: "br" | "rt" | "tr" | "left" | "right" | "bottom" | "top" | "tl" | "bl" | "lt" | "lb" | "rb";
        popupVisible: boolean;
        defaultPopupVisible: boolean;
        trigger: "focus" | "click" | "hover" | "contextMenu" | ("focus" | "click" | "hover" | "contextMenu")[];
        popupOffset: number;
        showArrow: boolean;
        alignPoint: boolean;
        popupHoverStay: boolean;
        blurToClose: boolean;
        clickToClose: boolean;
        clickOutsideToClose: boolean;
        unmountOnClose: boolean;
        mouseEnterDelay: number;
        mouseLeaveDelay: number;
        focusDelay: number;
        autoFitPopupWidth: boolean;
        autoFitPopupMinWidth: boolean;
        autoFixPosition: boolean;
        updateAtScroll: boolean;
        autoFitTransformOrigin: boolean;
        hideEmpty: boolean;
        autoFitPosition: boolean;
        renderToBody: boolean;
        preventFocus: boolean;
    }> & Omit<Readonly<{
        popupVisible?: unknown;
        defaultPopupVisible?: unknown;
        trigger?: unknown;
        position?: unknown;
        disabled?: unknown;
        popupOffset?: unknown;
        popupTranslate?: unknown;
        showArrow?: unknown;
        alignPoint?: unknown;
        popupHoverStay?: unknown;
        blurToClose?: unknown;
        clickToClose?: unknown;
        clickOutsideToClose?: unknown;
        unmountOnClose?: unknown;
        contentClass?: unknown;
        contentStyle?: unknown;
        arrowClass?: unknown;
        arrowStyle?: unknown;
        popupStyle?: unknown;
        animationName?: unknown;
        duration?: unknown;
        mouseEnterDelay?: unknown;
        mouseLeaveDelay?: unknown;
        focusDelay?: unknown;
        autoFitPopupWidth?: unknown;
        autoFitPopupMinWidth?: unknown;
        autoFixPosition?: unknown;
        popupContainer?: unknown;
        updateAtScroll?: unknown;
        autoFitTransformOrigin?: unknown;
        hideEmpty?: unknown;
        openedCls?: unknown;
        autoFitPosition?: unknown;
        renderToBody?: unknown;
        preventFocus?: unknown;
        onPopupVisibleChange?: unknown;
    } & {
        disabled: boolean;
        animationName: string;
        position: "br" | "rt" | "tr" | "left" | "right" | "bottom" | "top" | "tl" | "bl" | "lt" | "lb" | "rb";
        defaultPopupVisible: boolean;
        trigger: "focus" | "click" | "hover" | "contextMenu" | ("focus" | "click" | "hover" | "contextMenu")[];
        popupOffset: number;
        showArrow: boolean;
        alignPoint: boolean;
        popupHoverStay: boolean;
        blurToClose: boolean;
        clickToClose: boolean;
        clickOutsideToClose: boolean;
        unmountOnClose: boolean;
        mouseEnterDelay: number;
        mouseLeaveDelay: number;
        focusDelay: number;
        autoFitPopupWidth: boolean;
        autoFitPopupMinWidth: boolean;
        autoFixPosition: boolean;
        updateAtScroll: boolean;
        autoFitTransformOrigin: boolean;
        hideEmpty: boolean;
        autoFitPosition: boolean;
        renderToBody: boolean;
        preventFocus: boolean;
    } & {
        popupContainer?: string | HTMLElement | undefined;
        onPopupVisibleChange?: import("../_utils/types").EmitType<(popupVisible: boolean) => void> | undefined;
        popupVisible?: boolean | undefined;
        popupTranslate?: import("../trigger/utils").PopupTranslate | undefined;
        contentClass?: import("../_utils/types").ClassName | undefined;
        contentStyle?: CSSProperties | undefined;
        arrowClass?: import("../_utils/types").ClassName | undefined;
        arrowStyle?: CSSProperties | undefined;
        popupStyle?: CSSProperties | undefined;
        duration?: import("../_utils/types").AnimationDuration | undefined;
        openedCls?: string | undefined;
    }> & {
        "onUpdate:popupVisible"?: ((...args: any[]) => any) | undefined;
        onPopupVisibleChange?: ((...args: any[]) => any) | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "animationName" | "position" | "popupVisible" | "defaultPopupVisible" | "trigger" | "popupOffset" | "showArrow" | "alignPoint" | "popupHoverStay" | "blurToClose" | "clickToClose" | "clickOutsideToClose" | "unmountOnClose" | "mouseEnterDelay" | "mouseLeaveDelay" | "focusDelay" | "autoFitPopupWidth" | "autoFitPopupMinWidth" | "autoFixPosition" | "updateAtScroll" | "autoFitTransformOrigin" | "hideEmpty" | "autoFitPosition" | "renderToBody" | "preventFocus">) | undefined;
}>, {
    shape: "circle" | "square";
    autoFixFontSize: boolean;
    zIndexAscend: boolean;
}>;
export default _default;
