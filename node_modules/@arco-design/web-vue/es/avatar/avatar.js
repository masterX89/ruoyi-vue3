var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
import { defineComponent, toRefs, ref, computed, watch, onMounted, nextTick, openBlock, createElementBlock, normalizeStyle, normalizeClass, renderSlot, createCommentVNode } from "vue";
import { getPrefixCls } from "../_utils/global-config.js";
import { SHAPES, TRIGGER_TYPES } from "./constants.js";
import _export_sfc from "../_virtual/plugin-vue_export-helper";
const _sfc_main = defineComponent({
  name: "Avatar",
  props: {
    shape: {
      type: String,
      default: "circle",
      validator: (value) => {
        return SHAPES.includes(value);
      }
    },
    size: Number,
    autoFixFontSize: {
      type: Boolean,
      default: true
    },
    triggerIconStyle: {
      type: Object
    },
    triggerType: {
      type: String,
      default: "button",
      validator: (value) => {
        return TRIGGER_TYPES.includes(value);
      }
    }
  },
  emits: [
    "click"
  ],
  setup(props, { slots, emit, attrs }) {
    const prefixCls = getPrefixCls("avatar");
    const { shape, size, autoFixFontSize, triggerType, triggerIconStyle } = toRefs(props);
    const textElementRef = ref();
    const avatarElementRef = ref();
    const hasTriggerIcon = computed(() => Boolean(slots["trigger-icon"]));
    const isImage = useIsImage(slots);
    const wrapperStyle = useWrapperStyle(size.value);
    const computedTriggerIconStyle = useTriggerIconStyle({
      triggerIconStyle: triggerIconStyle == null ? void 0 : triggerIconStyle.value,
      inlineStyle: attrs.style,
      triggerType: triggerType.value
    });
    const autoFixFontSizeHandler = () => {
      const { value: element } = textElementRef;
      if (!element || !autoFixFontSize.value) {
        return;
      }
      nextTick(() => {
        const textWidth = element.clientWidth;
        const avatarWidth = size.value || avatarElementRef.value.offsetWidth;
        const scale = avatarWidth / (textWidth + 8);
        if (avatarWidth && scale < 1) {
          element.style.transform = `scale(${scale}) translateX(-50%)`;
        }
      });
    };
    watch([size, slots.default], autoFixFontSizeHandler);
    onMounted(autoFixFontSizeHandler);
    const cls = computed(() => [
      prefixCls,
      `${prefixCls}-${shape.value}`,
      {
        [`${prefixCls}-with-trigger-icon`]: hasTriggerIcon
      }
    ]);
    const onClick = (e) => {
      emit("click", e);
    };
    return {
      cls,
      onClick,
      wrapperStyle,
      prefixCls,
      textElementRef,
      avatarElementRef,
      isImage,
      hasTriggerIcon,
      computedTriggerIconStyle
    };
  }
});
const useTriggerIconStyle = ({
  triggerType,
  inlineStyle = {},
  triggerIconStyle = {}
}) => {
  let addon = {};
  if (triggerType === "button" && (!triggerIconStyle || triggerIconStyle && !triggerIconStyle.color) && inlineStyle && inlineStyle.backgroundColor) {
    addon = { color: inlineStyle.backgroundColor };
  }
  return __spreadValues(__spreadValues({}, triggerIconStyle), addon);
};
const useWrapperStyle = (size) => {
  return computed(() => size ? {
    width: `${size}px`,
    height: `${size}px`,
    fontSize: `${size / 2}px`
  } : {});
};
const useIsImage = (slots) => {
  return computed(() => {
    const child = slots.default && slots.default()[0];
    return child && ["img", "picture"].includes(child.type);
  });
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", {
    ref: "avatarElementRef",
    style: normalizeStyle(_ctx.wrapperStyle),
    class: normalizeClass(_ctx.cls),
    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
  }, [
    _ctx.isImage ? (openBlock(), createElementBlock("span", {
      key: 0,
      class: normalizeClass(`${_ctx.prefixCls}-image`)
    }, [
      renderSlot(_ctx.$slots, "default")
    ], 2)) : (openBlock(), createElementBlock("span", {
      key: 1,
      ref: "textElementRef",
      class: normalizeClass(`${_ctx.prefixCls}-text`)
    }, [
      renderSlot(_ctx.$slots, "default")
    ], 2)),
    _ctx.hasTriggerIcon ? (openBlock(), createElementBlock("div", {
      key: 2,
      class: normalizeClass(`${_ctx.prefixCls}-trigger-icon-${_ctx.triggerType}`),
      style: normalizeStyle(_ctx.computedTriggerIconStyle)
    }, [
      renderSlot(_ctx.$slots, "trigger-icon")
    ], 6)) : createCommentVNode("v-if", true)
  ], 6);
}
var _Avatar = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _Avatar as default };
