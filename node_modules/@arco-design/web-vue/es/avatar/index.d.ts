import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _Avatar from './avatar';
import _AvatarGroup from './avatar-group';
declare const Avatar: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            shape: "circle" | "square";
            autoFixFontSize: boolean;
            triggerType: "button" | "mask";
        }> & Omit<Readonly<{
            shape?: unknown;
            size?: unknown;
            autoFixFontSize?: unknown;
            triggerIconStyle?: unknown;
            triggerType?: unknown;
        } & {
            shape: "circle" | "square";
            autoFixFontSize: boolean;
            triggerType: "button" | "mask";
        } & {
            size?: number | undefined;
            triggerIconStyle?: import("vue").CSSProperties | undefined;
        }> & {
            onClick?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "shape" | "autoFixFontSize" | "triggerType">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "click", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            shape?: unknown;
            size?: unknown;
            autoFixFontSize?: unknown;
            triggerIconStyle?: unknown;
            triggerType?: unknown;
        } & {
            shape: "circle" | "square";
            autoFixFontSize: boolean;
            triggerType: "button" | "mask";
        } & {
            size?: number | undefined;
            triggerIconStyle?: import("vue").CSSProperties | undefined;
        }> & {
            onClick?: ((...args: any[]) => any) | undefined;
        }, {
            cls: import("vue").ComputedRef<(string | {
                [x: string]: import("vue").ComputedRef<boolean>;
            })[]>;
            onClick: (e: Event) => void;
            wrapperStyle: import("vue").ComputedRef<{
                width: string;
                height: string;
                fontSize: string;
            } | {
                width?: undefined;
                height?: undefined;
                fontSize?: undefined;
            }>;
            prefixCls: string;
            textElementRef: import("vue").Ref<HTMLSpanElement | undefined>;
            avatarElementRef: import("vue").Ref<HTMLDivElement | undefined>;
            isImage: import("vue").ComputedRef<boolean | undefined>;
            hasTriggerIcon: import("vue").ComputedRef<boolean>;
            computedTriggerIconStyle: import("vue").CSSProperties;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], string, {
            shape: "circle" | "square";
            autoFixFontSize: boolean;
            triggerType: "button" | "mask";
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        shape?: unknown;
        size?: unknown;
        autoFixFontSize?: unknown;
        triggerIconStyle?: unknown;
        triggerType?: unknown;
    } & {
        shape: "circle" | "square";
        autoFixFontSize: boolean;
        triggerType: "button" | "mask";
    } & {
        size?: number | undefined;
        triggerIconStyle?: import("vue").CSSProperties | undefined;
    }> & {
        onClick?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        cls: import("vue").ComputedRef<(string | {
            [x: string]: import("vue").ComputedRef<boolean>;
        })[]>;
        onClick: (e: Event) => void;
        wrapperStyle: import("vue").ComputedRef<{
            width: string;
            height: string;
            fontSize: string;
        } | {
            width?: undefined;
            height?: undefined;
            fontSize?: undefined;
        }>;
        prefixCls: string;
        textElementRef: import("vue").Ref<HTMLSpanElement | undefined>;
        avatarElementRef: import("vue").Ref<HTMLDivElement | undefined>;
        isImage: import("vue").ComputedRef<boolean | undefined>;
        hasTriggerIcon: import("vue").ComputedRef<boolean>;
        computedTriggerIconStyle: import("vue").CSSProperties;
    }> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    shape?: unknown;
    size?: unknown;
    autoFixFontSize?: unknown;
    triggerIconStyle?: unknown;
    triggerType?: unknown;
} & {
    shape: "circle" | "square";
    autoFixFontSize: boolean;
    triggerType: "button" | "mask";
} & {
    size?: number | undefined;
    triggerIconStyle?: import("vue").CSSProperties | undefined;
}> & {
    onClick?: ((...args: any[]) => any) | undefined;
}, {
    cls: import("vue").ComputedRef<(string | {
        [x: string]: import("vue").ComputedRef<boolean>;
    })[]>;
    onClick: (e: Event) => void;
    wrapperStyle: import("vue").ComputedRef<{
        width: string;
        height: string;
        fontSize: string;
    } | {
        width?: undefined;
        height?: undefined;
        fontSize?: undefined;
    }>;
    prefixCls: string;
    textElementRef: import("vue").Ref<HTMLSpanElement | undefined>;
    avatarElementRef: import("vue").Ref<HTMLDivElement | undefined>;
    isImage: import("vue").ComputedRef<boolean | undefined>;
    hasTriggerIcon: import("vue").ComputedRef<boolean>;
    computedTriggerIconStyle: import("vue").CSSProperties;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", {
    shape: "circle" | "square";
    autoFixFontSize: boolean;
    triggerType: "button" | "mask";
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    Group: import("vue").DefineComponent<{
        shape: {
            type: import("vue").PropType<"circle" | "square">;
            default: string;
            validator: (value: "circle" | "square") => boolean;
        };
        size: NumberConstructor;
        autoFixFontSize: {
            type: BooleanConstructor;
            default: boolean;
        };
        maxCount: {
            type: NumberConstructor;
        };
        zIndexAscend: {
            type: BooleanConstructor;
            default: boolean;
        };
        maxStyle: {
            type: import("vue").PropType<import("vue").CSSProperties>;
        };
        maxPopoverTriggerProps: {
            type: import("vue").PropType<Partial<{
                disabled: boolean;
                animationName: string;
                position: "br" | "rt" | "tr" | "left" | "right" | "bottom" | "top" | "tl" | "bl" | "lt" | "lb" | "rb";
                popupVisible: boolean;
                defaultPopupVisible: boolean;
                trigger: "focus" | "click" | "hover" | "contextMenu" | ("focus" | "click" | "hover" | "contextMenu")[];
                popupOffset: number;
                showArrow: boolean;
                alignPoint: boolean;
                popupHoverStay: boolean;
                blurToClose: boolean;
                clickToClose: boolean;
                clickOutsideToClose: boolean;
                unmountOnClose: boolean;
                mouseEnterDelay: number;
                mouseLeaveDelay: number;
                focusDelay: number;
                autoFitPopupWidth: boolean;
                autoFitPopupMinWidth: boolean;
                autoFixPosition: boolean;
                updateAtScroll: boolean;
                autoFitTransformOrigin: boolean;
                hideEmpty: boolean;
                autoFitPosition: boolean;
                renderToBody: boolean;
                preventFocus: boolean;
            }> & Omit<Readonly<{
                popupVisible?: unknown;
                defaultPopupVisible?: unknown;
                trigger?: unknown;
                position?: unknown;
                disabled?: unknown;
                popupOffset?: unknown;
                popupTranslate?: unknown;
                showArrow?: unknown;
                alignPoint?: unknown;
                popupHoverStay?: unknown;
                blurToClose?: unknown;
                clickToClose?: unknown;
                clickOutsideToClose?: unknown;
                unmountOnClose?: unknown;
                contentClass?: unknown;
                contentStyle?: unknown;
                arrowClass?: unknown;
                arrowStyle?: unknown;
                popupStyle?: unknown;
                animationName?: unknown;
                duration?: unknown;
                mouseEnterDelay?: unknown;
                mouseLeaveDelay?: unknown;
                focusDelay?: unknown;
                autoFitPopupWidth?: unknown;
                autoFitPopupMinWidth?: unknown;
                autoFixPosition?: unknown;
                popupContainer?: unknown;
                updateAtScroll?: unknown;
                autoFitTransformOrigin?: unknown;
                hideEmpty?: unknown;
                openedCls?: unknown;
                autoFitPosition?: unknown;
                renderToBody?: unknown;
                preventFocus?: unknown;
                onPopupVisibleChange?: unknown;
            } & {
                disabled: boolean;
                animationName: string;
                position: "br" | "rt" | "tr" | "left" | "right" | "bottom" | "top" | "tl" | "bl" | "lt" | "lb" | "rb";
                defaultPopupVisible: boolean;
                trigger: "focus" | "click" | "hover" | "contextMenu" | ("focus" | "click" | "hover" | "contextMenu")[];
                popupOffset: number;
                showArrow: boolean;
                alignPoint: boolean;
                popupHoverStay: boolean;
                blurToClose: boolean;
                clickToClose: boolean;
                clickOutsideToClose: boolean;
                unmountOnClose: boolean;
                mouseEnterDelay: number;
                mouseLeaveDelay: number;
                focusDelay: number;
                autoFitPopupWidth: boolean;
                autoFitPopupMinWidth: boolean;
                autoFixPosition: boolean;
                updateAtScroll: boolean;
                autoFitTransformOrigin: boolean;
                hideEmpty: boolean;
                autoFitPosition: boolean;
                renderToBody: boolean;
                preventFocus: boolean;
            } & {
                popupContainer?: string | HTMLElement | undefined;
                onPopupVisibleChange?: import("../_utils/types").EmitType<(popupVisible: boolean) => void> | undefined;
                popupVisible?: boolean | undefined;
                popupTranslate?: import("../trigger/utils").PopupTranslate | undefined;
                contentClass?: import("../_utils/types").ClassName | undefined;
                contentStyle?: import("vue").CSSProperties | undefined;
                arrowClass?: import("../_utils/types").ClassName | undefined;
                arrowStyle?: import("vue").CSSProperties | undefined;
                popupStyle?: import("vue").CSSProperties | undefined;
                duration?: import("../_utils/types").AnimationDuration | undefined;
                openedCls?: string | undefined;
            }> & {
                "onUpdate:popupVisible"?: ((...args: any[]) => any) | undefined;
                onPopupVisibleChange?: ((...args: any[]) => any) | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "animationName" | "position" | "popupVisible" | "defaultPopupVisible" | "trigger" | "popupOffset" | "showArrow" | "alignPoint" | "popupHoverStay" | "blurToClose" | "clickToClose" | "clickOutsideToClose" | "unmountOnClose" | "mouseEnterDelay" | "mouseLeaveDelay" | "focusDelay" | "autoFitPopupWidth" | "autoFitPopupMinWidth" | "autoFixPosition" | "updateAtScroll" | "autoFitTransformOrigin" | "hideEmpty" | "autoFitPosition" | "renderToBody" | "preventFocus">>;
        };
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        shape?: unknown;
        size?: unknown;
        autoFixFontSize?: unknown;
        maxCount?: unknown;
        zIndexAscend?: unknown;
        maxStyle?: unknown;
        maxPopoverTriggerProps?: unknown;
    } & {
        shape: "circle" | "square";
        autoFixFontSize: boolean;
        zIndexAscend: boolean;
    } & {
        size?: number | undefined;
        maxCount?: number | undefined;
        maxStyle?: import("vue").CSSProperties | undefined;
        maxPopoverTriggerProps?: (Partial<{
            disabled: boolean;
            animationName: string;
            position: "br" | "rt" | "tr" | "left" | "right" | "bottom" | "top" | "tl" | "bl" | "lt" | "lb" | "rb";
            popupVisible: boolean;
            defaultPopupVisible: boolean;
            trigger: "focus" | "click" | "hover" | "contextMenu" | ("focus" | "click" | "hover" | "contextMenu")[];
            popupOffset: number;
            showArrow: boolean;
            alignPoint: boolean;
            popupHoverStay: boolean;
            blurToClose: boolean;
            clickToClose: boolean;
            clickOutsideToClose: boolean;
            unmountOnClose: boolean;
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            focusDelay: number;
            autoFitPopupWidth: boolean;
            autoFitPopupMinWidth: boolean;
            autoFixPosition: boolean;
            updateAtScroll: boolean;
            autoFitTransformOrigin: boolean;
            hideEmpty: boolean;
            autoFitPosition: boolean;
            renderToBody: boolean;
            preventFocus: boolean;
        }> & Omit<Readonly<{
            popupVisible?: unknown;
            defaultPopupVisible?: unknown;
            trigger?: unknown;
            position?: unknown;
            disabled?: unknown;
            popupOffset?: unknown;
            popupTranslate?: unknown;
            showArrow?: unknown;
            alignPoint?: unknown;
            popupHoverStay?: unknown;
            blurToClose?: unknown;
            clickToClose?: unknown;
            clickOutsideToClose?: unknown;
            unmountOnClose?: unknown;
            contentClass?: unknown;
            contentStyle?: unknown;
            arrowClass?: unknown;
            arrowStyle?: unknown;
            popupStyle?: unknown;
            animationName?: unknown;
            duration?: unknown;
            mouseEnterDelay?: unknown;
            mouseLeaveDelay?: unknown;
            focusDelay?: unknown;
            autoFitPopupWidth?: unknown;
            autoFitPopupMinWidth?: unknown;
            autoFixPosition?: unknown;
            popupContainer?: unknown;
            updateAtScroll?: unknown;
            autoFitTransformOrigin?: unknown;
            hideEmpty?: unknown;
            openedCls?: unknown;
            autoFitPosition?: unknown;
            renderToBody?: unknown;
            preventFocus?: unknown;
            onPopupVisibleChange?: unknown;
        } & {
            disabled: boolean;
            animationName: string;
            position: "br" | "rt" | "tr" | "left" | "right" | "bottom" | "top" | "tl" | "bl" | "lt" | "lb" | "rb";
            defaultPopupVisible: boolean;
            trigger: "focus" | "click" | "hover" | "contextMenu" | ("focus" | "click" | "hover" | "contextMenu")[];
            popupOffset: number;
            showArrow: boolean;
            alignPoint: boolean;
            popupHoverStay: boolean;
            blurToClose: boolean;
            clickToClose: boolean;
            clickOutsideToClose: boolean;
            unmountOnClose: boolean;
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            focusDelay: number;
            autoFitPopupWidth: boolean;
            autoFitPopupMinWidth: boolean;
            autoFixPosition: boolean;
            updateAtScroll: boolean;
            autoFitTransformOrigin: boolean;
            hideEmpty: boolean;
            autoFitPosition: boolean;
            renderToBody: boolean;
            preventFocus: boolean;
        } & {
            popupContainer?: string | HTMLElement | undefined;
            onPopupVisibleChange?: import("../_utils/types").EmitType<(popupVisible: boolean) => void> | undefined;
            popupVisible?: boolean | undefined;
            popupTranslate?: import("../trigger/utils").PopupTranslate | undefined;
            contentClass?: import("../_utils/types").ClassName | undefined;
            contentStyle?: import("vue").CSSProperties | undefined;
            arrowClass?: import("../_utils/types").ClassName | undefined;
            arrowStyle?: import("vue").CSSProperties | undefined;
            popupStyle?: import("vue").CSSProperties | undefined;
            duration?: import("../_utils/types").AnimationDuration | undefined;
            openedCls?: string | undefined;
        }> & {
            "onUpdate:popupVisible"?: ((...args: any[]) => any) | undefined;
            onPopupVisibleChange?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "animationName" | "position" | "popupVisible" | "defaultPopupVisible" | "trigger" | "popupOffset" | "showArrow" | "alignPoint" | "popupHoverStay" | "blurToClose" | "clickToClose" | "clickOutsideToClose" | "unmountOnClose" | "mouseEnterDelay" | "mouseLeaveDelay" | "focusDelay" | "autoFitPopupWidth" | "autoFitPopupMinWidth" | "autoFixPosition" | "updateAtScroll" | "autoFitTransformOrigin" | "hideEmpty" | "autoFitPosition" | "renderToBody" | "preventFocus">) | undefined;
    }>, {
        shape: "circle" | "square";
        autoFixFontSize: boolean;
        zIndexAscend: boolean;
    }>;
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type AvatarInstance = InstanceType<typeof _Avatar>;
export declare type AvatarGroupInstance = InstanceType<typeof _AvatarGroup>;
export { _AvatarGroup as AvatarGroup };
export default Avatar;
