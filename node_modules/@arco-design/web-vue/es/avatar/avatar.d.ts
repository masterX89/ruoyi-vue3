import { CSSProperties, PropType } from 'vue';
import { ShapeType, TriggerType } from './constants';
declare const _default: import("vue").DefineComponent<{
    shape: {
        type: PropType<"circle" | "square">;
        default: string;
        validator: (value: ShapeType) => boolean;
    };
    size: NumberConstructor;
    autoFixFontSize: {
        type: BooleanConstructor;
        default: boolean;
    };
    triggerIconStyle: {
        type: PropType<CSSProperties>;
    };
    triggerType: {
        type: PropType<"button" | "mask">;
        default: string;
        validator: (value: TriggerType) => boolean;
    };
}, {
    cls: import("vue").ComputedRef<(string | {
        [x: string]: import("vue").ComputedRef<boolean>;
    })[]>;
    onClick: (e: Event) => void;
    wrapperStyle: import("vue").ComputedRef<{
        width: string;
        height: string;
        fontSize: string;
    } | {
        width?: undefined;
        height?: undefined;
        fontSize?: undefined;
    }>;
    prefixCls: string;
    textElementRef: import("vue").Ref<HTMLSpanElement | undefined>;
    avatarElementRef: import("vue").Ref<HTMLDivElement | undefined>;
    isImage: import("vue").ComputedRef<boolean | undefined>;
    hasTriggerIcon: import("vue").ComputedRef<boolean>;
    computedTriggerIconStyle: CSSProperties;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    shape?: unknown;
    size?: unknown;
    autoFixFontSize?: unknown;
    triggerIconStyle?: unknown;
    triggerType?: unknown;
} & {
    shape: "circle" | "square";
    autoFixFontSize: boolean;
    triggerType: "button" | "mask";
} & {
    size?: number | undefined;
    triggerIconStyle?: CSSProperties | undefined;
}> & {
    onClick?: ((...args: any[]) => any) | undefined;
}, {
    shape: "circle" | "square";
    autoFixFontSize: boolean;
    triggerType: "button" | "mask";
}>;
export default _default;
