import { defineComponent, inject, ref, computed, createVNode, mergeProps } from "vue";
import Checkbox from "../checkbox/index.js";
import Radio from "../radio/index.js";
import { getPrefixCls } from "../_utils/global-config.js";
import IconRight from "../icon/icon-right/index.js";
import IconLoading from "../icon/icon-loading/index.js";
import { getCheckedStatus } from "./utils.js";
import { isFunction } from "../_utils/is.js";
import { cascaderInjectionKey } from "./context.js";
var CascaderOption = defineComponent({
  name: "CascaderOption",
  props: {
    option: {
      type: Object,
      required: true
    },
    computedKeys: {
      type: Array,
      required: true
    },
    active: Boolean,
    multiple: Boolean,
    expandTrigger: String,
    checkStrictly: Boolean,
    searchOption: Boolean
  },
  setup(props) {
    const prefixCls = getPrefixCls("cascader-option");
    const cascaderCtx = inject(cascaderInjectionKey, void 0);
    const isLoading = ref(false);
    const events = {};
    const handlePathChange = (ev) => {
      if (isFunction(cascaderCtx == null ? void 0 : cascaderCtx.loadMore) && !props.option.isLeaf) {
        const {
          isLeaf,
          children,
          key
        } = props.option;
        if (!isLeaf && !children) {
          isLoading.value = true;
          new Promise((resolve) => {
            cascaderCtx == null ? void 0 : cascaderCtx.loadMore(props.option, resolve);
          }).then((children2) => {
            isLoading.value = false;
            if (children2) {
              cascaderCtx == null ? void 0 : cascaderCtx.addLazyLoadOptions(children2, key);
            }
          });
        }
      }
      cascaderCtx == null ? void 0 : cascaderCtx.setSelectedPath(props.option.key);
    };
    if (!props.option.disabled) {
      events.onMouseenter = [() => cascaderCtx == null ? void 0 : cascaderCtx.setActiveKey(props.option.key)];
      events.onMouseleave = () => cascaderCtx == null ? void 0 : cascaderCtx.setActiveKey();
      if (props.option.isLeaf && !props.multiple) {
        events.onClick = (ev) => {
          handlePathChange();
          cascaderCtx == null ? void 0 : cascaderCtx.onClickOption(props.option);
        };
      } else if (props.expandTrigger === "hover") {
        events.onMouseenter.push((ev) => handlePathChange());
      } else {
        events.onClick = (ev) => handlePathChange();
      }
    }
    const cls = computed(() => [prefixCls, {
      [`${prefixCls}-active`]: props.active,
      [`${prefixCls}-disabled`]: props.option.disabled
    }]);
    const checkedStatus = computed(() => {
      if (props.checkStrictly) {
        return {
          checked: props.computedKeys.includes(props.option.key),
          indeterminate: false
        };
      }
      return getCheckedStatus(props.option, props.computedKeys);
    });
    const renderLabelContent = () => {
      if (isFunction(props.option.render)) {
        return props.option.render();
      }
      return props.option.label;
    };
    const renderIcon = () => {
      if (isLoading.value) {
        return createVNode(IconLoading, null, null);
      }
      if (!props.searchOption && !props.option.isLeaf) {
        return createVNode(IconRight, null, null);
      }
      return null;
    };
    return () => createVNode("li", mergeProps({
      "class": cls.value
    }, events), [props.multiple && createVNode(Checkbox, {
      "modelValue": checkedStatus.value.checked,
      "indeterminate": checkedStatus.value.indeterminate,
      "disabled": props.option.disabled,
      "uninjectGroupContext": true,
      "onClick": (ev) => {
        ev.stopPropagation();
        handlePathChange();
        cascaderCtx == null ? void 0 : cascaderCtx.onClickOption(props.option, !checkedStatus.value.checked);
      }
    }, null), props.checkStrictly && !props.multiple && createVNode(Radio, {
      "modelValue": props.computedKeys.includes(props.option.key),
      "disabled": props.option.disabled,
      "uninjectGroupContext": true,
      "onClick": (ev) => {
        ev.stopPropagation();
        handlePathChange();
        cascaderCtx == null ? void 0 : cascaderCtx.onClickOption(props.option, true);
      }
    }, null), createVNode("div", {
      "class": `${prefixCls}-label`
    }, [renderLabelContent(), renderIcon()])]);
  }
});
export { CascaderOption as default };
