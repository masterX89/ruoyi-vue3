import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _Cascader from './cascader';
declare const Cascader: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            options: import("./interface").CascaderOption[];
            inputValue: string;
            disabled: boolean;
            size: "small" | "mini" | "medium" | "large";
            error: boolean;
            defaultInputValue: string;
            defaultValue: string | number | (string | number)[] | (string | number | (string | number)[])[] | undefined;
            allowClear: boolean;
            multiple: boolean;
            loading: boolean;
            allowSearch: boolean;
            maxTagCount: number;
            popupVisible: boolean;
            defaultPopupVisible: boolean;
            expandTrigger: string;
            checkStrictly: boolean;
            pathMode: boolean;
        }> & Omit<Readonly<{
            pathMode?: unknown;
            multiple?: unknown;
            modelValue?: unknown;
            defaultValue?: unknown;
            options?: unknown;
            disabled?: unknown;
            error?: unknown;
            size?: unknown;
            allowSearch?: unknown;
            allowClear?: unknown;
            inputValue?: unknown;
            defaultInputValue?: unknown;
            popupVisible?: unknown;
            expandTrigger?: unknown;
            defaultPopupVisible?: unknown;
            placeholder?: unknown;
            filterOption?: unknown;
            popupContainer?: unknown;
            maxTagCount?: unknown;
            formatLabel?: unknown;
            triggerProps?: unknown;
            checkStrictly?: unknown;
            loadMore?: unknown;
            loading?: unknown;
            onChange?: unknown;
            onInputValueChange?: unknown;
            onPopupVisibleChange?: unknown;
            onClear?: unknown;
            onSearch?: unknown;
        } & {
            options: import("./interface").CascaderOption[];
            disabled: boolean;
            size: "small" | "mini" | "medium" | "large";
            error: boolean;
            defaultInputValue: string;
            defaultValue: string | number | (string | number)[] | (string | number | (string | number)[])[] | undefined;
            allowClear: boolean;
            multiple: boolean;
            loading: boolean;
            allowSearch: boolean;
            maxTagCount: number;
            defaultPopupVisible: boolean;
            expandTrigger: string;
            checkStrictly: boolean;
            pathMode: boolean;
        } & {
            inputValue?: string | undefined;
            filterOption?: ((inputValue: string, optionInfo: import("./interface").CascaderOptionInfo) => boolean) | undefined;
            onInputValueChange?: import("../_utils/types").EmitType<(inputValue: string) => void> | undefined;
            modelValue?: string | number | (string | number)[] | (string | number | (string | number)[])[] | undefined;
            formatLabel?: ((options: import("./interface").CascaderOptionInfo[]) => string) | undefined;
            placeholder?: string | undefined;
            onChange?: import("../_utils/types").EmitType<(value: string | number | (string | number)[] | (string | number | (string | number)[])[] | undefined) => void> | undefined;
            onClear?: import("../_utils/types").EmitType<() => void> | undefined;
            popupContainer?: string | HTMLElement | null | undefined;
            onPopupVisibleChange?: import("../_utils/types").EmitType<(popupVisible: boolean) => void> | undefined;
            popupVisible?: boolean | undefined;
            loadMore?: ((option: import("./interface").CascaderOptionInfo, done: (children?: import("./interface").CascaderOption[] | undefined) => void) => void) | undefined;
            onSearch?: import("../_utils/types").EmitType<(inputValue: string) => void> | undefined;
            triggerProps?: (Partial<{
                disabled: boolean;
                animationName: string;
                position: "br" | "rt" | "tr" | "left" | "right" | "bottom" | "top" | "tl" | "bl" | "lt" | "lb" | "rb";
                popupVisible: boolean;
                defaultPopupVisible: boolean;
                trigger: "focus" | "click" | "hover" | "contextMenu" | ("focus" | "click" | "hover" | "contextMenu")[];
                popupOffset: number;
                showArrow: boolean;
                alignPoint: boolean;
                popupHoverStay: boolean;
                blurToClose: boolean;
                clickToClose: boolean;
                clickOutsideToClose: boolean;
                unmountOnClose: boolean;
                mouseEnterDelay: number;
                mouseLeaveDelay: number;
                focusDelay: number;
                autoFitPopupWidth: boolean;
                autoFitPopupMinWidth: boolean;
                autoFixPosition: boolean;
                updateAtScroll: boolean;
                autoFitTransformOrigin: boolean;
                hideEmpty: boolean;
                autoFitPosition: boolean;
                renderToBody: boolean;
                preventFocus: boolean;
            }> & Omit<Readonly<{
                popupVisible?: unknown;
                defaultPopupVisible?: unknown;
                trigger?: unknown;
                position?: unknown;
                disabled?: unknown;
                popupOffset?: unknown;
                popupTranslate?: unknown;
                showArrow?: unknown;
                alignPoint?: unknown;
                popupHoverStay?: unknown;
                blurToClose?: unknown;
                clickToClose?: unknown;
                clickOutsideToClose?: unknown;
                unmountOnClose?: unknown;
                contentClass?: unknown;
                contentStyle?: unknown;
                arrowClass?: unknown;
                arrowStyle?: unknown;
                popupStyle?: unknown;
                animationName?: unknown;
                duration?: unknown;
                mouseEnterDelay?: unknown;
                mouseLeaveDelay?: unknown;
                focusDelay?: unknown;
                autoFitPopupWidth?: unknown;
                autoFitPopupMinWidth?: unknown;
                autoFixPosition?: unknown;
                popupContainer?: unknown;
                updateAtScroll?: unknown;
                autoFitTransformOrigin?: unknown;
                hideEmpty?: unknown;
                openedCls?: unknown;
                autoFitPosition?: unknown;
                renderToBody?: unknown;
                preventFocus?: unknown;
                onPopupVisibleChange?: unknown;
            } & {
                disabled: boolean;
                animationName: string;
                position: "br" | "rt" | "tr" | "left" | "right" | "bottom" | "top" | "tl" | "bl" | "lt" | "lb" | "rb";
                defaultPopupVisible: boolean;
                trigger: "focus" | "click" | "hover" | "contextMenu" | ("focus" | "click" | "hover" | "contextMenu")[];
                popupOffset: number;
                showArrow: boolean;
                alignPoint: boolean;
                popupHoverStay: boolean;
                blurToClose: boolean;
                clickToClose: boolean;
                clickOutsideToClose: boolean;
                unmountOnClose: boolean;
                mouseEnterDelay: number;
                mouseLeaveDelay: number;
                focusDelay: number;
                autoFitPopupWidth: boolean;
                autoFitPopupMinWidth: boolean;
                autoFixPosition: boolean;
                updateAtScroll: boolean;
                autoFitTransformOrigin: boolean;
                hideEmpty: boolean;
                autoFitPosition: boolean;
                renderToBody: boolean;
                preventFocus: boolean;
            } & {
                popupContainer?: string | HTMLElement | undefined;
                onPopupVisibleChange?: import("../_utils/types").EmitType<(popupVisible: boolean) => void> | undefined;
                popupVisible?: boolean | undefined;
                popupTranslate?: import("../trigger/utils").PopupTranslate | undefined;
                contentClass?: import("../_utils/types").ClassName | undefined;
                contentStyle?: import("vue").CSSProperties | undefined;
                arrowClass?: import("../_utils/types").ClassName | undefined;
                arrowStyle?: import("vue").CSSProperties | undefined;
                popupStyle?: import("vue").CSSProperties | undefined;
                duration?: import("../_utils/types").AnimationDuration | undefined;
                openedCls?: string | undefined;
            }> & {
                "onUpdate:popupVisible"?: ((...args: any[]) => any) | undefined;
                onPopupVisibleChange?: ((...args: any[]) => any) | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "animationName" | "position" | "popupVisible" | "defaultPopupVisible" | "trigger" | "popupOffset" | "showArrow" | "alignPoint" | "popupHoverStay" | "blurToClose" | "clickToClose" | "clickOutsideToClose" | "unmountOnClose" | "mouseEnterDelay" | "mouseLeaveDelay" | "focusDelay" | "autoFitPopupWidth" | "autoFitPopupMinWidth" | "autoFixPosition" | "updateAtScroll" | "autoFitTransformOrigin" | "hideEmpty" | "autoFitPosition" | "renderToBody" | "preventFocus">) | undefined;
        }> & {
            onInputValueChange?: ((...args: any[]) => any) | undefined;
            onFocus?: ((...args: any[]) => any) | undefined;
            onBlur?: ((...args: any[]) => any) | undefined;
            onChange?: ((...args: any[]) => any) | undefined;
            onClear?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            onPopupVisibleChange?: ((...args: any[]) => any) | undefined;
            onSearch?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "options" | "inputValue" | "disabled" | "size" | "error" | "defaultInputValue" | "defaultValue" | "allowClear" | "multiple" | "loading" | "allowSearch" | "maxTagCount" | "popupVisible" | "defaultPopupVisible" | "expandTrigger" | "checkStrictly" | "pathMode">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "inputValueChange" | "focus" | "blur" | "change" | "clear" | "update:modelValue" | "popupVisibleChange" | "search", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            pathMode?: unknown;
            multiple?: unknown;
            modelValue?: unknown;
            defaultValue?: unknown;
            options?: unknown;
            disabled?: unknown;
            error?: unknown;
            size?: unknown;
            allowSearch?: unknown;
            allowClear?: unknown;
            inputValue?: unknown;
            defaultInputValue?: unknown;
            popupVisible?: unknown;
            expandTrigger?: unknown;
            defaultPopupVisible?: unknown;
            placeholder?: unknown;
            filterOption?: unknown;
            popupContainer?: unknown;
            maxTagCount?: unknown;
            formatLabel?: unknown;
            triggerProps?: unknown;
            checkStrictly?: unknown;
            loadMore?: unknown;
            loading?: unknown;
            onChange?: unknown;
            onInputValueChange?: unknown;
            onPopupVisibleChange?: unknown;
            onClear?: unknown;
            onSearch?: unknown;
        } & {
            options: import("./interface").CascaderOption[];
            disabled: boolean;
            size: "small" | "mini" | "medium" | "large";
            error: boolean;
            defaultInputValue: string;
            defaultValue: string | number | (string | number)[] | (string | number | (string | number)[])[] | undefined;
            allowClear: boolean;
            multiple: boolean;
            loading: boolean;
            allowSearch: boolean;
            maxTagCount: number;
            defaultPopupVisible: boolean;
            expandTrigger: string;
            checkStrictly: boolean;
            pathMode: boolean;
        } & {
            inputValue?: string | undefined;
            filterOption?: ((inputValue: string, optionInfo: import("./interface").CascaderOptionInfo) => boolean) | undefined;
            onInputValueChange?: import("../_utils/types").EmitType<(inputValue: string) => void> | undefined;
            modelValue?: string | number | (string | number)[] | (string | number | (string | number)[])[] | undefined;
            formatLabel?: ((options: import("./interface").CascaderOptionInfo[]) => string) | undefined;
            placeholder?: string | undefined;
            onChange?: import("../_utils/types").EmitType<(value: string | number | (string | number)[] | (string | number | (string | number)[])[] | undefined) => void> | undefined;
            onClear?: import("../_utils/types").EmitType<() => void> | undefined;
            popupContainer?: string | HTMLElement | null | undefined;
            onPopupVisibleChange?: import("../_utils/types").EmitType<(popupVisible: boolean) => void> | undefined;
            popupVisible?: boolean | undefined;
            loadMore?: ((option: import("./interface").CascaderOptionInfo, done: (children?: import("./interface").CascaderOption[] | undefined) => void) => void) | undefined;
            onSearch?: import("../_utils/types").EmitType<(inputValue: string) => void> | undefined;
            triggerProps?: (Partial<{
                disabled: boolean;
                animationName: string;
                position: "br" | "rt" | "tr" | "left" | "right" | "bottom" | "top" | "tl" | "bl" | "lt" | "lb" | "rb";
                popupVisible: boolean;
                defaultPopupVisible: boolean;
                trigger: "focus" | "click" | "hover" | "contextMenu" | ("focus" | "click" | "hover" | "contextMenu")[];
                popupOffset: number;
                showArrow: boolean;
                alignPoint: boolean;
                popupHoverStay: boolean;
                blurToClose: boolean;
                clickToClose: boolean;
                clickOutsideToClose: boolean;
                unmountOnClose: boolean;
                mouseEnterDelay: number;
                mouseLeaveDelay: number;
                focusDelay: number;
                autoFitPopupWidth: boolean;
                autoFitPopupMinWidth: boolean;
                autoFixPosition: boolean;
                updateAtScroll: boolean;
                autoFitTransformOrigin: boolean;
                hideEmpty: boolean;
                autoFitPosition: boolean;
                renderToBody: boolean;
                preventFocus: boolean;
            }> & Omit<Readonly<{
                popupVisible?: unknown;
                defaultPopupVisible?: unknown;
                trigger?: unknown;
                position?: unknown;
                disabled?: unknown;
                popupOffset?: unknown;
                popupTranslate?: unknown;
                showArrow?: unknown;
                alignPoint?: unknown;
                popupHoverStay?: unknown;
                blurToClose?: unknown;
                clickToClose?: unknown;
                clickOutsideToClose?: unknown;
                unmountOnClose?: unknown;
                contentClass?: unknown;
                contentStyle?: unknown;
                arrowClass?: unknown;
                arrowStyle?: unknown;
                popupStyle?: unknown;
                animationName?: unknown;
                duration?: unknown;
                mouseEnterDelay?: unknown;
                mouseLeaveDelay?: unknown;
                focusDelay?: unknown;
                autoFitPopupWidth?: unknown;
                autoFitPopupMinWidth?: unknown;
                autoFixPosition?: unknown;
                popupContainer?: unknown;
                updateAtScroll?: unknown;
                autoFitTransformOrigin?: unknown;
                hideEmpty?: unknown;
                openedCls?: unknown;
                autoFitPosition?: unknown;
                renderToBody?: unknown;
                preventFocus?: unknown;
                onPopupVisibleChange?: unknown;
            } & {
                disabled: boolean;
                animationName: string;
                position: "br" | "rt" | "tr" | "left" | "right" | "bottom" | "top" | "tl" | "bl" | "lt" | "lb" | "rb";
                defaultPopupVisible: boolean;
                trigger: "focus" | "click" | "hover" | "contextMenu" | ("focus" | "click" | "hover" | "contextMenu")[];
                popupOffset: number;
                showArrow: boolean;
                alignPoint: boolean;
                popupHoverStay: boolean;
                blurToClose: boolean;
                clickToClose: boolean;
                clickOutsideToClose: boolean;
                unmountOnClose: boolean;
                mouseEnterDelay: number;
                mouseLeaveDelay: number;
                focusDelay: number;
                autoFitPopupWidth: boolean;
                autoFitPopupMinWidth: boolean;
                autoFixPosition: boolean;
                updateAtScroll: boolean;
                autoFitTransformOrigin: boolean;
                hideEmpty: boolean;
                autoFitPosition: boolean;
                renderToBody: boolean;
                preventFocus: boolean;
            } & {
                popupContainer?: string | HTMLElement | undefined;
                onPopupVisibleChange?: import("../_utils/types").EmitType<(popupVisible: boolean) => void> | undefined;
                popupVisible?: boolean | undefined;
                popupTranslate?: import("../trigger/utils").PopupTranslate | undefined;
                contentClass?: import("../_utils/types").ClassName | undefined;
                contentStyle?: import("vue").CSSProperties | undefined;
                arrowClass?: import("../_utils/types").ClassName | undefined;
                arrowStyle?: import("vue").CSSProperties | undefined;
                popupStyle?: import("vue").CSSProperties | undefined;
                duration?: import("../_utils/types").AnimationDuration | undefined;
                openedCls?: string | undefined;
            }> & {
                "onUpdate:popupVisible"?: ((...args: any[]) => any) | undefined;
                onPopupVisibleChange?: ((...args: any[]) => any) | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "animationName" | "position" | "popupVisible" | "defaultPopupVisible" | "trigger" | "popupOffset" | "showArrow" | "alignPoint" | "popupHoverStay" | "blurToClose" | "clickToClose" | "clickOutsideToClose" | "unmountOnClose" | "mouseEnterDelay" | "mouseLeaveDelay" | "focusDelay" | "autoFitPopupWidth" | "autoFitPopupMinWidth" | "autoFixPosition" | "updateAtScroll" | "autoFitTransformOrigin" | "hideEmpty" | "autoFitPosition" | "renderToBody" | "preventFocus">) | undefined;
        }> & {
            onInputValueChange?: ((...args: any[]) => any) | undefined;
            onFocus?: ((...args: any[]) => any) | undefined;
            onBlur?: ((...args: any[]) => any) | undefined;
            onChange?: ((...args: any[]) => any) | undefined;
            onClear?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            onPopupVisibleChange?: ((...args: any[]) => any) | undefined;
            onSearch?: ((...args: any[]) => any) | undefined;
        }, {
            optionInfos: import("vue").Ref<{
                label: string;
                disabled: boolean;
                key: string;
                level: number;
                index: number;
                isLeaf: boolean;
                path: any[];
                children?: any[] | undefined;
                parent?: any | undefined;
                totalLeafOptions?: number | undefined;
                value: string | number;
                render?: import("vue").RenderFunction | undefined;
                tagProps?: {
                    size?: "small" | "mini" | "medium" | "large" | undefined;
                    defaultChecked?: boolean | undefined;
                    loading?: boolean | undefined;
                    visible?: boolean | undefined;
                    defaultVisible?: boolean | undefined;
                    closable?: boolean | undefined;
                    checkable?: boolean | undefined;
                    checked?: boolean | undefined;
                    style?: unknown;
                    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
                    "onUpdate:checked"?: ((...args: any[]) => any) | undefined;
                    readonly onClose?: (import("../_utils/types").EmitType<(event: MouseEvent) => void> & ((...args: any[]) => any)) | undefined;
                    readonly onCheck?: (import("../_utils/types").EmitType<(checked: boolean, event: MouseEvent) => void> & ((...args: any[]) => any)) | undefined;
                    readonly color?: string | undefined;
                    key?: string | number | symbol | undefined;
                    ref?: any;
                    onVnodeBeforeMount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                        [key: string]: any;
                    }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                        [key: string]: any;
                    }>) => void)[] | undefined;
                    onVnodeMounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                        [key: string]: any;
                    }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                        [key: string]: any;
                    }>) => void)[] | undefined;
                    onVnodeBeforeUpdate?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                        [key: string]: any;
                    }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                        [key: string]: any;
                    }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                        [key: string]: any;
                    }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                        [key: string]: any;
                    }>) => void)[] | undefined;
                    onVnodeUpdated?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                        [key: string]: any;
                    }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                        [key: string]: any;
                    }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                        [key: string]: any;
                    }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                        [key: string]: any;
                    }>) => void)[] | undefined;
                    onVnodeBeforeUnmount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                        [key: string]: any;
                    }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                        [key: string]: any;
                    }>) => void)[] | undefined;
                    onVnodeUnmounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                        [key: string]: any;
                    }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                        [key: string]: any;
                    }>) => void)[] | undefined;
                    class?: unknown;
                } | undefined;
            }[]>;
            computedKeys: import("vue").ComputedRef<string[]>;
            filteredLeafOptions: import("vue").ComputedRef<import("./interface").CascaderOptionInfo[]>;
            selectedPath: import("vue").Ref<string[]>;
            activeKey: import("vue").Ref<string | undefined>;
            displayColumns: import("vue").ComputedRef<import("./interface").CascaderOptionInfo[][]>;
            computedInputValue: import("vue").ComputedRef<string>;
            computedPopupVisible: import("vue").ComputedRef<boolean>;
            handleClear: (e: MouseEvent) => void;
            selectViewValue: import("vue").ComputedRef<{
                value: string;
                label: string;
                closable: boolean;
                tagProps: (Partial<{
                    size: "small" | "mini" | "medium" | "large";
                    defaultChecked: boolean;
                    loading: boolean;
                    visible: boolean;
                    defaultVisible: boolean;
                    closable: boolean;
                    checkable: boolean;
                    checked: boolean;
                }> & Omit<Readonly<{
                    color?: unknown;
                    size?: unknown;
                    visible?: unknown;
                    defaultVisible?: unknown;
                    loading?: unknown;
                    closable?: unknown;
                    checkable?: unknown;
                    checked?: unknown;
                    defaultChecked?: unknown;
                    onClose?: unknown;
                    onCheck?: unknown;
                } & {
                    size: "small" | "mini" | "medium" | "large";
                    defaultChecked: boolean;
                    loading: boolean;
                    defaultVisible: boolean;
                    closable: boolean;
                    checkable: boolean;
                } & {
                    onClose?: import("../_utils/types").EmitType<(event: MouseEvent) => void> | undefined;
                    onCheck?: import("../_utils/types").EmitType<(checked: boolean, event: MouseEvent) => void> | undefined;
                    color?: string | undefined;
                    visible?: boolean | undefined;
                    checked?: boolean | undefined;
                }> & {
                    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
                    "onUpdate:checked"?: ((...args: any[]) => any) | undefined;
                    onClose?: ((...args: any[]) => any) | undefined;
                    onCheck?: ((...args: any[]) => any) | undefined;
                } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "size" | "defaultChecked" | "loading" | "visible" | "defaultVisible" | "closable" | "checkable" | "checked">) | undefined;
            }[] | {
                value: string;
                label: string;
                closable: boolean;
                tagProps: (Partial<{
                    size: "small" | "mini" | "medium" | "large";
                    defaultChecked: boolean;
                    loading: boolean;
                    visible: boolean;
                    defaultVisible: boolean;
                    closable: boolean;
                    checkable: boolean;
                    checked: boolean;
                }> & Omit<Readonly<{
                    color?: unknown;
                    size?: unknown;
                    visible?: unknown;
                    defaultVisible?: unknown;
                    loading?: unknown;
                    closable?: unknown;
                    checkable?: unknown;
                    checked?: unknown;
                    defaultChecked?: unknown;
                    onClose?: unknown;
                    onCheck?: unknown;
                } & {
                    size: "small" | "mini" | "medium" | "large";
                    defaultChecked: boolean;
                    loading: boolean;
                    defaultVisible: boolean;
                    closable: boolean;
                    checkable: boolean;
                } & {
                    onClose?: import("../_utils/types").EmitType<(event: MouseEvent) => void> | undefined;
                    onCheck?: import("../_utils/types").EmitType<(checked: boolean, event: MouseEvent) => void> | undefined;
                    color?: string | undefined;
                    visible?: boolean | undefined;
                    checked?: boolean | undefined;
                }> & {
                    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
                    "onUpdate:checked"?: ((...args: any[]) => any) | undefined;
                    onClose?: ((...args: any[]) => any) | undefined;
                    onCheck?: ((...args: any[]) => any) | undefined;
                } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "size" | "defaultChecked" | "loading" | "visible" | "defaultVisible" | "closable" | "checkable" | "checked">) | undefined;
            } | undefined>;
            handleInputValueChange: (value: string, reason: string) => void;
            showSearchPanel: import("vue").ComputedRef<boolean>;
            handlePopupVisibleChange: (visible: boolean) => void;
            handleFocus: (e: Event) => void;
            handleBlur: (e: Event) => void;
            handleRemove: (key: string) => void;
            handleKeyDown: (event: KeyboardEvent) => void;
            totalLevel: import("vue").Ref<number>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("inputValueChange" | "focus" | "blur" | "change" | "clear" | "update:modelValue" | "popupVisibleChange" | "search")[], string, {
            options: import("./interface").CascaderOption[];
            inputValue: string;
            disabled: boolean;
            size: "small" | "mini" | "medium" | "large";
            error: boolean;
            defaultInputValue: string;
            defaultValue: string | number | (string | number)[] | (string | number | (string | number)[])[] | undefined;
            allowClear: boolean;
            multiple: boolean;
            loading: boolean;
            allowSearch: boolean;
            maxTagCount: number;
            popupVisible: boolean;
            defaultPopupVisible: boolean;
            expandTrigger: string;
            checkStrictly: boolean;
            pathMode: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        pathMode?: unknown;
        multiple?: unknown;
        modelValue?: unknown;
        defaultValue?: unknown;
        options?: unknown;
        disabled?: unknown;
        error?: unknown;
        size?: unknown;
        allowSearch?: unknown;
        allowClear?: unknown;
        inputValue?: unknown;
        defaultInputValue?: unknown;
        popupVisible?: unknown;
        expandTrigger?: unknown;
        defaultPopupVisible?: unknown;
        placeholder?: unknown;
        filterOption?: unknown;
        popupContainer?: unknown;
        maxTagCount?: unknown;
        formatLabel?: unknown;
        triggerProps?: unknown;
        checkStrictly?: unknown;
        loadMore?: unknown;
        loading?: unknown;
        onChange?: unknown;
        onInputValueChange?: unknown;
        onPopupVisibleChange?: unknown;
        onClear?: unknown;
        onSearch?: unknown;
    } & {
        options: import("./interface").CascaderOption[];
        disabled: boolean;
        size: "small" | "mini" | "medium" | "large";
        error: boolean;
        defaultInputValue: string;
        defaultValue: string | number | (string | number)[] | (string | number | (string | number)[])[] | undefined;
        allowClear: boolean;
        multiple: boolean;
        loading: boolean;
        allowSearch: boolean;
        maxTagCount: number;
        defaultPopupVisible: boolean;
        expandTrigger: string;
        checkStrictly: boolean;
        pathMode: boolean;
    } & {
        inputValue?: string | undefined;
        filterOption?: ((inputValue: string, optionInfo: import("./interface").CascaderOptionInfo) => boolean) | undefined;
        onInputValueChange?: import("../_utils/types").EmitType<(inputValue: string) => void> | undefined;
        modelValue?: string | number | (string | number)[] | (string | number | (string | number)[])[] | undefined;
        formatLabel?: ((options: import("./interface").CascaderOptionInfo[]) => string) | undefined;
        placeholder?: string | undefined;
        onChange?: import("../_utils/types").EmitType<(value: string | number | (string | number)[] | (string | number | (string | number)[])[] | undefined) => void> | undefined;
        onClear?: import("../_utils/types").EmitType<() => void> | undefined;
        popupContainer?: string | HTMLElement | null | undefined;
        onPopupVisibleChange?: import("../_utils/types").EmitType<(popupVisible: boolean) => void> | undefined;
        popupVisible?: boolean | undefined;
        loadMore?: ((option: import("./interface").CascaderOptionInfo, done: (children?: import("./interface").CascaderOption[] | undefined) => void) => void) | undefined;
        onSearch?: import("../_utils/types").EmitType<(inputValue: string) => void> | undefined;
        triggerProps?: (Partial<{
            disabled: boolean;
            animationName: string;
            position: "br" | "rt" | "tr" | "left" | "right" | "bottom" | "top" | "tl" | "bl" | "lt" | "lb" | "rb";
            popupVisible: boolean;
            defaultPopupVisible: boolean;
            trigger: "focus" | "click" | "hover" | "contextMenu" | ("focus" | "click" | "hover" | "contextMenu")[];
            popupOffset: number;
            showArrow: boolean;
            alignPoint: boolean;
            popupHoverStay: boolean;
            blurToClose: boolean;
            clickToClose: boolean;
            clickOutsideToClose: boolean;
            unmountOnClose: boolean;
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            focusDelay: number;
            autoFitPopupWidth: boolean;
            autoFitPopupMinWidth: boolean;
            autoFixPosition: boolean;
            updateAtScroll: boolean;
            autoFitTransformOrigin: boolean;
            hideEmpty: boolean;
            autoFitPosition: boolean;
            renderToBody: boolean;
            preventFocus: boolean;
        }> & Omit<Readonly<{
            popupVisible?: unknown;
            defaultPopupVisible?: unknown;
            trigger?: unknown;
            position?: unknown;
            disabled?: unknown;
            popupOffset?: unknown;
            popupTranslate?: unknown;
            showArrow?: unknown;
            alignPoint?: unknown;
            popupHoverStay?: unknown;
            blurToClose?: unknown;
            clickToClose?: unknown;
            clickOutsideToClose?: unknown;
            unmountOnClose?: unknown;
            contentClass?: unknown;
            contentStyle?: unknown;
            arrowClass?: unknown;
            arrowStyle?: unknown;
            popupStyle?: unknown;
            animationName?: unknown;
            duration?: unknown;
            mouseEnterDelay?: unknown;
            mouseLeaveDelay?: unknown;
            focusDelay?: unknown;
            autoFitPopupWidth?: unknown;
            autoFitPopupMinWidth?: unknown;
            autoFixPosition?: unknown;
            popupContainer?: unknown;
            updateAtScroll?: unknown;
            autoFitTransformOrigin?: unknown;
            hideEmpty?: unknown;
            openedCls?: unknown;
            autoFitPosition?: unknown;
            renderToBody?: unknown;
            preventFocus?: unknown;
            onPopupVisibleChange?: unknown;
        } & {
            disabled: boolean;
            animationName: string;
            position: "br" | "rt" | "tr" | "left" | "right" | "bottom" | "top" | "tl" | "bl" | "lt" | "lb" | "rb";
            defaultPopupVisible: boolean;
            trigger: "focus" | "click" | "hover" | "contextMenu" | ("focus" | "click" | "hover" | "contextMenu")[];
            popupOffset: number;
            showArrow: boolean;
            alignPoint: boolean;
            popupHoverStay: boolean;
            blurToClose: boolean;
            clickToClose: boolean;
            clickOutsideToClose: boolean;
            unmountOnClose: boolean;
            mouseEnterDelay: number;
            mouseLeaveDelay: number;
            focusDelay: number;
            autoFitPopupWidth: boolean;
            autoFitPopupMinWidth: boolean;
            autoFixPosition: boolean;
            updateAtScroll: boolean;
            autoFitTransformOrigin: boolean;
            hideEmpty: boolean;
            autoFitPosition: boolean;
            renderToBody: boolean;
            preventFocus: boolean;
        } & {
            popupContainer?: string | HTMLElement | undefined;
            onPopupVisibleChange?: import("../_utils/types").EmitType<(popupVisible: boolean) => void> | undefined;
            popupVisible?: boolean | undefined;
            popupTranslate?: import("../trigger/utils").PopupTranslate | undefined;
            contentClass?: import("../_utils/types").ClassName | undefined;
            contentStyle?: import("vue").CSSProperties | undefined;
            arrowClass?: import("../_utils/types").ClassName | undefined;
            arrowStyle?: import("vue").CSSProperties | undefined;
            popupStyle?: import("vue").CSSProperties | undefined;
            duration?: import("../_utils/types").AnimationDuration | undefined;
            openedCls?: string | undefined;
        }> & {
            "onUpdate:popupVisible"?: ((...args: any[]) => any) | undefined;
            onPopupVisibleChange?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "animationName" | "position" | "popupVisible" | "defaultPopupVisible" | "trigger" | "popupOffset" | "showArrow" | "alignPoint" | "popupHoverStay" | "blurToClose" | "clickToClose" | "clickOutsideToClose" | "unmountOnClose" | "mouseEnterDelay" | "mouseLeaveDelay" | "focusDelay" | "autoFitPopupWidth" | "autoFitPopupMinWidth" | "autoFixPosition" | "updateAtScroll" | "autoFitTransformOrigin" | "hideEmpty" | "autoFitPosition" | "renderToBody" | "preventFocus">) | undefined;
    }> & {
        onInputValueChange?: ((...args: any[]) => any) | undefined;
        onFocus?: ((...args: any[]) => any) | undefined;
        onBlur?: ((...args: any[]) => any) | undefined;
        onChange?: ((...args: any[]) => any) | undefined;
        onClear?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onPopupVisibleChange?: ((...args: any[]) => any) | undefined;
        onSearch?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        optionInfos: import("vue").Ref<{
            label: string;
            disabled: boolean;
            key: string;
            level: number;
            index: number;
            isLeaf: boolean;
            path: any[];
            children?: any[] | undefined;
            parent?: any | undefined;
            totalLeafOptions?: number | undefined;
            value: string | number;
            render?: import("vue").RenderFunction | undefined;
            tagProps?: {
                size?: "small" | "mini" | "medium" | "large" | undefined;
                defaultChecked?: boolean | undefined;
                loading?: boolean | undefined;
                visible?: boolean | undefined;
                defaultVisible?: boolean | undefined;
                closable?: boolean | undefined;
                checkable?: boolean | undefined;
                checked?: boolean | undefined;
                style?: unknown;
                "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
                "onUpdate:checked"?: ((...args: any[]) => any) | undefined;
                readonly onClose?: (import("../_utils/types").EmitType<(event: MouseEvent) => void> & ((...args: any[]) => any)) | undefined;
                readonly onCheck?: (import("../_utils/types").EmitType<(checked: boolean, event: MouseEvent) => void> & ((...args: any[]) => any)) | undefined;
                readonly color?: string | undefined;
                key?: string | number | symbol | undefined;
                ref?: any;
                onVnodeBeforeMount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void)[] | undefined;
                onVnodeMounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void)[] | undefined;
                onVnodeBeforeUpdate?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void)[] | undefined;
                onVnodeUpdated?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void)[] | undefined;
                onVnodeBeforeUnmount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void)[] | undefined;
                onVnodeUnmounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => void)[] | undefined;
                class?: unknown;
            } | undefined;
        }[]>;
        computedKeys: import("vue").ComputedRef<string[]>;
        filteredLeafOptions: import("vue").ComputedRef<import("./interface").CascaderOptionInfo[]>;
        selectedPath: import("vue").Ref<string[]>;
        activeKey: import("vue").Ref<string | undefined>;
        displayColumns: import("vue").ComputedRef<import("./interface").CascaderOptionInfo[][]>;
        computedInputValue: import("vue").ComputedRef<string>;
        computedPopupVisible: import("vue").ComputedRef<boolean>;
        handleClear: (e: MouseEvent) => void;
        selectViewValue: import("vue").ComputedRef<{
            value: string;
            label: string;
            closable: boolean;
            tagProps: (Partial<{
                size: "small" | "mini" | "medium" | "large";
                defaultChecked: boolean;
                loading: boolean;
                visible: boolean;
                defaultVisible: boolean;
                closable: boolean;
                checkable: boolean;
                checked: boolean;
            }> & Omit<Readonly<{
                color?: unknown;
                size?: unknown;
                visible?: unknown;
                defaultVisible?: unknown;
                loading?: unknown;
                closable?: unknown;
                checkable?: unknown;
                checked?: unknown;
                defaultChecked?: unknown;
                onClose?: unknown;
                onCheck?: unknown;
            } & {
                size: "small" | "mini" | "medium" | "large";
                defaultChecked: boolean;
                loading: boolean;
                defaultVisible: boolean;
                closable: boolean;
                checkable: boolean;
            } & {
                onClose?: import("../_utils/types").EmitType<(event: MouseEvent) => void> | undefined;
                onCheck?: import("../_utils/types").EmitType<(checked: boolean, event: MouseEvent) => void> | undefined;
                color?: string | undefined;
                visible?: boolean | undefined;
                checked?: boolean | undefined;
            }> & {
                "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
                "onUpdate:checked"?: ((...args: any[]) => any) | undefined;
                onClose?: ((...args: any[]) => any) | undefined;
                onCheck?: ((...args: any[]) => any) | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "size" | "defaultChecked" | "loading" | "visible" | "defaultVisible" | "closable" | "checkable" | "checked">) | undefined;
        }[] | {
            value: string;
            label: string;
            closable: boolean;
            tagProps: (Partial<{
                size: "small" | "mini" | "medium" | "large";
                defaultChecked: boolean;
                loading: boolean;
                visible: boolean;
                defaultVisible: boolean;
                closable: boolean;
                checkable: boolean;
                checked: boolean;
            }> & Omit<Readonly<{
                color?: unknown;
                size?: unknown;
                visible?: unknown;
                defaultVisible?: unknown;
                loading?: unknown;
                closable?: unknown;
                checkable?: unknown;
                checked?: unknown;
                defaultChecked?: unknown;
                onClose?: unknown;
                onCheck?: unknown;
            } & {
                size: "small" | "mini" | "medium" | "large";
                defaultChecked: boolean;
                loading: boolean;
                defaultVisible: boolean;
                closable: boolean;
                checkable: boolean;
            } & {
                onClose?: import("../_utils/types").EmitType<(event: MouseEvent) => void> | undefined;
                onCheck?: import("../_utils/types").EmitType<(checked: boolean, event: MouseEvent) => void> | undefined;
                color?: string | undefined;
                visible?: boolean | undefined;
                checked?: boolean | undefined;
            }> & {
                "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
                "onUpdate:checked"?: ((...args: any[]) => any) | undefined;
                onClose?: ((...args: any[]) => any) | undefined;
                onCheck?: ((...args: any[]) => any) | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "size" | "defaultChecked" | "loading" | "visible" | "defaultVisible" | "closable" | "checkable" | "checked">) | undefined;
        } | undefined>;
        handleInputValueChange: (value: string, reason: string) => void;
        showSearchPanel: import("vue").ComputedRef<boolean>;
        handlePopupVisibleChange: (visible: boolean) => void;
        handleFocus: (e: Event) => void;
        handleBlur: (e: Event) => void;
        handleRemove: (key: string) => void;
        handleKeyDown: (event: KeyboardEvent) => void;
        totalLevel: import("vue").Ref<number>;
    }> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    pathMode?: unknown;
    multiple?: unknown;
    modelValue?: unknown;
    defaultValue?: unknown;
    options?: unknown;
    disabled?: unknown;
    error?: unknown;
    size?: unknown;
    allowSearch?: unknown;
    allowClear?: unknown;
    inputValue?: unknown;
    defaultInputValue?: unknown;
    popupVisible?: unknown;
    expandTrigger?: unknown;
    defaultPopupVisible?: unknown;
    placeholder?: unknown;
    filterOption?: unknown;
    popupContainer?: unknown;
    maxTagCount?: unknown;
    formatLabel?: unknown;
    triggerProps?: unknown;
    checkStrictly?: unknown;
    loadMore?: unknown;
    loading?: unknown;
    onChange?: unknown;
    onInputValueChange?: unknown;
    onPopupVisibleChange?: unknown;
    onClear?: unknown;
    onSearch?: unknown;
} & {
    options: import("./interface").CascaderOption[];
    disabled: boolean;
    size: "small" | "mini" | "medium" | "large";
    error: boolean;
    defaultInputValue: string;
    defaultValue: string | number | (string | number)[] | (string | number | (string | number)[])[] | undefined;
    allowClear: boolean;
    multiple: boolean;
    loading: boolean;
    allowSearch: boolean;
    maxTagCount: number;
    defaultPopupVisible: boolean;
    expandTrigger: string;
    checkStrictly: boolean;
    pathMode: boolean;
} & {
    inputValue?: string | undefined;
    filterOption?: ((inputValue: string, optionInfo: import("./interface").CascaderOptionInfo) => boolean) | undefined;
    onInputValueChange?: import("../_utils/types").EmitType<(inputValue: string) => void> | undefined;
    modelValue?: string | number | (string | number)[] | (string | number | (string | number)[])[] | undefined;
    formatLabel?: ((options: import("./interface").CascaderOptionInfo[]) => string) | undefined;
    placeholder?: string | undefined;
    onChange?: import("../_utils/types").EmitType<(value: string | number | (string | number)[] | (string | number | (string | number)[])[] | undefined) => void> | undefined;
    onClear?: import("../_utils/types").EmitType<() => void> | undefined;
    popupContainer?: string | HTMLElement | null | undefined;
    onPopupVisibleChange?: import("../_utils/types").EmitType<(popupVisible: boolean) => void> | undefined;
    popupVisible?: boolean | undefined;
    loadMore?: ((option: import("./interface").CascaderOptionInfo, done: (children?: import("./interface").CascaderOption[] | undefined) => void) => void) | undefined;
    onSearch?: import("../_utils/types").EmitType<(inputValue: string) => void> | undefined;
    triggerProps?: (Partial<{
        disabled: boolean;
        animationName: string;
        position: "br" | "rt" | "tr" | "left" | "right" | "bottom" | "top" | "tl" | "bl" | "lt" | "lb" | "rb";
        popupVisible: boolean;
        defaultPopupVisible: boolean;
        trigger: "focus" | "click" | "hover" | "contextMenu" | ("focus" | "click" | "hover" | "contextMenu")[];
        popupOffset: number;
        showArrow: boolean;
        alignPoint: boolean;
        popupHoverStay: boolean;
        blurToClose: boolean;
        clickToClose: boolean;
        clickOutsideToClose: boolean;
        unmountOnClose: boolean;
        mouseEnterDelay: number;
        mouseLeaveDelay: number;
        focusDelay: number;
        autoFitPopupWidth: boolean;
        autoFitPopupMinWidth: boolean;
        autoFixPosition: boolean;
        updateAtScroll: boolean;
        autoFitTransformOrigin: boolean;
        hideEmpty: boolean;
        autoFitPosition: boolean;
        renderToBody: boolean;
        preventFocus: boolean;
    }> & Omit<Readonly<{
        popupVisible?: unknown;
        defaultPopupVisible?: unknown;
        trigger?: unknown;
        position?: unknown;
        disabled?: unknown;
        popupOffset?: unknown;
        popupTranslate?: unknown;
        showArrow?: unknown;
        alignPoint?: unknown;
        popupHoverStay?: unknown;
        blurToClose?: unknown;
        clickToClose?: unknown;
        clickOutsideToClose?: unknown;
        unmountOnClose?: unknown;
        contentClass?: unknown;
        contentStyle?: unknown;
        arrowClass?: unknown;
        arrowStyle?: unknown;
        popupStyle?: unknown;
        animationName?: unknown;
        duration?: unknown;
        mouseEnterDelay?: unknown;
        mouseLeaveDelay?: unknown;
        focusDelay?: unknown;
        autoFitPopupWidth?: unknown;
        autoFitPopupMinWidth?: unknown;
        autoFixPosition?: unknown;
        popupContainer?: unknown;
        updateAtScroll?: unknown;
        autoFitTransformOrigin?: unknown;
        hideEmpty?: unknown;
        openedCls?: unknown;
        autoFitPosition?: unknown;
        renderToBody?: unknown;
        preventFocus?: unknown;
        onPopupVisibleChange?: unknown;
    } & {
        disabled: boolean;
        animationName: string;
        position: "br" | "rt" | "tr" | "left" | "right" | "bottom" | "top" | "tl" | "bl" | "lt" | "lb" | "rb";
        defaultPopupVisible: boolean;
        trigger: "focus" | "click" | "hover" | "contextMenu" | ("focus" | "click" | "hover" | "contextMenu")[];
        popupOffset: number;
        showArrow: boolean;
        alignPoint: boolean;
        popupHoverStay: boolean;
        blurToClose: boolean;
        clickToClose: boolean;
        clickOutsideToClose: boolean;
        unmountOnClose: boolean;
        mouseEnterDelay: number;
        mouseLeaveDelay: number;
        focusDelay: number;
        autoFitPopupWidth: boolean;
        autoFitPopupMinWidth: boolean;
        autoFixPosition: boolean;
        updateAtScroll: boolean;
        autoFitTransformOrigin: boolean;
        hideEmpty: boolean;
        autoFitPosition: boolean;
        renderToBody: boolean;
        preventFocus: boolean;
    } & {
        popupContainer?: string | HTMLElement | undefined;
        onPopupVisibleChange?: import("../_utils/types").EmitType<(popupVisible: boolean) => void> | undefined;
        popupVisible?: boolean | undefined;
        popupTranslate?: import("../trigger/utils").PopupTranslate | undefined;
        contentClass?: import("../_utils/types").ClassName | undefined;
        contentStyle?: import("vue").CSSProperties | undefined;
        arrowClass?: import("../_utils/types").ClassName | undefined;
        arrowStyle?: import("vue").CSSProperties | undefined;
        popupStyle?: import("vue").CSSProperties | undefined;
        duration?: import("../_utils/types").AnimationDuration | undefined;
        openedCls?: string | undefined;
    }> & {
        "onUpdate:popupVisible"?: ((...args: any[]) => any) | undefined;
        onPopupVisibleChange?: ((...args: any[]) => any) | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "animationName" | "position" | "popupVisible" | "defaultPopupVisible" | "trigger" | "popupOffset" | "showArrow" | "alignPoint" | "popupHoverStay" | "blurToClose" | "clickToClose" | "clickOutsideToClose" | "unmountOnClose" | "mouseEnterDelay" | "mouseLeaveDelay" | "focusDelay" | "autoFitPopupWidth" | "autoFitPopupMinWidth" | "autoFixPosition" | "updateAtScroll" | "autoFitTransformOrigin" | "hideEmpty" | "autoFitPosition" | "renderToBody" | "preventFocus">) | undefined;
}> & {
    onInputValueChange?: ((...args: any[]) => any) | undefined;
    onFocus?: ((...args: any[]) => any) | undefined;
    onBlur?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
    onClear?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onPopupVisibleChange?: ((...args: any[]) => any) | undefined;
    onSearch?: ((...args: any[]) => any) | undefined;
}, {
    optionInfos: import("vue").Ref<{
        label: string;
        disabled: boolean;
        key: string;
        level: number;
        index: number;
        isLeaf: boolean;
        path: any[];
        children?: any[] | undefined;
        parent?: any | undefined;
        totalLeafOptions?: number | undefined;
        value: string | number;
        render?: import("vue").RenderFunction | undefined;
        tagProps?: {
            size?: "small" | "mini" | "medium" | "large" | undefined;
            defaultChecked?: boolean | undefined;
            loading?: boolean | undefined;
            visible?: boolean | undefined;
            defaultVisible?: boolean | undefined;
            closable?: boolean | undefined;
            checkable?: boolean | undefined;
            checked?: boolean | undefined;
            style?: unknown;
            "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
            "onUpdate:checked"?: ((...args: any[]) => any) | undefined;
            readonly onClose?: (import("../_utils/types").EmitType<(event: MouseEvent) => void> & ((...args: any[]) => any)) | undefined;
            readonly onCheck?: (import("../_utils/types").EmitType<(checked: boolean, event: MouseEvent) => void> & ((...args: any[]) => any)) | undefined;
            readonly color?: string | undefined;
            key?: string | number | symbol | undefined;
            ref?: any;
            onVnodeBeforeMount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeMounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUpdate?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUpdated?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUnmount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUnmounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            class?: unknown;
        } | undefined;
    }[]>;
    computedKeys: import("vue").ComputedRef<string[]>;
    filteredLeafOptions: import("vue").ComputedRef<import("./interface").CascaderOptionInfo[]>;
    selectedPath: import("vue").Ref<string[]>;
    activeKey: import("vue").Ref<string | undefined>;
    displayColumns: import("vue").ComputedRef<import("./interface").CascaderOptionInfo[][]>;
    computedInputValue: import("vue").ComputedRef<string>;
    computedPopupVisible: import("vue").ComputedRef<boolean>;
    handleClear: (e: MouseEvent) => void;
    selectViewValue: import("vue").ComputedRef<{
        value: string;
        label: string;
        closable: boolean;
        tagProps: (Partial<{
            size: "small" | "mini" | "medium" | "large";
            defaultChecked: boolean;
            loading: boolean;
            visible: boolean;
            defaultVisible: boolean;
            closable: boolean;
            checkable: boolean;
            checked: boolean;
        }> & Omit<Readonly<{
            color?: unknown;
            size?: unknown;
            visible?: unknown;
            defaultVisible?: unknown;
            loading?: unknown;
            closable?: unknown;
            checkable?: unknown;
            checked?: unknown;
            defaultChecked?: unknown;
            onClose?: unknown;
            onCheck?: unknown;
        } & {
            size: "small" | "mini" | "medium" | "large";
            defaultChecked: boolean;
            loading: boolean;
            defaultVisible: boolean;
            closable: boolean;
            checkable: boolean;
        } & {
            onClose?: import("../_utils/types").EmitType<(event: MouseEvent) => void> | undefined;
            onCheck?: import("../_utils/types").EmitType<(checked: boolean, event: MouseEvent) => void> | undefined;
            color?: string | undefined;
            visible?: boolean | undefined;
            checked?: boolean | undefined;
        }> & {
            "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
            "onUpdate:checked"?: ((...args: any[]) => any) | undefined;
            onClose?: ((...args: any[]) => any) | undefined;
            onCheck?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "size" | "defaultChecked" | "loading" | "visible" | "defaultVisible" | "closable" | "checkable" | "checked">) | undefined;
    }[] | {
        value: string;
        label: string;
        closable: boolean;
        tagProps: (Partial<{
            size: "small" | "mini" | "medium" | "large";
            defaultChecked: boolean;
            loading: boolean;
            visible: boolean;
            defaultVisible: boolean;
            closable: boolean;
            checkable: boolean;
            checked: boolean;
        }> & Omit<Readonly<{
            color?: unknown;
            size?: unknown;
            visible?: unknown;
            defaultVisible?: unknown;
            loading?: unknown;
            closable?: unknown;
            checkable?: unknown;
            checked?: unknown;
            defaultChecked?: unknown;
            onClose?: unknown;
            onCheck?: unknown;
        } & {
            size: "small" | "mini" | "medium" | "large";
            defaultChecked: boolean;
            loading: boolean;
            defaultVisible: boolean;
            closable: boolean;
            checkable: boolean;
        } & {
            onClose?: import("../_utils/types").EmitType<(event: MouseEvent) => void> | undefined;
            onCheck?: import("../_utils/types").EmitType<(checked: boolean, event: MouseEvent) => void> | undefined;
            color?: string | undefined;
            visible?: boolean | undefined;
            checked?: boolean | undefined;
        }> & {
            "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
            "onUpdate:checked"?: ((...args: any[]) => any) | undefined;
            onClose?: ((...args: any[]) => any) | undefined;
            onCheck?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "size" | "defaultChecked" | "loading" | "visible" | "defaultVisible" | "closable" | "checkable" | "checked">) | undefined;
    } | undefined>;
    handleInputValueChange: (value: string, reason: string) => void;
    showSearchPanel: import("vue").ComputedRef<boolean>;
    handlePopupVisibleChange: (visible: boolean) => void;
    handleFocus: (e: Event) => void;
    handleBlur: (e: Event) => void;
    handleRemove: (key: string) => void;
    handleKeyDown: (event: KeyboardEvent) => void;
    totalLevel: import("vue").Ref<number>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("inputValueChange" | "focus" | "blur" | "change" | "clear" | "update:modelValue" | "popupVisibleChange" | "search")[], "inputValueChange" | "focus" | "blur" | "change" | "clear" | "update:modelValue" | "popupVisibleChange" | "search", {
    options: import("./interface").CascaderOption[];
    inputValue: string;
    disabled: boolean;
    size: "small" | "mini" | "medium" | "large";
    error: boolean;
    defaultInputValue: string;
    defaultValue: string | number | (string | number)[] | (string | number | (string | number)[])[] | undefined;
    allowClear: boolean;
    multiple: boolean;
    loading: boolean;
    allowSearch: boolean;
    maxTagCount: number;
    popupVisible: boolean;
    defaultPopupVisible: boolean;
    expandTrigger: string;
    checkStrictly: boolean;
    pathMode: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type CascaderInstance = InstanceType<typeof _Cascader>;
export default Cascader;
