import { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    renderToBody: {
        type: BooleanConstructor;
        default: boolean;
    };
    srcList: {
        type: PropType<string[]>;
    };
    current: {
        type: NumberConstructor;
    };
    defaultCurrent: {
        type: NumberConstructor;
        default: number;
    };
    infinite: {
        type: BooleanConstructor;
        default: boolean;
    };
    visible: {
        type: BooleanConstructor;
        default: undefined;
    };
    defaultVisible: {
        type: BooleanConstructor;
        default: boolean;
    };
    maskClosable: {
        type: BooleanConstructor;
        default: boolean;
    };
    closable: {
        type: BooleanConstructor;
        default: boolean;
    };
    actionsLayout: {
        type: PropType<string[]>;
        default: () => string[];
    };
    popupContainer: {
        type: PropType<string | HTMLElement>;
    };
}, {
    mergedVisible: import("vue").ComputedRef<boolean>;
    currentUrl: import("vue").ComputedRef<string | undefined>;
    prevIndex: import("vue").ComputedRef<number | undefined>;
    nextIndex: import("vue").ComputedRef<number | undefined>;
    onClose(): void;
    groupArrowProps: {
        onPrev: (() => void) | undefined;
        onNext: (() => void) | undefined;
    };
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:visible" | "update:current" | "visible-change")[], "change" | "update:visible" | "update:current" | "visible-change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    renderToBody?: unknown;
    srcList?: unknown;
    current?: unknown;
    defaultCurrent?: unknown;
    infinite?: unknown;
    visible?: unknown;
    defaultVisible?: unknown;
    maskClosable?: unknown;
    closable?: unknown;
    actionsLayout?: unknown;
    popupContainer?: unknown;
} & {
    defaultVisible: boolean;
    closable: boolean;
    infinite: boolean;
    renderToBody: boolean;
    defaultCurrent: number;
    actionsLayout: string[];
    maskClosable: boolean;
} & {
    visible?: boolean | undefined;
    popupContainer?: string | HTMLElement | undefined;
    current?: number | undefined;
    srcList?: string[] | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:current"?: ((...args: any[]) => any) | undefined;
    "onVisible-change"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    defaultVisible: boolean;
    closable: boolean;
    infinite: boolean;
    renderToBody: boolean;
    defaultCurrent: number;
    actionsLayout: string[];
    maskClosable: boolean;
}>;
export default _default;
