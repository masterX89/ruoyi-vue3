import type { PropType } from 'vue';
import { TagData } from './interface';
import { EmitType } from '../_utils/types';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: PropType<(string | number | TagData)[]>;
    };
    defaultValue: {
        type: PropType<(string | number | TagData)[]>;
        default: () => never[];
    };
    inputValue: StringConstructor;
    defaultInputValue: {
        type: StringConstructor;
        default: string;
    };
    placeholder: StringConstructor;
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    allowClear: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: PropType<"small" | "mini" | "medium" | "large">;
        default: () => "small" | "mini" | "medium" | "large";
    };
    maxTagCount: {
        type: NumberConstructor;
        default: number;
    };
    retainInputValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    formatTag: {
        type: PropType<(data: TagData) => string>;
    };
    uniqueValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    baseCls: StringConstructor;
    focused: BooleanConstructor;
    disabledInput: BooleanConstructor;
    onChange: {
        type: PropType<EmitType<(value: string | number | TagData) => void>>;
    };
    onInputValueChange: {
        type: PropType<(inputValue: string) => void>;
    };
    onPressEnter: {
        type: PropType<() => void>;
    };
    onRemove: {
        type: PropType<(removed: string | number) => void>;
    };
    onClear: {
        type: PropType<() => void>;
    };
    onFocus: {
        type: PropType<() => void>;
    };
    onBlur: {
        type: PropType<() => void>;
    };
}, {
    inputRef: import("vue").Ref<HTMLInputElement | undefined>;
    render: () => JSX.Element;
}, unknown, {}, {
    focus(): void;
    blur(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:inputValue" | "inputValueChange" | "focus" | "blur" | "change" | "clear" | "update:modelValue" | "remove" | "pressEnter")[], "update:inputValue" | "inputValueChange" | "focus" | "blur" | "change" | "clear" | "update:modelValue" | "remove" | "pressEnter", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    defaultValue?: unknown;
    inputValue?: unknown;
    defaultInputValue?: unknown;
    placeholder?: unknown;
    disabled?: unknown;
    error?: unknown;
    readonly?: unknown;
    allowClear?: unknown;
    size?: unknown;
    maxTagCount?: unknown;
    retainInputValue?: unknown;
    formatTag?: unknown;
    uniqueValue?: unknown;
    baseCls?: unknown;
    focused?: unknown;
    disabledInput?: unknown;
    onChange?: unknown;
    onInputValueChange?: unknown;
    onPressEnter?: unknown;
    onRemove?: unknown;
    onClear?: unknown;
    onFocus?: unknown;
    onBlur?: unknown;
} & {
    retainInputValue: boolean;
    disabled: boolean;
    size: "small" | "mini" | "medium" | "large";
    error: boolean;
    focused: boolean;
    defaultInputValue: string;
    defaultValue: (string | number | TagData)[];
    readonly: boolean;
    allowClear: boolean;
    maxTagCount: number;
    uniqueValue: boolean;
    disabledInput: boolean;
} & {
    inputValue?: string | undefined;
    onInputValueChange?: ((inputValue: string) => void) | undefined;
    onFocus?: (() => void) | undefined;
    onBlur?: (() => void) | undefined;
    modelValue?: (string | number | TagData)[] | undefined;
    placeholder?: string | undefined;
    baseCls?: string | undefined;
    onChange?: EmitType<(value: string | number | TagData) => void> | undefined;
    onClear?: (() => void) | undefined;
    onPressEnter?: (() => void) | undefined;
    onRemove?: ((removed: string | number) => void) | undefined;
    formatTag?: ((data: TagData) => string) | undefined;
}> & {
    "onUpdate:inputValue"?: ((...args: any[]) => any) | undefined;
    onInputValueChange?: ((...args: any[]) => any) | undefined;
    onFocus?: ((...args: any[]) => any) | undefined;
    onBlur?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
    onClear?: ((...args: any[]) => any) | undefined;
    onPressEnter?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onRemove?: ((...args: any[]) => any) | undefined;
}, {
    retainInputValue: boolean;
    disabled: boolean;
    size: "small" | "mini" | "medium" | "large";
    error: boolean;
    focused: boolean;
    defaultInputValue: string;
    defaultValue: (string | number | TagData)[];
    readonly: boolean;
    allowClear: boolean;
    maxTagCount: number;
    uniqueValue: boolean;
    disabledInput: boolean;
}>;
export default _default;
