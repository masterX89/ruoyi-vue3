import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _Tabs from './tabs';
import _TabPane from './tab-pane';
declare const Tabs: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            size: "small" | "mini" | "medium" | "large";
            direction: "horizontal" | "vertical";
            justify: boolean;
            animation: boolean;
            position: "left" | "right" | "bottom" | "top";
            type: string;
            activeKey: string;
            defaultActiveKey: string;
            editable: boolean;
            showAddButton: boolean;
            destroyOnHide: boolean;
            lazyLoad: boolean;
            headerPadding: boolean;
        }> & Omit<Readonly<{
            activeKey?: unknown;
            defaultActiveKey?: unknown;
            position?: unknown;
            size?: unknown;
            type?: unknown;
            direction?: unknown;
            editable?: unknown;
            showAddButton?: unknown;
            destroyOnHide?: unknown;
            lazyLoad?: unknown;
            justify?: unknown;
            animation?: unknown;
            headerPadding?: unknown;
        } & {
            size: "small" | "mini" | "medium" | "large";
            direction: "horizontal" | "vertical";
            justify: boolean;
            animation: boolean;
            position: "left" | "right" | "bottom" | "top";
            type: string;
            defaultActiveKey: string;
            editable: boolean;
            showAddButton: boolean;
            destroyOnHide: boolean;
            lazyLoad: boolean;
            headerPadding: boolean;
        } & {
            activeKey?: string | undefined;
        }> & {
            onChange?: ((...args: any[]) => any) | undefined;
            "onUpdate:activeKey"?: ((...args: any[]) => any) | undefined;
            onAdd?: ((...args: any[]) => any) | undefined;
            onTabClick?: ((...args: any[]) => any) | undefined;
            onDelete?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "size" | "direction" | "justify" | "animation" | "position" | "type" | "activeKey" | "defaultActiveKey" | "editable" | "showAddButton" | "destroyOnHide" | "lazyLoad" | "headerPadding">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "change" | "add" | "update:activeKey" | "tabClick" | "delete", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            activeKey?: unknown;
            defaultActiveKey?: unknown;
            position?: unknown;
            size?: unknown;
            type?: unknown;
            direction?: unknown;
            editable?: unknown;
            showAddButton?: unknown;
            destroyOnHide?: unknown;
            lazyLoad?: unknown;
            justify?: unknown;
            animation?: unknown;
            headerPadding?: unknown;
        } & {
            size: "small" | "mini" | "medium" | "large";
            direction: "horizontal" | "vertical";
            justify: boolean;
            animation: boolean;
            position: "left" | "right" | "bottom" | "top";
            type: string;
            defaultActiveKey: string;
            editable: boolean;
            showAddButton: boolean;
            destroyOnHide: boolean;
            lazyLoad: boolean;
            headerPadding: boolean;
        } & {
            activeKey?: string | undefined;
        }> & {
            onChange?: ((...args: any[]) => any) | undefined;
            "onUpdate:activeKey"?: ((...args: any[]) => any) | undefined;
            onAdd?: ((...args: any[]) => any) | undefined;
            onTabClick?: ((...args: any[]) => any) | undefined;
            onDelete?: ((...args: any[]) => any) | undefined;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "add" | "update:activeKey" | "tabClick" | "delete")[], string, {
            size: "small" | "mini" | "medium" | "large";
            direction: "horizontal" | "vertical";
            justify: boolean;
            animation: boolean;
            position: "left" | "right" | "bottom" | "top";
            type: string;
            activeKey: string;
            defaultActiveKey: string;
            editable: boolean;
            showAddButton: boolean;
            destroyOnHide: boolean;
            lazyLoad: boolean;
            headerPadding: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        activeKey?: unknown;
        defaultActiveKey?: unknown;
        position?: unknown;
        size?: unknown;
        type?: unknown;
        direction?: unknown;
        editable?: unknown;
        showAddButton?: unknown;
        destroyOnHide?: unknown;
        lazyLoad?: unknown;
        justify?: unknown;
        animation?: unknown;
        headerPadding?: unknown;
    } & {
        size: "small" | "mini" | "medium" | "large";
        direction: "horizontal" | "vertical";
        justify: boolean;
        animation: boolean;
        position: "left" | "right" | "bottom" | "top";
        type: string;
        defaultActiveKey: string;
        editable: boolean;
        showAddButton: boolean;
        destroyOnHide: boolean;
        lazyLoad: boolean;
        headerPadding: boolean;
    } & {
        activeKey?: string | undefined;
    }> & {
        onChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:activeKey"?: ((...args: any[]) => any) | undefined;
        onAdd?: ((...args: any[]) => any) | undefined;
        onTabClick?: ((...args: any[]) => any) | undefined;
        onDelete?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    activeKey?: unknown;
    defaultActiveKey?: unknown;
    position?: unknown;
    size?: unknown;
    type?: unknown;
    direction?: unknown;
    editable?: unknown;
    showAddButton?: unknown;
    destroyOnHide?: unknown;
    lazyLoad?: unknown;
    justify?: unknown;
    animation?: unknown;
    headerPadding?: unknown;
} & {
    size: "small" | "mini" | "medium" | "large";
    direction: "horizontal" | "vertical";
    justify: boolean;
    animation: boolean;
    position: "left" | "right" | "bottom" | "top";
    type: string;
    defaultActiveKey: string;
    editable: boolean;
    showAddButton: boolean;
    destroyOnHide: boolean;
    lazyLoad: boolean;
    headerPadding: boolean;
} & {
    activeKey?: string | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:activeKey"?: ((...args: any[]) => any) | undefined;
    onAdd?: ((...args: any[]) => any) | undefined;
    onTabClick?: ((...args: any[]) => any) | undefined;
    onDelete?: ((...args: any[]) => any) | undefined;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "add" | "update:activeKey" | "tabClick" | "delete")[], "change" | "add" | "delete" | "update:activeKey" | "tabClick", {
    size: "small" | "mini" | "medium" | "large";
    direction: "horizontal" | "vertical";
    justify: boolean;
    animation: boolean;
    position: "left" | "right" | "bottom" | "top";
    type: string;
    activeKey: string;
    defaultActiveKey: string;
    editable: boolean;
    showAddButton: boolean;
    destroyOnHide: boolean;
    lazyLoad: boolean;
    headerPadding: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    TabPane: import("vue").DefineComponent<{
        title: StringConstructor;
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        closable: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, {
        prefixCls: string;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        title?: unknown;
        disabled?: unknown;
        closable?: unknown;
    } & {
        disabled: boolean;
        closable: boolean;
    } & {
        title?: string | undefined;
    }>, {
        disabled: boolean;
        closable: boolean;
    }>;
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type TabsInstance = InstanceType<typeof _Tabs>;
export declare type TabPaneInstance = InstanceType<typeof _TabPane>;
export { _TabPane as TabPane };
export default Tabs;
