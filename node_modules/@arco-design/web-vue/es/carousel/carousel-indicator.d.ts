import { PropType } from 'vue';
import { TriggerType, IndicatorType, IndicatorPositionType } from './constants';
declare const _default: import("vue").DefineComponent<{
    count: {
        type: NumberConstructor;
        default: number;
    };
    activeIndex: {
        type: NumberConstructor;
        default: number;
    };
    type: {
        type: PropType<"line" | "dot" | "never" | "slider">;
        validator: (value: IndicatorType) => boolean;
        default: string;
    };
    position: {
        type: PropType<"left" | "right" | "bottom" | "top" | "outer">;
        validator: (value: IndicatorPositionType) => boolean;
        default: string;
    };
    trigger: {
        type: PropType<"click" | "hover">;
        validator: (value: TriggerType) => boolean;
        default: string;
    };
    onSelectIndex: {
        type: FunctionConstructor;
    };
}, {
    prefixCls: string;
    listeners: import("vue").ComputedRef<{
        [x: string]: (event: any) => void;
    }>;
    step: import("vue").ComputedRef<number | null>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    count?: unknown;
    activeIndex?: unknown;
    type?: unknown;
    position?: unknown;
    trigger?: unknown;
    onSelectIndex?: unknown;
} & {
    position: "left" | "right" | "bottom" | "top" | "outer";
    type: "line" | "dot" | "never" | "slider";
    trigger: "click" | "hover";
    count: number;
    activeIndex: number;
} & {
    onSelectIndex?: Function | undefined;
}>, {
    position: "left" | "right" | "bottom" | "top" | "outer";
    type: "line" | "dot" | "never" | "slider";
    trigger: "click" | "hover";
    count: number;
    activeIndex: number;
}>;
export default _default;
