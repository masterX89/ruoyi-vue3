import { PropType, Ref } from 'vue';
import { TriggerType, DirectionType, ArrowType, IndicatorType, IndicatorPositionType } from './constants';
declare const _default: import("vue").DefineComponent<{
    current: {
        type: NumberConstructor;
    };
    defaultCurrent: {
        type: NumberConstructor;
        default: number;
    };
    autoPlay: {
        type: (BooleanConstructor | ObjectConstructor)[];
        default: boolean;
    };
    moveSpeed: {
        type: NumberConstructor;
        default: number;
    };
    animationName: {
        type: PropType<"slide" | "fade" | "card">;
        default: string;
    };
    trigger: {
        type: PropType<"click" | "hover">;
        validator: (value: TriggerType) => boolean;
        default: string;
    };
    direction: {
        type: PropType<"horizontal" | "vertical">;
        validator: (value: DirectionType) => boolean;
        default: string;
    };
    showArrow: {
        type: PropType<"always" | "never" | "hover">;
        validator: (value: ArrowType) => boolean;
        default: string;
    };
    arrowClass: {
        type: StringConstructor;
        default: string;
    };
    indicatorType: {
        type: PropType<"line" | "dot" | "never" | "slider">;
        validator: (value: IndicatorType) => boolean;
        default: string;
    };
    indicatorPosition: {
        type: PropType<"left" | "right" | "bottom" | "top" | "outer">;
        validator: (value: IndicatorPositionType) => boolean;
        default: string;
    };
    indicatorClass: {
        type: StringConstructor;
        default: string;
    };
    transitionTimingFunction: {
        type: StringConstructor;
        default: string;
    };
}, {
    prefixCls: string;
    eventHandlers: import("vue").ComputedRef<{
        mouseEnter: () => true;
        mouseLeave: () => false;
    } | {
        mouseEnter?: undefined;
        mouseLeave?: undefined;
    }>;
    length: import("vue").ComputedRef<number>;
    mergedIndexes: import("vue").ComputedRef<{
        mergedIndex: number;
        mergedPrevIndex: number;
        mergedNextIndex: number;
    }>;
    slideTo: ({ targetIndex, isNegative, isManual, }: {
        targetIndex: number;
        isNegative?: boolean | undefined;
        isManual?: boolean | undefined;
    }) => void;
    hasIndicator: import("vue").ComputedRef<boolean>;
    hasArrow: import("vue").ComputedRef<boolean>;
    slideDirection: Ref<"positive" | "negative" | null>;
    cls: import("vue").ComputedRef<string[]>;
    contentCls: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    indicatorCls: import("vue").ComputedRef<string[]>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:current")[], "change" | "update:current", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    current?: unknown;
    defaultCurrent?: unknown;
    autoPlay?: unknown;
    moveSpeed?: unknown;
    animationName?: unknown;
    trigger?: unknown;
    direction?: unknown;
    showArrow?: unknown;
    arrowClass?: unknown;
    indicatorType?: unknown;
    indicatorPosition?: unknown;
    indicatorClass?: unknown;
    transitionTimingFunction?: unknown;
} & {
    direction: "horizontal" | "vertical";
    animationName: "slide" | "fade" | "card";
    transitionTimingFunction: string;
    trigger: "click" | "hover";
    showArrow: "always" | "never" | "hover";
    arrowClass: string;
    defaultCurrent: number;
    autoPlay: boolean | Record<string, any>;
    moveSpeed: number;
    indicatorType: "line" | "dot" | "never" | "slider";
    indicatorPosition: "left" | "right" | "bottom" | "top" | "outer";
    indicatorClass: string;
} & {
    current?: number | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:current"?: ((...args: any[]) => any) | undefined;
}, {
    direction: "horizontal" | "vertical";
    animationName: "slide" | "fade" | "card";
    transitionTimingFunction: string;
    trigger: "click" | "hover";
    showArrow: "always" | "never" | "hover";
    arrowClass: string;
    defaultCurrent: number;
    autoPlay: boolean | Record<string, any>;
    moveSpeed: number;
    indicatorType: "line" | "dot" | "never" | "slider";
    indicatorPosition: "left" | "right" | "bottom" | "top" | "outer";
    indicatorClass: string;
}>;
export default _default;
