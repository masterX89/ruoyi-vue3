import { defineComponent, computed, createVNode, mergeProps, isVNode } from "vue";
import { getPrefixCls } from "../_utils/global-config.js";
import Checkbox from "../checkbox/index.js";
import Radio from "../radio/index.js";
import Button from "../button/index.js";
import Trigger from "../trigger/index.js";
import IconCaretDown from "../icon/icon-caret-down/index.js";
import IconCaretUp from "../icon/icon-caret-up/index.js";
import IconFilter from "../icon/icon-filter/index.js";
import { useColumnSorter } from "./hooks/use-column-sorter.js";
import { useColumnFilter } from "./hooks/use-column-filter.js";
import { useI18n } from "../locale/index.js";
import { getStyle, getFixedCls } from "./utils.js";
import { isBoolean, isFunction } from "../_utils/is.js";
import IconHover from "../_components/icon-hover.js";
function _isSlot(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !isVNode(s);
}
var Th = defineComponent({
  name: "Th",
  props: {
    column: {
      type: Object,
      default: () => ({})
    },
    operations: {
      type: Array,
      default: () => []
    },
    dataColumns: {
      type: Array,
      default: () => []
    },
    sortOrder: {
      type: String
    },
    filterValue: {
      type: Array
    },
    filterIconAlignLeft: {
      type: Boolean,
      default: false
    }
  },
  emits: ["sorterChange", "filterChange"],
  setup(props, {
    emit,
    slots
  }) {
    const prefixCls = getPrefixCls("table");
    const {
      t
    } = useI18n();
    const filterIconAlignLeft = computed(() => {
      var _a, _b, _c;
      if (isBoolean((_b = (_a = props.column) == null ? void 0 : _a.filterable) == null ? void 0 : _b.alignLeft)) {
        return (_c = props.column.filterable) == null ? void 0 : _c.alignLeft;
      }
      return props.filterIconAlignLeft;
    });
    const {
      hasSorter,
      hasAscendBtn,
      hasDescendBtn,
      nextSortOrder,
      handleClickSorter
    } = useColumnSorter(props, emit);
    const {
      filterPopupVisible,
      isFilterActive,
      isMultipleFilter,
      columnFilterValue,
      handleFilterPopupVisibleChange,
      setFilterValue,
      handleCheckboxFilterChange,
      handleRadioFilterChange,
      handleFilterConfirm,
      handleFilterReset
    } = useColumnFilter(props, emit);
    const renderFilterContent = () => {
      let _slot, _slot2;
      const {
        filterable
      } = props.column;
      if (filterable == null ? void 0 : filterable.renderContent) {
        return filterable.renderContent({
          filterValue: columnFilterValue.value,
          setFilterValue,
          handleFilterConfirm,
          handleFilterReset
        });
      }
      return createVNode("div", {
        "class": `${prefixCls}-filters-content`
      }, [createVNode("ul", {
        "class": `${prefixCls}-filters-list`
      }, [filterable == null ? void 0 : filterable.filters.map((item, index) => {
        var _a;
        return createVNode("li", {
          "class": `${prefixCls}-filters-item`,
          "key": index
        }, [isMultipleFilter.value ? createVNode(Checkbox, {
          "value": item.value,
          "modelValue": columnFilterValue.value,
          "uninjectGroupContext": true,
          "onChange": handleCheckboxFilterChange
        }, {
          default: () => [item.text]
        }) : createVNode(Radio, {
          "value": item.value,
          "modelValue": (_a = columnFilterValue.value[0]) != null ? _a : "",
          "uninjectGroupContext": true,
          "onChange": handleRadioFilterChange
        }, {
          default: () => [item.text]
        })]);
      })]), createVNode("div", {
        "class": `${prefixCls}-filters-bottom`
      }, [createVNode(Button, {
        "size": "mini",
        "onClick": handleFilterReset
      }, _isSlot(_slot = t("table.resetText")) ? _slot : {
        default: () => [_slot]
      }), createVNode(Button, {
        "type": "primary",
        "size": "mini",
        "onClick": handleFilterConfirm
      }, _isSlot(_slot2 = t("table.okText")) ? _slot2 : {
        default: () => [_slot2]
      })])]);
    };
    const renderFilter = () => {
      const {
        filterable
      } = props.column;
      if (!filterable || filterable.filters.length === 0) {
        return null;
      }
      return createVNode(Trigger, mergeProps({
        "popupVisible": filterPopupVisible.value,
        "trigger": "click",
        "autoFitPosition": true,
        "popupOffset": filterIconAlignLeft.value ? 4 : 0,
        "onPopupVisibleChange": handleFilterPopupVisibleChange
      }, filterable.triggerProps), {
        default: () => [createVNode(IconHover, {
          "class": [`${prefixCls}-filters`, {
            [`${prefixCls}-filters-active`]: isFilterActive.value,
            [`${prefixCls}-filters-open`]: filterPopupVisible.value,
            [`${prefixCls}-filters-align-left`]: filterIconAlignLeft.value
          }],
          "disabled": !filterIconAlignLeft.value,
          "onClick": (ev) => ev.stopPropagation()
        }, {
          default: () => {
            var _a, _b;
            return [(_b = (_a = filterable.icon) == null ? void 0 : _a.call(filterable)) != null ? _b : createVNode(IconFilter, null, null)];
          }
        })],
        content: renderFilterContent
      });
    };
    const cellCls = computed(() => {
      var _a;
      const cls2 = [`${prefixCls}-cell`, {
        [`${prefixCls}-cell-text-ellipsis`]: (_a = props.column) == null ? void 0 : _a.ellipsis
      }];
      if (hasSorter.value) {
        cls2.push(`${prefixCls}-cell-with-sorter`, {
          [`${prefixCls}-cell-next-ascend`]: nextSortOrder.value === "ascend",
          [`${prefixCls}-cell-next-descend`]: nextSortOrder.value === "descend"
        });
      }
      if (filterIconAlignLeft.value) {
        cls2.push(`${prefixCls}-cell-with-filter`);
      }
      return cls2;
    });
    const renderTitle = () => {
      if (slots.default) {
        return slots.default();
      }
      if (isFunction(props.column.title)) {
        return props.column.title();
      }
      return props.column.title;
    };
    const renderCell = () => {
      var _a;
      return createVNode("span", {
        "class": cellCls.value,
        "style": (_a = props.column) == null ? void 0 : _a.cellStyle,
        "onClick": hasSorter.value ? handleClickSorter : void 0
      }, [createVNode("span", {
        "class": `${prefixCls}-th-item-title`
      }, [renderTitle()]), hasSorter.value && createVNode("span", {
        "class": `${prefixCls}-sorter`
      }, [hasAscendBtn.value && createVNode("div", {
        "class": [`${prefixCls}-sorter-icon`, {
          [`${prefixCls}-sorter-icon-active`]: props.sortOrder === "ascend"
        }]
      }, [createVNode(IconCaretUp, null, null)]), hasDescendBtn.value && createVNode("div", {
        "class": [`${prefixCls}-sorter-icon`, {
          [`${prefixCls}-sorter-icon-active`]: props.sortOrder === "descend"
        }]
      }, [createVNode(IconCaretDown, null, null)])]), filterIconAlignLeft.value && renderFilter()]);
    };
    const style = computed(() => getStyle(props.column, {
      dataColumns: props.dataColumns,
      operations: props.operations
    }));
    const cls = computed(() => {
      var _a, _b;
      return [`${prefixCls}-th`, `${prefixCls}-th-align-${(_b = (_a = props.column) == null ? void 0 : _a.align) != null ? _b : "left"}`, {
        [`${prefixCls}-col-sorted`]: Boolean(props.sortOrder)
      }, ...getFixedCls(prefixCls, props.column)];
    });
    return () => {
      var _a, _b;
      const colSpan = (_a = props.column.colSpan) != null ? _a : 1;
      const rowSpan = (_b = props.column.rowSpan) != null ? _b : 1;
      return createVNode("th", {
        "class": cls.value,
        "style": style.value,
        "colspan": colSpan > 1 ? colSpan : void 0,
        "rowspan": rowSpan > 1 ? rowSpan : void 0
      }, [renderCell(), !filterIconAlignLeft.value && renderFilter()]);
    };
  }
});
export { Th as default };
