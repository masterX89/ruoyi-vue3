import { CSSProperties, RenderFunction, Slot, VNode } from 'vue';
import { Data } from '../_utils/types';
import { TriggerProps } from '../trigger';
export declare const TABLE_PAGE_POSITION: readonly ["tl", "top", "tr", "bl", "bottom", "br"];
export declare type TablePagePosition = typeof TABLE_PAGE_POSITION[number];
export interface TableData {
    key?: string;
    expand?: string | RenderFunction;
    children?: TableData[];
    disabled?: boolean;
    isLeaf?: boolean;
    [name: string]: any;
}
export interface TableSortable {
    sortDirections: ('ascend' | 'descend')[];
    sorter?: ((a: any, b: any) => number) | boolean;
    sortOrder?: 'ascend' | 'descend' | '';
    defaultSortOrder?: 'ascend' | 'descend' | '';
}
interface TableFilterData {
    text: string | RenderFunction;
    value: string;
}
export interface TableFilterable {
    filters: TableFilterData[];
    filter: (filteredValue: string[], record: TableData) => boolean;
    multiple?: boolean;
    filteredValue?: string[];
    defaultFilteredValue?: string[];
    renderContent?: (data: {
        filterValue: string[];
        setFilterValue: (filterValue: string[]) => void;
        handleFilterConfirm: (event: Event) => void;
        handleFilterReset: (event: Event) => void;
    }) => VNode;
    icon?: () => VNode;
    triggerProps?: TriggerProps;
    alignLeft?: boolean;
}
export interface TableColumn {
    dataIndex: string;
    title?: string | RenderFunction;
    width?: number;
    align?: 'left' | 'center' | 'right';
    fixed?: 'left' | 'right';
    ellipsis?: boolean;
    sortable?: TableSortable;
    filterable?: TableFilterable;
    children?: TableColumn[];
    cellStyle?: CSSProperties;
    render?: ({ record, column, rowIndex, }: {
        record: TableData;
        column: TableColumn;
        rowIndex: number;
    }) => VNode;
    isLastLeftFixed?: boolean;
    isFirstRightFixed?: boolean;
    slot?: Slot;
}
export interface TableCell extends TableColumn {
    colSpan?: number;
    rowSpan?: number;
}
export interface TableBorder {
    wrapper?: boolean;
    cell?: boolean;
    headerCell?: boolean;
    bodyCell?: boolean;
}
export interface TableRowSelection {
    type?: 'checkbox' | 'radio';
    selectedRowKeys?: string[];
    defaultSelectedRowKeys?: string[];
    showCheckedAll?: boolean;
    title?: string;
    width?: number;
    fixed?: boolean;
}
export interface TableExpandable {
    expandedRowKeys?: string[];
    defaultExpandedRowKeys?: string[];
    defaultExpandAllRows?: boolean;
    expandedRowRender?: (record: TableData) => VNode;
    icon?: (expanded: boolean, record: TableData) => VNode;
    title?: string;
    width?: number;
    fixed?: boolean;
}
export interface TableOperationColumn {
    name: string;
    title?: string;
    width?: number;
    fixed?: boolean;
    isLastLeftFixed?: boolean;
    columnNode?: (props: any) => VNode;
    bodyNode?: (record: TableData, props: any) => VNode;
}
export interface TableComponents {
    operations: (operations: {
        expand?: TableOperationColumn;
        selection?: TableOperationColumn;
    }) => TableOperationColumn[];
}
export interface TableProps {
    columns: TableColumn[];
    data: TableData[];
    bordered?: boolean | TableBorder;
    rowSelection?: TableRowSelection;
    expandable?: TableExpandable;
    pagination?: boolean | Data;
    pagePosition?: string;
}
export declare type Filters = Record<string, string[]>;
export declare type Sorter = {
    filed: string;
    direction: 'ascend' | 'descend';
} | Record<string, never>;
export {};
