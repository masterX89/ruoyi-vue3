import type { CSSProperties, PropType } from 'vue';
import type { TableColumn, TableExpandable, TableRowSelection, TableBorder, TableComponents, TableData } from './interface';
import { VirtualListProps } from '../_components/virtual-list/interface';
import { EmitType } from '../_utils/types';
declare const _default: import("vue").DefineComponent<{
    columns: {
        type: PropType<TableColumn[]>;
        default: () => never[];
    };
    data: {
        type: PropType<TableData[]>;
        default: () => never[];
    };
    bordered: {
        type: PropType<boolean | TableBorder>;
        default: boolean;
    };
    hoverable: {
        type: BooleanConstructor;
        default: boolean;
    };
    stripe: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: PropType<"small" | "mini" | "medium" | "large">;
        default: () => "small" | "mini" | "medium" | "large";
    };
    tableLayoutFixed: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    rowSelection: {
        type: PropType<TableRowSelection>;
    };
    expandable: {
        type: PropType<TableExpandable>;
    };
    scroll: {
        type: PropType<{
            x?: string | number | undefined;
            y?: string | number | undefined;
        }>;
    };
    pagination: {
        type: PropType<boolean | (Partial<{
            disabled: boolean;
            size: "small" | "mini" | "medium" | "large";
            defaultCurrent: number;
            defaultPageSize: number;
            hideOnSinglePage: boolean;
            simple: boolean;
            showTotal: boolean;
            showMore: boolean;
            showJumper: boolean;
            showPageSize: boolean;
            pageSizeOptions: number[];
            baseSize: number;
            bufferSize: number;
        }> & Omit<Readonly<{
            total?: unknown;
            current?: unknown;
            defaultCurrent?: unknown;
            pageSize?: unknown;
            defaultPageSize?: unknown;
            disabled?: unknown;
            hideOnSinglePage?: unknown;
            simple?: unknown;
            showTotal?: unknown;
            showMore?: unknown;
            showJumper?: unknown;
            showPageSize?: unknown;
            pageSizeOptions?: unknown;
            pageSizeProps?: unknown;
            size?: unknown;
            pageItemStyle?: unknown;
            activePageItemStyle?: unknown;
            baseSize?: unknown;
            bufferSize?: unknown;
            onChange?: unknown;
            onPageSizeChange?: unknown;
        } & {
            disabled: boolean;
            size: "small" | "mini" | "medium" | "large";
            total: number;
            defaultCurrent: number;
            defaultPageSize: number;
            hideOnSinglePage: boolean;
            simple: boolean;
            showTotal: boolean;
            showMore: boolean;
            showJumper: boolean;
            showPageSize: boolean;
            pageSizeOptions: number[];
            baseSize: number;
            bufferSize: number;
        } & {
            onChange?: EmitType<(value: number) => void> | undefined;
            current?: number | undefined;
            onPageSizeChange?: EmitType<(value: number) => void> | undefined;
            pageSize?: number | undefined;
            pageSizeProps?: unknown;
            pageItemStyle?: CSSProperties | undefined;
            activePageItemStyle?: CSSProperties | undefined;
        }> & {
            onChange?: ((...args: any[]) => any) | undefined;
            "onUpdate:current"?: ((...args: any[]) => any) | undefined;
            onPageSizeChange?: ((...args: any[]) => any) | undefined;
            "onUpdate:pageSize"?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "size" | "defaultCurrent" | "defaultPageSize" | "hideOnSinglePage" | "simple" | "showTotal" | "showMore" | "showJumper" | "showPageSize" | "pageSizeOptions" | "baseSize" | "bufferSize">)>;
        default: boolean;
    };
    pagePosition: {
        type: PropType<"br" | "tr" | "bottom" | "top" | "tl" | "bl">;
        default: string;
    };
    indentSize: {
        type: NumberConstructor;
        default: number;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    virtualListProps: {
        type: PropType<VirtualListProps>;
    };
    spanMethod: {
        type: PropType<(data: {
            record: TableData;
            column: TableColumn;
            rowIndex: number;
            columnIndex: number;
        }) => {
            rowspan?: number;
            colspan?: number;
        } | void>;
    };
    components: {
        type: PropType<TableComponents>;
    };
    loadMore: {
        type: PropType<(record: TableData, done: (children?: TableData[] | undefined) => void) => void>;
    };
    filterIconAlignLeft: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideExpandButtonOnEmpty: {
        type: BooleanConstructor;
        default: boolean;
    };
    onExpand: {
        type: PropType<EmitType<(rowKey: string) => void>>;
    };
    onExpandedChange: {
        type: PropType<EmitType<(rowKeys: string[]) => void>>;
    };
    onSelect: {
        type: PropType<(rowKeys: string[]) => void>;
    };
    onSelectAll: {
        type: PropType<(checked: boolean) => void>;
    };
    onSelectionChange: {
        type: PropType<(rowKeys: string[]) => void>;
    };
    onSorterChange: {
        type: PropType<(dataIndex: string, direction: string) => void>;
    };
    onFilterChange: {
        type: PropType<(dataIndex: string, filteredValues: string[]) => void>;
    };
    onPageChange: {
        type: PropType<(page: number) => void>;
    };
    onPageSizeChange: {
        type: PropType<(pageSize: number) => void>;
    };
    onCellClick: {
        type: PropType<(record: TableData, column: TableColumn) => void>;
    };
    onRowClick: {
        type: PropType<(record: TableData) => void>;
    };
    onHeaderClick: {
        type: PropType<(column: TableColumn) => void>;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "select" | "pageChange" | "pageSizeChange" | "expand" | "expandedChange" | "selectAll" | "selectionChange" | "sorterChange" | "filterChange" | "cellClick" | "rowClick" | "headerClick")[], "select" | "change" | "expand" | "pageChange" | "pageSizeChange" | "expandedChange" | "selectAll" | "selectionChange" | "sorterChange" | "filterChange" | "cellClick" | "rowClick" | "headerClick", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    columns?: unknown;
    data?: unknown;
    bordered?: unknown;
    hoverable?: unknown;
    stripe?: unknown;
    size?: unknown;
    tableLayoutFixed?: unknown;
    loading?: unknown;
    hideHeader?: unknown;
    rowSelection?: unknown;
    expandable?: unknown;
    scroll?: unknown;
    pagination?: unknown;
    pagePosition?: unknown;
    indentSize?: unknown;
    rowKey?: unknown;
    showHeader?: unknown;
    virtualListProps?: unknown;
    spanMethod?: unknown;
    components?: unknown;
    loadMore?: unknown;
    filterIconAlignLeft?: unknown;
    hideExpandButtonOnEmpty?: unknown;
    onExpand?: unknown;
    onExpandedChange?: unknown;
    onSelect?: unknown;
    onSelectAll?: unknown;
    onSelectionChange?: unknown;
    onSorterChange?: unknown;
    onFilterChange?: unknown;
    onPageChange?: unknown;
    onPageSizeChange?: unknown;
    onCellClick?: unknown;
    onRowClick?: unknown;
    onHeaderClick?: unknown;
} & {
    size: "small" | "mini" | "medium" | "large";
    data: TableData[];
    pagination: boolean | (Partial<{
        disabled: boolean;
        size: "small" | "mini" | "medium" | "large";
        defaultCurrent: number;
        defaultPageSize: number;
        hideOnSinglePage: boolean;
        simple: boolean;
        showTotal: boolean;
        showMore: boolean;
        showJumper: boolean;
        showPageSize: boolean;
        pageSizeOptions: number[];
        baseSize: number;
        bufferSize: number;
    }> & Omit<Readonly<{
        total?: unknown;
        current?: unknown;
        defaultCurrent?: unknown;
        pageSize?: unknown;
        defaultPageSize?: unknown;
        disabled?: unknown;
        hideOnSinglePage?: unknown;
        simple?: unknown;
        showTotal?: unknown;
        showMore?: unknown;
        showJumper?: unknown;
        showPageSize?: unknown;
        pageSizeOptions?: unknown;
        pageSizeProps?: unknown;
        size?: unknown;
        pageItemStyle?: unknown;
        activePageItemStyle?: unknown;
        baseSize?: unknown;
        bufferSize?: unknown;
        onChange?: unknown;
        onPageSizeChange?: unknown;
    } & {
        disabled: boolean;
        size: "small" | "mini" | "medium" | "large";
        total: number;
        defaultCurrent: number;
        defaultPageSize: number;
        hideOnSinglePage: boolean;
        simple: boolean;
        showTotal: boolean;
        showMore: boolean;
        showJumper: boolean;
        showPageSize: boolean;
        pageSizeOptions: number[];
        baseSize: number;
        bufferSize: number;
    } & {
        onChange?: EmitType<(value: number) => void> | undefined;
        current?: number | undefined;
        onPageSizeChange?: EmitType<(value: number) => void> | undefined;
        pageSize?: number | undefined;
        pageSizeProps?: unknown;
        pageItemStyle?: CSSProperties | undefined;
        activePageItemStyle?: CSSProperties | undefined;
    }> & {
        onChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:current"?: ((...args: any[]) => any) | undefined;
        onPageSizeChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:pageSize"?: ((...args: any[]) => any) | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "size" | "defaultCurrent" | "defaultPageSize" | "hideOnSinglePage" | "simple" | "showTotal" | "showMore" | "showJumper" | "showPageSize" | "pageSizeOptions" | "baseSize" | "bufferSize">);
    loading: boolean;
    bordered: boolean | TableBorder;
    columns: TableColumn[];
    hoverable: boolean;
    stripe: boolean;
    tableLayoutFixed: boolean;
    hideHeader: boolean;
    pagePosition: "br" | "tr" | "bottom" | "top" | "tl" | "bl";
    indentSize: number;
    rowKey: string;
    showHeader: boolean;
    filterIconAlignLeft: boolean;
    hideExpandButtonOnEmpty: boolean;
} & {
    onSelect?: ((rowKeys: string[]) => void) | undefined;
    scroll?: {
        x?: string | number | undefined;
        y?: string | number | undefined;
    } | undefined;
    onPageSizeChange?: ((pageSize: number) => void) | undefined;
    onPageChange?: ((page: number) => void) | undefined;
    virtualListProps?: VirtualListProps | undefined;
    onExpand?: EmitType<(rowKey: string) => void> | undefined;
    onExpandedChange?: EmitType<(rowKeys: string[]) => void> | undefined;
    onSelectAll?: ((checked: boolean) => void) | undefined;
    onSelectionChange?: ((rowKeys: string[]) => void) | undefined;
    onSorterChange?: ((dataIndex: string, direction: string) => void) | undefined;
    onFilterChange?: ((dataIndex: string, filteredValues: string[]) => void) | undefined;
    onCellClick?: ((record: TableData, column: TableColumn) => void) | undefined;
    onRowClick?: ((record: TableData) => void) | undefined;
    onHeaderClick?: ((column: TableColumn) => void) | undefined;
    rowSelection?: TableRowSelection | undefined;
    expandable?: TableExpandable | undefined;
    spanMethod?: ((data: {
        record: TableData;
        column: TableColumn;
        rowIndex: number;
        columnIndex: number;
    }) => {
        rowspan?: number;
        colspan?: number;
    } | void) | undefined;
    components?: TableComponents | undefined;
    loadMore?: ((record: TableData, done: (children?: TableData[] | undefined) => void) => void) | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    onSelect?: ((...args: any[]) => any) | undefined;
    onPageSizeChange?: ((...args: any[]) => any) | undefined;
    onPageChange?: ((...args: any[]) => any) | undefined;
    onExpand?: ((...args: any[]) => any) | undefined;
    onExpandedChange?: ((...args: any[]) => any) | undefined;
    onSelectAll?: ((...args: any[]) => any) | undefined;
    onSelectionChange?: ((...args: any[]) => any) | undefined;
    onSorterChange?: ((...args: any[]) => any) | undefined;
    onFilterChange?: ((...args: any[]) => any) | undefined;
    onCellClick?: ((...args: any[]) => any) | undefined;
    onRowClick?: ((...args: any[]) => any) | undefined;
    onHeaderClick?: ((...args: any[]) => any) | undefined;
}, {
    size: "small" | "mini" | "medium" | "large";
    data: TableData[];
    pagination: boolean | (Partial<{
        disabled: boolean;
        size: "small" | "mini" | "medium" | "large";
        defaultCurrent: number;
        defaultPageSize: number;
        hideOnSinglePage: boolean;
        simple: boolean;
        showTotal: boolean;
        showMore: boolean;
        showJumper: boolean;
        showPageSize: boolean;
        pageSizeOptions: number[];
        baseSize: number;
        bufferSize: number;
    }> & Omit<Readonly<{
        total?: unknown;
        current?: unknown;
        defaultCurrent?: unknown;
        pageSize?: unknown;
        defaultPageSize?: unknown;
        disabled?: unknown;
        hideOnSinglePage?: unknown;
        simple?: unknown;
        showTotal?: unknown;
        showMore?: unknown;
        showJumper?: unknown;
        showPageSize?: unknown;
        pageSizeOptions?: unknown;
        pageSizeProps?: unknown;
        size?: unknown;
        pageItemStyle?: unknown;
        activePageItemStyle?: unknown;
        baseSize?: unknown;
        bufferSize?: unknown;
        onChange?: unknown;
        onPageSizeChange?: unknown;
    } & {
        disabled: boolean;
        size: "small" | "mini" | "medium" | "large";
        total: number;
        defaultCurrent: number;
        defaultPageSize: number;
        hideOnSinglePage: boolean;
        simple: boolean;
        showTotal: boolean;
        showMore: boolean;
        showJumper: boolean;
        showPageSize: boolean;
        pageSizeOptions: number[];
        baseSize: number;
        bufferSize: number;
    } & {
        onChange?: EmitType<(value: number) => void> | undefined;
        current?: number | undefined;
        onPageSizeChange?: EmitType<(value: number) => void> | undefined;
        pageSize?: number | undefined;
        pageSizeProps?: unknown;
        pageItemStyle?: CSSProperties | undefined;
        activePageItemStyle?: CSSProperties | undefined;
    }> & {
        onChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:current"?: ((...args: any[]) => any) | undefined;
        onPageSizeChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:pageSize"?: ((...args: any[]) => any) | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "size" | "defaultCurrent" | "defaultPageSize" | "hideOnSinglePage" | "simple" | "showTotal" | "showMore" | "showJumper" | "showPageSize" | "pageSizeOptions" | "baseSize" | "bufferSize">);
    loading: boolean;
    bordered: boolean | TableBorder;
    columns: TableColumn[];
    hoverable: boolean;
    stripe: boolean;
    tableLayoutFixed: boolean;
    hideHeader: boolean;
    pagePosition: "br" | "tr" | "bottom" | "top" | "tl" | "bl";
    indentSize: number;
    rowKey: string;
    showHeader: boolean;
    filterIconAlignLeft: boolean;
    hideExpandButtonOnEmpty: boolean;
}>;
export default _default;
