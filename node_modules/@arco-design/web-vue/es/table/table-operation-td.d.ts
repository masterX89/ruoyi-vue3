import { PropType } from 'vue';
import { TableData, TableOperationColumn } from './interface';
declare const _default: import("vue").DefineComponent<{
    record: {
        type: PropType<TableData>;
        required: true;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
    };
    operationColumn: {
        type: PropType<TableOperationColumn>;
        required: true;
    };
    operations: {
        type: PropType<TableOperationColumn[]>;
        required: true;
    };
    isRadio: {
        type: BooleanConstructor;
    };
    hasExpand: {
        type: BooleanConstructor;
    };
    selectedRowKeys: {
        type: ArrayConstructor;
        required: true;
    };
    expandedIcon: {
        type: FunctionConstructor;
    };
    expandedRowKeys: {
        type: ArrayConstructor;
        required: true;
    };
    renderExpandBtn: {
        type: FunctionConstructor;
        required: true;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("select" | "expand")[], "select" | "expand", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    record?: unknown;
    rowKey?: unknown;
    operationColumn?: unknown;
    operations?: unknown;
    isRadio?: unknown;
    hasExpand?: unknown;
    selectedRowKeys?: unknown;
    expandedIcon?: unknown;
    expandedRowKeys?: unknown;
    renderExpandBtn?: unknown;
} & {
    rowKey: string;
    operations: TableOperationColumn[];
    record: TableData;
    renderExpandBtn: Function;
    operationColumn: TableOperationColumn;
    isRadio: boolean;
    hasExpand: boolean;
    selectedRowKeys: unknown[];
    expandedRowKeys: unknown[];
} & {
    expandedIcon?: Function | undefined;
}> & {
    onSelect?: ((...args: any[]) => any) | undefined;
    onExpand?: ((...args: any[]) => any) | undefined;
}, {
    rowKey: string;
    isRadio: boolean;
    hasExpand: boolean;
}>;
export default _default;
