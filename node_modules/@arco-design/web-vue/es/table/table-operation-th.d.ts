import { PropType } from 'vue';
import { TableOperationColumn } from './interface';
declare const _default: import("vue").DefineComponent<{
    operationColumn: {
        type: PropType<TableOperationColumn>;
        required: true;
    };
    operations: {
        type: PropType<TableOperationColumn[]>;
        required: true;
    };
    isRadio: {
        type: BooleanConstructor;
    };
    rowSelection: {
        type: ObjectConstructor;
    };
    expandable: {
        type: ObjectConstructor;
    };
    selectedNumber: {
        type: NumberConstructor;
        default: number;
    };
    totalNumber: {
        type: NumberConstructor;
        default: number;
    };
    rowSpan: {
        type: NumberConstructor;
        default: number;
    };
    totalEnabledNumber: {
        type: NumberConstructor;
        default: number;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "selectAll"[], "selectAll", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    operationColumn?: unknown;
    operations?: unknown;
    isRadio?: unknown;
    rowSelection?: unknown;
    expandable?: unknown;
    selectedNumber?: unknown;
    totalNumber?: unknown;
    rowSpan?: unknown;
    totalEnabledNumber?: unknown;
} & {
    operations: TableOperationColumn[];
    rowSpan: number;
    operationColumn: TableOperationColumn;
    isRadio: boolean;
    selectedNumber: number;
    totalNumber: number;
    totalEnabledNumber: number;
} & {
    rowSelection?: Record<string, any> | undefined;
    expandable?: Record<string, any> | undefined;
}> & {
    onSelectAll?: ((...args: any[]) => any) | undefined;
}, {
    rowSpan: number;
    isRadio: boolean;
    selectedNumber: number;
    totalNumber: number;
    totalEnabledNumber: number;
}>;
export default _default;
