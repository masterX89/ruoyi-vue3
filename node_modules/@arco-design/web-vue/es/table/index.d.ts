import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _Table from './table';
import _Thead from './table-thead';
import _Tbody from './table-tbody';
import _Tr from './table-tr';
import _Th from './table-th';
import _Td from './table-td';
import _Column from './table-column';
declare const Table: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            size: "small" | "mini" | "medium" | "large";
            data: import("./interface").TableData[];
            pagination: boolean | (Partial<{
                disabled: boolean;
                size: "small" | "mini" | "medium" | "large";
                defaultCurrent: number;
                defaultPageSize: number;
                hideOnSinglePage: boolean;
                simple: boolean;
                showTotal: boolean;
                showMore: boolean;
                showJumper: boolean;
                showPageSize: boolean;
                pageSizeOptions: number[];
                baseSize: number;
                bufferSize: number;
            }> & Omit<Readonly<{
                total?: unknown;
                current?: unknown;
                defaultCurrent?: unknown;
                pageSize?: unknown;
                defaultPageSize?: unknown;
                disabled?: unknown;
                hideOnSinglePage?: unknown;
                simple?: unknown;
                showTotal?: unknown;
                showMore?: unknown;
                showJumper?: unknown;
                showPageSize?: unknown;
                pageSizeOptions?: unknown;
                pageSizeProps?: unknown;
                size?: unknown;
                pageItemStyle?: unknown;
                activePageItemStyle?: unknown;
                baseSize?: unknown;
                bufferSize?: unknown;
                onChange?: unknown;
                onPageSizeChange?: unknown;
            } & {
                disabled: boolean;
                size: "small" | "mini" | "medium" | "large";
                total: number;
                defaultCurrent: number;
                defaultPageSize: number;
                hideOnSinglePage: boolean;
                simple: boolean;
                showTotal: boolean;
                showMore: boolean;
                showJumper: boolean;
                showPageSize: boolean;
                pageSizeOptions: number[];
                baseSize: number;
                bufferSize: number;
            } & {
                onChange?: import("../_utils/types").EmitType<(value: number) => void> | undefined;
                current?: number | undefined;
                onPageSizeChange?: import("../_utils/types").EmitType<(value: number) => void> | undefined;
                pageSize?: number | undefined;
                pageSizeProps?: unknown;
                pageItemStyle?: import("vue").CSSProperties | undefined;
                activePageItemStyle?: import("vue").CSSProperties | undefined;
            }> & {
                onChange?: ((...args: any[]) => any) | undefined;
                "onUpdate:current"?: ((...args: any[]) => any) | undefined;
                onPageSizeChange?: ((...args: any[]) => any) | undefined;
                "onUpdate:pageSize"?: ((...args: any[]) => any) | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "size" | "defaultCurrent" | "defaultPageSize" | "hideOnSinglePage" | "simple" | "showTotal" | "showMore" | "showJumper" | "showPageSize" | "pageSizeOptions" | "baseSize" | "bufferSize">);
            loading: boolean;
            bordered: boolean | import("./interface").TableBorder;
            columns: import("./interface").TableColumn[];
            hoverable: boolean;
            stripe: boolean;
            tableLayoutFixed: boolean;
            hideHeader: boolean;
            pagePosition: "br" | "tr" | "bottom" | "top" | "tl" | "bl";
            indentSize: number;
            rowKey: string;
            showHeader: boolean;
            filterIconAlignLeft: boolean;
            hideExpandButtonOnEmpty: boolean;
        }> & Omit<Readonly<{
            columns?: unknown;
            data?: unknown;
            bordered?: unknown;
            hoverable?: unknown;
            stripe?: unknown;
            size?: unknown;
            tableLayoutFixed?: unknown;
            loading?: unknown;
            hideHeader?: unknown;
            rowSelection?: unknown;
            expandable?: unknown;
            scroll?: unknown;
            pagination?: unknown;
            pagePosition?: unknown;
            indentSize?: unknown;
            rowKey?: unknown;
            showHeader?: unknown;
            virtualListProps?: unknown;
            spanMethod?: unknown;
            components?: unknown;
            loadMore?: unknown;
            filterIconAlignLeft?: unknown;
            hideExpandButtonOnEmpty?: unknown;
            onExpand?: unknown;
            onExpandedChange?: unknown;
            onSelect?: unknown;
            onSelectAll?: unknown;
            onSelectionChange?: unknown;
            onSorterChange?: unknown;
            onFilterChange?: unknown;
            onPageChange?: unknown;
            onPageSizeChange?: unknown;
            onCellClick?: unknown;
            onRowClick?: unknown;
            onHeaderClick?: unknown;
        } & {
            size: "small" | "mini" | "medium" | "large";
            data: import("./interface").TableData[];
            pagination: boolean | (Partial<{
                disabled: boolean;
                size: "small" | "mini" | "medium" | "large";
                defaultCurrent: number;
                defaultPageSize: number;
                hideOnSinglePage: boolean;
                simple: boolean;
                showTotal: boolean;
                showMore: boolean;
                showJumper: boolean;
                showPageSize: boolean;
                pageSizeOptions: number[];
                baseSize: number;
                bufferSize: number;
            }> & Omit<Readonly<{
                total?: unknown;
                current?: unknown;
                defaultCurrent?: unknown;
                pageSize?: unknown;
                defaultPageSize?: unknown;
                disabled?: unknown;
                hideOnSinglePage?: unknown;
                simple?: unknown;
                showTotal?: unknown;
                showMore?: unknown;
                showJumper?: unknown;
                showPageSize?: unknown;
                pageSizeOptions?: unknown;
                pageSizeProps?: unknown;
                size?: unknown;
                pageItemStyle?: unknown;
                activePageItemStyle?: unknown;
                baseSize?: unknown;
                bufferSize?: unknown;
                onChange?: unknown;
                onPageSizeChange?: unknown;
            } & {
                disabled: boolean;
                size: "small" | "mini" | "medium" | "large";
                total: number;
                defaultCurrent: number;
                defaultPageSize: number;
                hideOnSinglePage: boolean;
                simple: boolean;
                showTotal: boolean;
                showMore: boolean;
                showJumper: boolean;
                showPageSize: boolean;
                pageSizeOptions: number[];
                baseSize: number;
                bufferSize: number;
            } & {
                onChange?: import("../_utils/types").EmitType<(value: number) => void> | undefined;
                current?: number | undefined;
                onPageSizeChange?: import("../_utils/types").EmitType<(value: number) => void> | undefined;
                pageSize?: number | undefined;
                pageSizeProps?: unknown;
                pageItemStyle?: import("vue").CSSProperties | undefined;
                activePageItemStyle?: import("vue").CSSProperties | undefined;
            }> & {
                onChange?: ((...args: any[]) => any) | undefined;
                "onUpdate:current"?: ((...args: any[]) => any) | undefined;
                onPageSizeChange?: ((...args: any[]) => any) | undefined;
                "onUpdate:pageSize"?: ((...args: any[]) => any) | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "size" | "defaultCurrent" | "defaultPageSize" | "hideOnSinglePage" | "simple" | "showTotal" | "showMore" | "showJumper" | "showPageSize" | "pageSizeOptions" | "baseSize" | "bufferSize">);
            loading: boolean;
            bordered: boolean | import("./interface").TableBorder;
            columns: import("./interface").TableColumn[];
            hoverable: boolean;
            stripe: boolean;
            tableLayoutFixed: boolean;
            hideHeader: boolean;
            pagePosition: "br" | "tr" | "bottom" | "top" | "tl" | "bl";
            indentSize: number;
            rowKey: string;
            showHeader: boolean;
            filterIconAlignLeft: boolean;
            hideExpandButtonOnEmpty: boolean;
        } & {
            onSelect?: ((rowKeys: string[]) => void) | undefined;
            scroll?: {
                x?: string | number | undefined;
                y?: string | number | undefined;
            } | undefined;
            onPageSizeChange?: ((pageSize: number) => void) | undefined;
            onPageChange?: ((page: number) => void) | undefined;
            virtualListProps?: import("../_components/virtual-list/interface").VirtualListProps | undefined;
            onExpand?: import("../_utils/types").EmitType<(rowKey: string) => void> | undefined;
            onExpandedChange?: import("../_utils/types").EmitType<(rowKeys: string[]) => void> | undefined;
            onSelectAll?: ((checked: boolean) => void) | undefined;
            onSelectionChange?: ((rowKeys: string[]) => void) | undefined;
            onSorterChange?: ((dataIndex: string, direction: string) => void) | undefined;
            onFilterChange?: ((dataIndex: string, filteredValues: string[]) => void) | undefined;
            onCellClick?: ((record: import("./interface").TableData, column: import("./interface").TableColumn) => void) | undefined;
            onRowClick?: ((record: import("./interface").TableData) => void) | undefined;
            onHeaderClick?: ((column: import("./interface").TableColumn) => void) | undefined;
            rowSelection?: import("./interface").TableRowSelection | undefined;
            expandable?: import("./interface").TableExpandable | undefined;
            spanMethod?: ((data: {
                record: import("./interface").TableData;
                column: import("./interface").TableColumn;
                rowIndex: number;
                columnIndex: number;
            }) => void | {
                rowspan?: number | undefined;
                colspan?: number | undefined;
            }) | undefined;
            components?: import("./interface").TableComponents | undefined;
            loadMore?: ((record: import("./interface").TableData, done: (children?: import("./interface").TableData[] | undefined) => void) => void) | undefined;
        }> & {
            onChange?: ((...args: any[]) => any) | undefined;
            onSelect?: ((...args: any[]) => any) | undefined;
            onPageSizeChange?: ((...args: any[]) => any) | undefined;
            onPageChange?: ((...args: any[]) => any) | undefined;
            onExpand?: ((...args: any[]) => any) | undefined;
            onExpandedChange?: ((...args: any[]) => any) | undefined;
            onSelectAll?: ((...args: any[]) => any) | undefined;
            onSelectionChange?: ((...args: any[]) => any) | undefined;
            onSorterChange?: ((...args: any[]) => any) | undefined;
            onFilterChange?: ((...args: any[]) => any) | undefined;
            onCellClick?: ((...args: any[]) => any) | undefined;
            onRowClick?: ((...args: any[]) => any) | undefined;
            onHeaderClick?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "size" | "data" | "pagination" | "loading" | "bordered" | "columns" | "hoverable" | "stripe" | "tableLayoutFixed" | "hideHeader" | "pagePosition" | "indentSize" | "rowKey" | "showHeader" | "filterIconAlignLeft" | "hideExpandButtonOnEmpty">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "change" | "select" | "pageChange" | "pageSizeChange" | "expand" | "expandedChange" | "selectAll" | "selectionChange" | "sorterChange" | "filterChange" | "cellClick" | "rowClick" | "headerClick", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            columns?: unknown;
            data?: unknown;
            bordered?: unknown;
            hoverable?: unknown;
            stripe?: unknown;
            size?: unknown;
            tableLayoutFixed?: unknown;
            loading?: unknown;
            hideHeader?: unknown;
            rowSelection?: unknown;
            expandable?: unknown;
            scroll?: unknown;
            pagination?: unknown;
            pagePosition?: unknown;
            indentSize?: unknown;
            rowKey?: unknown;
            showHeader?: unknown;
            virtualListProps?: unknown;
            spanMethod?: unknown;
            components?: unknown;
            loadMore?: unknown;
            filterIconAlignLeft?: unknown;
            hideExpandButtonOnEmpty?: unknown;
            onExpand?: unknown;
            onExpandedChange?: unknown;
            onSelect?: unknown;
            onSelectAll?: unknown;
            onSelectionChange?: unknown;
            onSorterChange?: unknown;
            onFilterChange?: unknown;
            onPageChange?: unknown;
            onPageSizeChange?: unknown;
            onCellClick?: unknown;
            onRowClick?: unknown;
            onHeaderClick?: unknown;
        } & {
            size: "small" | "mini" | "medium" | "large";
            data: import("./interface").TableData[];
            pagination: boolean | (Partial<{
                disabled: boolean;
                size: "small" | "mini" | "medium" | "large";
                defaultCurrent: number;
                defaultPageSize: number;
                hideOnSinglePage: boolean;
                simple: boolean;
                showTotal: boolean;
                showMore: boolean;
                showJumper: boolean;
                showPageSize: boolean;
                pageSizeOptions: number[];
                baseSize: number;
                bufferSize: number;
            }> & Omit<Readonly<{
                total?: unknown;
                current?: unknown;
                defaultCurrent?: unknown;
                pageSize?: unknown;
                defaultPageSize?: unknown;
                disabled?: unknown;
                hideOnSinglePage?: unknown;
                simple?: unknown;
                showTotal?: unknown;
                showMore?: unknown;
                showJumper?: unknown;
                showPageSize?: unknown;
                pageSizeOptions?: unknown;
                pageSizeProps?: unknown;
                size?: unknown;
                pageItemStyle?: unknown;
                activePageItemStyle?: unknown;
                baseSize?: unknown;
                bufferSize?: unknown;
                onChange?: unknown;
                onPageSizeChange?: unknown;
            } & {
                disabled: boolean;
                size: "small" | "mini" | "medium" | "large";
                total: number;
                defaultCurrent: number;
                defaultPageSize: number;
                hideOnSinglePage: boolean;
                simple: boolean;
                showTotal: boolean;
                showMore: boolean;
                showJumper: boolean;
                showPageSize: boolean;
                pageSizeOptions: number[];
                baseSize: number;
                bufferSize: number;
            } & {
                onChange?: import("../_utils/types").EmitType<(value: number) => void> | undefined;
                current?: number | undefined;
                onPageSizeChange?: import("../_utils/types").EmitType<(value: number) => void> | undefined;
                pageSize?: number | undefined;
                pageSizeProps?: unknown;
                pageItemStyle?: import("vue").CSSProperties | undefined;
                activePageItemStyle?: import("vue").CSSProperties | undefined;
            }> & {
                onChange?: ((...args: any[]) => any) | undefined;
                "onUpdate:current"?: ((...args: any[]) => any) | undefined;
                onPageSizeChange?: ((...args: any[]) => any) | undefined;
                "onUpdate:pageSize"?: ((...args: any[]) => any) | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "size" | "defaultCurrent" | "defaultPageSize" | "hideOnSinglePage" | "simple" | "showTotal" | "showMore" | "showJumper" | "showPageSize" | "pageSizeOptions" | "baseSize" | "bufferSize">);
            loading: boolean;
            bordered: boolean | import("./interface").TableBorder;
            columns: import("./interface").TableColumn[];
            hoverable: boolean;
            stripe: boolean;
            tableLayoutFixed: boolean;
            hideHeader: boolean;
            pagePosition: "br" | "tr" | "bottom" | "top" | "tl" | "bl";
            indentSize: number;
            rowKey: string;
            showHeader: boolean;
            filterIconAlignLeft: boolean;
            hideExpandButtonOnEmpty: boolean;
        } & {
            onSelect?: ((rowKeys: string[]) => void) | undefined;
            scroll?: {
                x?: string | number | undefined;
                y?: string | number | undefined;
            } | undefined;
            onPageSizeChange?: ((pageSize: number) => void) | undefined;
            onPageChange?: ((page: number) => void) | undefined;
            virtualListProps?: import("../_components/virtual-list/interface").VirtualListProps | undefined;
            onExpand?: import("../_utils/types").EmitType<(rowKey: string) => void> | undefined;
            onExpandedChange?: import("../_utils/types").EmitType<(rowKeys: string[]) => void> | undefined;
            onSelectAll?: ((checked: boolean) => void) | undefined;
            onSelectionChange?: ((rowKeys: string[]) => void) | undefined;
            onSorterChange?: ((dataIndex: string, direction: string) => void) | undefined;
            onFilterChange?: ((dataIndex: string, filteredValues: string[]) => void) | undefined;
            onCellClick?: ((record: import("./interface").TableData, column: import("./interface").TableColumn) => void) | undefined;
            onRowClick?: ((record: import("./interface").TableData) => void) | undefined;
            onHeaderClick?: ((column: import("./interface").TableColumn) => void) | undefined;
            rowSelection?: import("./interface").TableRowSelection | undefined;
            expandable?: import("./interface").TableExpandable | undefined;
            spanMethod?: ((data: {
                record: import("./interface").TableData;
                column: import("./interface").TableColumn;
                rowIndex: number;
                columnIndex: number;
            }) => void | {
                rowspan?: number | undefined;
                colspan?: number | undefined;
            }) | undefined;
            components?: import("./interface").TableComponents | undefined;
            loadMore?: ((record: import("./interface").TableData, done: (children?: import("./interface").TableData[] | undefined) => void) => void) | undefined;
        }> & {
            onChange?: ((...args: any[]) => any) | undefined;
            onSelect?: ((...args: any[]) => any) | undefined;
            onPageSizeChange?: ((...args: any[]) => any) | undefined;
            onPageChange?: ((...args: any[]) => any) | undefined;
            onExpand?: ((...args: any[]) => any) | undefined;
            onExpandedChange?: ((...args: any[]) => any) | undefined;
            onSelectAll?: ((...args: any[]) => any) | undefined;
            onSelectionChange?: ((...args: any[]) => any) | undefined;
            onSorterChange?: ((...args: any[]) => any) | undefined;
            onFilterChange?: ((...args: any[]) => any) | undefined;
            onCellClick?: ((...args: any[]) => any) | undefined;
            onRowClick?: ((...args: any[]) => any) | undefined;
            onHeaderClick?: ((...args: any[]) => any) | undefined;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "select" | "pageChange" | "pageSizeChange" | "expand" | "expandedChange" | "selectAll" | "selectionChange" | "sorterChange" | "filterChange" | "cellClick" | "rowClick" | "headerClick")[], string, {
            size: "small" | "mini" | "medium" | "large";
            data: import("./interface").TableData[];
            pagination: boolean | (Partial<{
                disabled: boolean;
                size: "small" | "mini" | "medium" | "large";
                defaultCurrent: number;
                defaultPageSize: number;
                hideOnSinglePage: boolean;
                simple: boolean;
                showTotal: boolean;
                showMore: boolean;
                showJumper: boolean;
                showPageSize: boolean;
                pageSizeOptions: number[];
                baseSize: number;
                bufferSize: number;
            }> & Omit<Readonly<{
                total?: unknown;
                current?: unknown;
                defaultCurrent?: unknown;
                pageSize?: unknown;
                defaultPageSize?: unknown;
                disabled?: unknown;
                hideOnSinglePage?: unknown;
                simple?: unknown;
                showTotal?: unknown;
                showMore?: unknown;
                showJumper?: unknown;
                showPageSize?: unknown;
                pageSizeOptions?: unknown;
                pageSizeProps?: unknown;
                size?: unknown;
                pageItemStyle?: unknown;
                activePageItemStyle?: unknown;
                baseSize?: unknown;
                bufferSize?: unknown;
                onChange?: unknown;
                onPageSizeChange?: unknown;
            } & {
                disabled: boolean;
                size: "small" | "mini" | "medium" | "large";
                total: number;
                defaultCurrent: number;
                defaultPageSize: number;
                hideOnSinglePage: boolean;
                simple: boolean;
                showTotal: boolean;
                showMore: boolean;
                showJumper: boolean;
                showPageSize: boolean;
                pageSizeOptions: number[];
                baseSize: number;
                bufferSize: number;
            } & {
                onChange?: import("../_utils/types").EmitType<(value: number) => void> | undefined;
                current?: number | undefined;
                onPageSizeChange?: import("../_utils/types").EmitType<(value: number) => void> | undefined;
                pageSize?: number | undefined;
                pageSizeProps?: unknown;
                pageItemStyle?: import("vue").CSSProperties | undefined;
                activePageItemStyle?: import("vue").CSSProperties | undefined;
            }> & {
                onChange?: ((...args: any[]) => any) | undefined;
                "onUpdate:current"?: ((...args: any[]) => any) | undefined;
                onPageSizeChange?: ((...args: any[]) => any) | undefined;
                "onUpdate:pageSize"?: ((...args: any[]) => any) | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "size" | "defaultCurrent" | "defaultPageSize" | "hideOnSinglePage" | "simple" | "showTotal" | "showMore" | "showJumper" | "showPageSize" | "pageSizeOptions" | "baseSize" | "bufferSize">);
            loading: boolean;
            bordered: boolean | import("./interface").TableBorder;
            columns: import("./interface").TableColumn[];
            hoverable: boolean;
            stripe: boolean;
            tableLayoutFixed: boolean;
            hideHeader: boolean;
            pagePosition: "br" | "tr" | "bottom" | "top" | "tl" | "bl";
            indentSize: number;
            rowKey: string;
            showHeader: boolean;
            filterIconAlignLeft: boolean;
            hideExpandButtonOnEmpty: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        columns?: unknown;
        data?: unknown;
        bordered?: unknown;
        hoverable?: unknown;
        stripe?: unknown;
        size?: unknown;
        tableLayoutFixed?: unknown;
        loading?: unknown;
        hideHeader?: unknown;
        rowSelection?: unknown;
        expandable?: unknown;
        scroll?: unknown;
        pagination?: unknown;
        pagePosition?: unknown;
        indentSize?: unknown;
        rowKey?: unknown;
        showHeader?: unknown;
        virtualListProps?: unknown;
        spanMethod?: unknown;
        components?: unknown;
        loadMore?: unknown;
        filterIconAlignLeft?: unknown;
        hideExpandButtonOnEmpty?: unknown;
        onExpand?: unknown;
        onExpandedChange?: unknown;
        onSelect?: unknown;
        onSelectAll?: unknown;
        onSelectionChange?: unknown;
        onSorterChange?: unknown;
        onFilterChange?: unknown;
        onPageChange?: unknown;
        onPageSizeChange?: unknown;
        onCellClick?: unknown;
        onRowClick?: unknown;
        onHeaderClick?: unknown;
    } & {
        size: "small" | "mini" | "medium" | "large";
        data: import("./interface").TableData[];
        pagination: boolean | (Partial<{
            disabled: boolean;
            size: "small" | "mini" | "medium" | "large";
            defaultCurrent: number;
            defaultPageSize: number;
            hideOnSinglePage: boolean;
            simple: boolean;
            showTotal: boolean;
            showMore: boolean;
            showJumper: boolean;
            showPageSize: boolean;
            pageSizeOptions: number[];
            baseSize: number;
            bufferSize: number;
        }> & Omit<Readonly<{
            total?: unknown;
            current?: unknown;
            defaultCurrent?: unknown;
            pageSize?: unknown;
            defaultPageSize?: unknown;
            disabled?: unknown;
            hideOnSinglePage?: unknown;
            simple?: unknown;
            showTotal?: unknown;
            showMore?: unknown;
            showJumper?: unknown;
            showPageSize?: unknown;
            pageSizeOptions?: unknown;
            pageSizeProps?: unknown;
            size?: unknown;
            pageItemStyle?: unknown;
            activePageItemStyle?: unknown;
            baseSize?: unknown;
            bufferSize?: unknown;
            onChange?: unknown;
            onPageSizeChange?: unknown;
        } & {
            disabled: boolean;
            size: "small" | "mini" | "medium" | "large";
            total: number;
            defaultCurrent: number;
            defaultPageSize: number;
            hideOnSinglePage: boolean;
            simple: boolean;
            showTotal: boolean;
            showMore: boolean;
            showJumper: boolean;
            showPageSize: boolean;
            pageSizeOptions: number[];
            baseSize: number;
            bufferSize: number;
        } & {
            onChange?: import("../_utils/types").EmitType<(value: number) => void> | undefined;
            current?: number | undefined;
            onPageSizeChange?: import("../_utils/types").EmitType<(value: number) => void> | undefined;
            pageSize?: number | undefined;
            pageSizeProps?: unknown;
            pageItemStyle?: import("vue").CSSProperties | undefined;
            activePageItemStyle?: import("vue").CSSProperties | undefined;
        }> & {
            onChange?: ((...args: any[]) => any) | undefined;
            "onUpdate:current"?: ((...args: any[]) => any) | undefined;
            onPageSizeChange?: ((...args: any[]) => any) | undefined;
            "onUpdate:pageSize"?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "size" | "defaultCurrent" | "defaultPageSize" | "hideOnSinglePage" | "simple" | "showTotal" | "showMore" | "showJumper" | "showPageSize" | "pageSizeOptions" | "baseSize" | "bufferSize">);
        loading: boolean;
        bordered: boolean | import("./interface").TableBorder;
        columns: import("./interface").TableColumn[];
        hoverable: boolean;
        stripe: boolean;
        tableLayoutFixed: boolean;
        hideHeader: boolean;
        pagePosition: "br" | "tr" | "bottom" | "top" | "tl" | "bl";
        indentSize: number;
        rowKey: string;
        showHeader: boolean;
        filterIconAlignLeft: boolean;
        hideExpandButtonOnEmpty: boolean;
    } & {
        onSelect?: ((rowKeys: string[]) => void) | undefined;
        scroll?: {
            x?: string | number | undefined;
            y?: string | number | undefined;
        } | undefined;
        onPageSizeChange?: ((pageSize: number) => void) | undefined;
        onPageChange?: ((page: number) => void) | undefined;
        virtualListProps?: import("../_components/virtual-list/interface").VirtualListProps | undefined;
        onExpand?: import("../_utils/types").EmitType<(rowKey: string) => void> | undefined;
        onExpandedChange?: import("../_utils/types").EmitType<(rowKeys: string[]) => void> | undefined;
        onSelectAll?: ((checked: boolean) => void) | undefined;
        onSelectionChange?: ((rowKeys: string[]) => void) | undefined;
        onSorterChange?: ((dataIndex: string, direction: string) => void) | undefined;
        onFilterChange?: ((dataIndex: string, filteredValues: string[]) => void) | undefined;
        onCellClick?: ((record: import("./interface").TableData, column: import("./interface").TableColumn) => void) | undefined;
        onRowClick?: ((record: import("./interface").TableData) => void) | undefined;
        onHeaderClick?: ((column: import("./interface").TableColumn) => void) | undefined;
        rowSelection?: import("./interface").TableRowSelection | undefined;
        expandable?: import("./interface").TableExpandable | undefined;
        spanMethod?: ((data: {
            record: import("./interface").TableData;
            column: import("./interface").TableColumn;
            rowIndex: number;
            columnIndex: number;
        }) => void | {
            rowspan?: number | undefined;
            colspan?: number | undefined;
        }) | undefined;
        components?: import("./interface").TableComponents | undefined;
        loadMore?: ((record: import("./interface").TableData, done: (children?: import("./interface").TableData[] | undefined) => void) => void) | undefined;
    }> & {
        onChange?: ((...args: any[]) => any) | undefined;
        onSelect?: ((...args: any[]) => any) | undefined;
        onPageSizeChange?: ((...args: any[]) => any) | undefined;
        onPageChange?: ((...args: any[]) => any) | undefined;
        onExpand?: ((...args: any[]) => any) | undefined;
        onExpandedChange?: ((...args: any[]) => any) | undefined;
        onSelectAll?: ((...args: any[]) => any) | undefined;
        onSelectionChange?: ((...args: any[]) => any) | undefined;
        onSorterChange?: ((...args: any[]) => any) | undefined;
        onFilterChange?: ((...args: any[]) => any) | undefined;
        onCellClick?: ((...args: any[]) => any) | undefined;
        onRowClick?: ((...args: any[]) => any) | undefined;
        onHeaderClick?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    columns?: unknown;
    data?: unknown;
    bordered?: unknown;
    hoverable?: unknown;
    stripe?: unknown;
    size?: unknown;
    tableLayoutFixed?: unknown;
    loading?: unknown;
    hideHeader?: unknown;
    rowSelection?: unknown;
    expandable?: unknown;
    scroll?: unknown;
    pagination?: unknown;
    pagePosition?: unknown;
    indentSize?: unknown;
    rowKey?: unknown;
    showHeader?: unknown;
    virtualListProps?: unknown;
    spanMethod?: unknown;
    components?: unknown;
    loadMore?: unknown;
    filterIconAlignLeft?: unknown;
    hideExpandButtonOnEmpty?: unknown;
    onExpand?: unknown;
    onExpandedChange?: unknown;
    onSelect?: unknown;
    onSelectAll?: unknown;
    onSelectionChange?: unknown;
    onSorterChange?: unknown;
    onFilterChange?: unknown;
    onPageChange?: unknown;
    onPageSizeChange?: unknown;
    onCellClick?: unknown;
    onRowClick?: unknown;
    onHeaderClick?: unknown;
} & {
    size: "small" | "mini" | "medium" | "large";
    data: import("./interface").TableData[];
    pagination: boolean | (Partial<{
        disabled: boolean;
        size: "small" | "mini" | "medium" | "large";
        defaultCurrent: number;
        defaultPageSize: number;
        hideOnSinglePage: boolean;
        simple: boolean;
        showTotal: boolean;
        showMore: boolean;
        showJumper: boolean;
        showPageSize: boolean;
        pageSizeOptions: number[];
        baseSize: number;
        bufferSize: number;
    }> & Omit<Readonly<{
        total?: unknown;
        current?: unknown;
        defaultCurrent?: unknown;
        pageSize?: unknown;
        defaultPageSize?: unknown;
        disabled?: unknown;
        hideOnSinglePage?: unknown;
        simple?: unknown;
        showTotal?: unknown;
        showMore?: unknown;
        showJumper?: unknown;
        showPageSize?: unknown;
        pageSizeOptions?: unknown;
        pageSizeProps?: unknown;
        size?: unknown;
        pageItemStyle?: unknown;
        activePageItemStyle?: unknown;
        baseSize?: unknown;
        bufferSize?: unknown;
        onChange?: unknown;
        onPageSizeChange?: unknown;
    } & {
        disabled: boolean;
        size: "small" | "mini" | "medium" | "large";
        total: number;
        defaultCurrent: number;
        defaultPageSize: number;
        hideOnSinglePage: boolean;
        simple: boolean;
        showTotal: boolean;
        showMore: boolean;
        showJumper: boolean;
        showPageSize: boolean;
        pageSizeOptions: number[];
        baseSize: number;
        bufferSize: number;
    } & {
        onChange?: import("../_utils/types").EmitType<(value: number) => void> | undefined;
        current?: number | undefined;
        onPageSizeChange?: import("../_utils/types").EmitType<(value: number) => void> | undefined;
        pageSize?: number | undefined;
        pageSizeProps?: unknown;
        pageItemStyle?: import("vue").CSSProperties | undefined;
        activePageItemStyle?: import("vue").CSSProperties | undefined;
    }> & {
        onChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:current"?: ((...args: any[]) => any) | undefined;
        onPageSizeChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:pageSize"?: ((...args: any[]) => any) | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "size" | "defaultCurrent" | "defaultPageSize" | "hideOnSinglePage" | "simple" | "showTotal" | "showMore" | "showJumper" | "showPageSize" | "pageSizeOptions" | "baseSize" | "bufferSize">);
    loading: boolean;
    bordered: boolean | import("./interface").TableBorder;
    columns: import("./interface").TableColumn[];
    hoverable: boolean;
    stripe: boolean;
    tableLayoutFixed: boolean;
    hideHeader: boolean;
    pagePosition: "br" | "tr" | "bottom" | "top" | "tl" | "bl";
    indentSize: number;
    rowKey: string;
    showHeader: boolean;
    filterIconAlignLeft: boolean;
    hideExpandButtonOnEmpty: boolean;
} & {
    onSelect?: ((rowKeys: string[]) => void) | undefined;
    scroll?: {
        x?: string | number | undefined;
        y?: string | number | undefined;
    } | undefined;
    onPageSizeChange?: ((pageSize: number) => void) | undefined;
    onPageChange?: ((page: number) => void) | undefined;
    virtualListProps?: import("../_components/virtual-list/interface").VirtualListProps | undefined;
    onExpand?: import("../_utils/types").EmitType<(rowKey: string) => void> | undefined;
    onExpandedChange?: import("../_utils/types").EmitType<(rowKeys: string[]) => void> | undefined;
    onSelectAll?: ((checked: boolean) => void) | undefined;
    onSelectionChange?: ((rowKeys: string[]) => void) | undefined;
    onSorterChange?: ((dataIndex: string, direction: string) => void) | undefined;
    onFilterChange?: ((dataIndex: string, filteredValues: string[]) => void) | undefined;
    onCellClick?: ((record: import("./interface").TableData, column: import("./interface").TableColumn) => void) | undefined;
    onRowClick?: ((record: import("./interface").TableData) => void) | undefined;
    onHeaderClick?: ((column: import("./interface").TableColumn) => void) | undefined;
    rowSelection?: import("./interface").TableRowSelection | undefined;
    expandable?: import("./interface").TableExpandable | undefined;
    spanMethod?: ((data: {
        record: import("./interface").TableData;
        column: import("./interface").TableColumn;
        rowIndex: number;
        columnIndex: number;
    }) => void | {
        rowspan?: number | undefined;
        colspan?: number | undefined;
    }) | undefined;
    components?: import("./interface").TableComponents | undefined;
    loadMore?: ((record: import("./interface").TableData, done: (children?: import("./interface").TableData[] | undefined) => void) => void) | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    onSelect?: ((...args: any[]) => any) | undefined;
    onPageSizeChange?: ((...args: any[]) => any) | undefined;
    onPageChange?: ((...args: any[]) => any) | undefined;
    onExpand?: ((...args: any[]) => any) | undefined;
    onExpandedChange?: ((...args: any[]) => any) | undefined;
    onSelectAll?: ((...args: any[]) => any) | undefined;
    onSelectionChange?: ((...args: any[]) => any) | undefined;
    onSorterChange?: ((...args: any[]) => any) | undefined;
    onFilterChange?: ((...args: any[]) => any) | undefined;
    onCellClick?: ((...args: any[]) => any) | undefined;
    onRowClick?: ((...args: any[]) => any) | undefined;
    onHeaderClick?: ((...args: any[]) => any) | undefined;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "select" | "pageChange" | "pageSizeChange" | "expand" | "expandedChange" | "selectAll" | "selectionChange" | "sorterChange" | "filterChange" | "cellClick" | "rowClick" | "headerClick")[], "select" | "change" | "expand" | "pageChange" | "pageSizeChange" | "expandedChange" | "selectAll" | "selectionChange" | "sorterChange" | "filterChange" | "cellClick" | "rowClick" | "headerClick", {
    size: "small" | "mini" | "medium" | "large";
    data: import("./interface").TableData[];
    pagination: boolean | (Partial<{
        disabled: boolean;
        size: "small" | "mini" | "medium" | "large";
        defaultCurrent: number;
        defaultPageSize: number;
        hideOnSinglePage: boolean;
        simple: boolean;
        showTotal: boolean;
        showMore: boolean;
        showJumper: boolean;
        showPageSize: boolean;
        pageSizeOptions: number[];
        baseSize: number;
        bufferSize: number;
    }> & Omit<Readonly<{
        total?: unknown;
        current?: unknown;
        defaultCurrent?: unknown;
        pageSize?: unknown;
        defaultPageSize?: unknown;
        disabled?: unknown;
        hideOnSinglePage?: unknown;
        simple?: unknown;
        showTotal?: unknown;
        showMore?: unknown;
        showJumper?: unknown;
        showPageSize?: unknown;
        pageSizeOptions?: unknown;
        pageSizeProps?: unknown;
        size?: unknown;
        pageItemStyle?: unknown;
        activePageItemStyle?: unknown;
        baseSize?: unknown;
        bufferSize?: unknown;
        onChange?: unknown;
        onPageSizeChange?: unknown;
    } & {
        disabled: boolean;
        size: "small" | "mini" | "medium" | "large";
        total: number;
        defaultCurrent: number;
        defaultPageSize: number;
        hideOnSinglePage: boolean;
        simple: boolean;
        showTotal: boolean;
        showMore: boolean;
        showJumper: boolean;
        showPageSize: boolean;
        pageSizeOptions: number[];
        baseSize: number;
        bufferSize: number;
    } & {
        onChange?: import("../_utils/types").EmitType<(value: number) => void> | undefined;
        current?: number | undefined;
        onPageSizeChange?: import("../_utils/types").EmitType<(value: number) => void> | undefined;
        pageSize?: number | undefined;
        pageSizeProps?: unknown;
        pageItemStyle?: import("vue").CSSProperties | undefined;
        activePageItemStyle?: import("vue").CSSProperties | undefined;
    }> & {
        onChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:current"?: ((...args: any[]) => any) | undefined;
        onPageSizeChange?: ((...args: any[]) => any) | undefined;
        "onUpdate:pageSize"?: ((...args: any[]) => any) | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "disabled" | "size" | "defaultCurrent" | "defaultPageSize" | "hideOnSinglePage" | "simple" | "showTotal" | "showMore" | "showJumper" | "showPageSize" | "pageSizeOptions" | "baseSize" | "bufferSize">);
    loading: boolean;
    bordered: boolean | import("./interface").TableBorder;
    columns: import("./interface").TableColumn[];
    hoverable: boolean;
    stripe: boolean;
    tableLayoutFixed: boolean;
    hideHeader: boolean;
    pagePosition: "br" | "tr" | "bottom" | "top" | "tl" | "bl";
    indentSize: number;
    rowKey: string;
    showHeader: boolean;
    filterIconAlignLeft: boolean;
    hideExpandButtonOnEmpty: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    Thead: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {} & {}>, {}>;
    Tbody: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {} & {}>, {}>;
    Tr: import("vue").DefineComponent<{
        isExpandRow: {
            type: BooleanConstructor;
        };
        isEmptyRow: {
            type: BooleanConstructor;
        };
        checked: {
            type: BooleanConstructor;
        };
    }, {
        prefixCls: string;
        cls: import("vue").ComputedRef<(string | {
            [x: string]: boolean;
        })[]>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        isExpandRow?: unknown;
        isEmptyRow?: unknown;
        checked?: unknown;
    } & {
        checked: boolean;
        isExpandRow: boolean;
        isEmptyRow: boolean;
    } & {}>, {
        checked: boolean;
        isExpandRow: boolean;
        isEmptyRow: boolean;
    }>;
    Th: import("vue").DefineComponent<{
        column: {
            type: import("vue").PropType<import("./interface").TableCell>;
            default: () => {};
        };
        operations: {
            type: import("vue").PropType<import("./interface").TableOperationColumn[]>;
            default: () => never[];
        };
        dataColumns: {
            type: import("vue").PropType<import("./interface").TableColumn[]>;
            default: () => never[];
        };
        sortOrder: {
            type: StringConstructor;
        };
        filterValue: {
            type: import("vue").PropType<string[]>;
        };
        filterIconAlignLeft: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("sorterChange" | "filterChange")[], "sorterChange" | "filterChange", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        column?: unknown;
        operations?: unknown;
        dataColumns?: unknown;
        sortOrder?: unknown;
        filterValue?: unknown;
        filterIconAlignLeft?: unknown;
    } & {
        column: import("./interface").TableCell;
        filterIconAlignLeft: boolean;
        operations: import("./interface").TableOperationColumn[];
        dataColumns: import("./interface").TableColumn[];
    } & {
        sortOrder?: string | undefined;
        filterValue?: string[] | undefined;
    }> & {
        onSorterChange?: ((...args: any[]) => any) | undefined;
        onFilterChange?: ((...args: any[]) => any) | undefined;
    }, {
        column: import("./interface").TableCell;
        filterIconAlignLeft: boolean;
        operations: import("./interface").TableOperationColumn[];
        dataColumns: import("./interface").TableColumn[];
    }>;
    Td: import("vue").DefineComponent<{
        isSorted: {
            type: BooleanConstructor;
        };
        rowIndex: NumberConstructor;
        record: {
            type: import("vue").PropType<import("./interface").TableData>;
            default: () => {};
        };
        column: {
            type: import("vue").PropType<import("./interface").TableColumn>;
            default: () => {};
        };
        type: {
            type: import("vue").PropType<"expand" | "normal" | "checkbox" | "radio" | "operation">;
            default: string;
        };
        operations: {
            type: import("vue").PropType<import("./interface").TableOperationColumn[]>;
            default: () => never[];
        };
        dataColumns: {
            type: import("vue").PropType<import("./interface").TableColumn[]>;
            default: () => never[];
        };
        colSpan: {
            type: NumberConstructor;
            default: number;
        };
        rowSpan: {
            type: NumberConstructor;
            default: number;
        };
        isFixedExpand: {
            type: BooleanConstructor;
            default: boolean;
        };
        containerWidth: {
            type: NumberConstructor;
        };
        showExpandBtn: {
            type: BooleanConstructor;
            default: boolean;
        };
        indentSize: {
            type: NumberConstructor;
            default: number;
        };
        loadMore: import("vue").PropType<(record: import("./interface").TableData, done: (children: import("./interface").TableData[]) => void) => void>;
        addLazyLoadData: import("vue").PropType<(children: import("./interface").TableData[] | undefined, record: import("./interface").TableData) => void>;
        renderExpandBtn: {
            type: FunctionConstructor;
        };
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        isSorted?: unknown;
        rowIndex?: unknown;
        record?: unknown;
        column?: unknown;
        type?: unknown;
        operations?: unknown;
        dataColumns?: unknown;
        colSpan?: unknown;
        rowSpan?: unknown;
        isFixedExpand?: unknown;
        containerWidth?: unknown;
        showExpandBtn?: unknown;
        indentSize?: unknown;
        loadMore?: unknown;
        addLazyLoadData?: unknown;
        renderExpandBtn?: unknown;
    } & {
        column: import("./interface").TableColumn;
        type: "expand" | "normal" | "checkbox" | "radio" | "operation";
        indentSize: number;
        operations: import("./interface").TableOperationColumn[];
        dataColumns: import("./interface").TableColumn[];
        isSorted: boolean;
        record: import("./interface").TableData;
        colSpan: number;
        rowSpan: number;
        isFixedExpand: boolean;
        showExpandBtn: boolean;
    } & {
        loadMore?: ((record: import("./interface").TableData, done: (children: import("./interface").TableData[]) => void) => void) | undefined;
        rowIndex?: number | undefined;
        containerWidth?: number | undefined;
        addLazyLoadData?: ((children: import("./interface").TableData[] | undefined, record: import("./interface").TableData) => void) | undefined;
        renderExpandBtn?: Function | undefined;
    }>, {
        column: import("./interface").TableColumn;
        type: "expand" | "normal" | "checkbox" | "radio" | "operation";
        indentSize: number;
        operations: import("./interface").TableOperationColumn[];
        dataColumns: import("./interface").TableColumn[];
        isSorted: boolean;
        record: import("./interface").TableData;
        colSpan: number;
        rowSpan: number;
        isFixedExpand: boolean;
        showExpandBtn: boolean;
    }>;
    Column: import("vue").DefineComponent<{
        dataIndex: StringConstructor;
        title: StringConstructor;
        width: NumberConstructor;
        align: {
            type: import("vue").PropType<"center" | "left" | "right" | undefined>;
        };
        fixed: {
            type: import("vue").PropType<"left" | "right" | undefined>;
        };
        ellipsis: {
            type: BooleanConstructor;
            default: boolean;
        };
        sortable: {
            type: import("vue").PropType<import("./interface").TableSortable>;
            default: undefined;
        };
        filterable: {
            type: import("vue").PropType<import("./interface").TableFilterable>;
            default: undefined;
        };
        cellStyle: {
            type: import("vue").PropType<import("vue").CSSProperties>;
        };
    }, () => null, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        dataIndex?: unknown;
        title?: unknown;
        width?: unknown;
        align?: unknown;
        fixed?: unknown;
        ellipsis?: unknown;
        sortable?: unknown;
        filterable?: unknown;
        cellStyle?: unknown;
    } & {
        ellipsis: boolean;
    } & {
        title?: string | undefined;
        fixed?: "left" | "right" | undefined;
        width?: number | undefined;
        align?: "center" | "left" | "right" | undefined;
        dataIndex?: string | undefined;
        sortable?: import("./interface").TableSortable | undefined;
        filterable?: import("./interface").TableFilterable | undefined;
        cellStyle?: import("vue").CSSProperties | undefined;
    }>, {
        ellipsis: boolean;
        sortable: import("./interface").TableSortable;
        filterable: import("./interface").TableFilterable;
    }>;
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type TableInstance = InstanceType<typeof _Table>;
export { _Thead as Thead, _Tbody as Tbody, _Tr as Tr, _Th as Th, _Td as Td, _Column as TableColumn, };
export default Table;
