var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
import { defineComponent, computed, ref, createVNode } from "vue";
import { getPrefixCls } from "../_utils/global-config.js";
import { getStyle, getFixedCls } from "./utils.js";
import { getValueByPath } from "../_utils/get-value-by-path.js";
import IconLoading from "../icon/icon-loading/index.js";
import { isFunction } from "../_utils/is.js";
var Td = defineComponent({
  name: "Td",
  props: {
    isSorted: {
      type: Boolean
    },
    rowIndex: Number,
    record: {
      type: Object,
      default: () => ({})
    },
    column: {
      type: Object,
      default: () => ({})
    },
    type: {
      type: String,
      default: "normal"
    },
    operations: {
      type: Array,
      default: () => []
    },
    dataColumns: {
      type: Array,
      default: () => []
    },
    colSpan: {
      type: Number,
      default: 1
    },
    rowSpan: {
      type: Number,
      default: 1
    },
    isFixedExpand: {
      type: Boolean,
      default: false
    },
    containerWidth: {
      type: Number
    },
    showExpandBtn: {
      type: Boolean,
      default: false
    },
    indentSize: {
      type: Number,
      default: 0
    },
    loadMore: Function,
    addLazyLoadData: Function,
    renderExpandBtn: {
      type: Function
    }
  },
  setup(props, {
    slots
  }) {
    const prefixCls = getPrefixCls("table");
    const style = computed(() => getStyle(props.column, {
      dataColumns: props.dataColumns,
      operations: props.operations
    }));
    const cls = computed(() => {
      var _a, _b;
      return [`${prefixCls}-td`, `${prefixCls}-td-align-${(_b = (_a = props.column) == null ? void 0 : _a.align) != null ? _b : "left"}`, {
        [`${prefixCls}-col-sorted`]: props.isSorted
      }, ...getFixedCls(prefixCls, props.column)];
    });
    const cellStyle = computed(() => {
      var _a, _b;
      if (props.isFixedExpand && props.containerWidth) {
        return __spreadValues({
          width: `${props.containerWidth}px`
        }, (_a = props.column) == null ? void 0 : _a.cellStyle);
      }
      return (_b = props.column) == null ? void 0 : _b.cellStyle;
    });
    const renderContent = () => {
      var _a, _b;
      if (slots.default) {
        return slots.default();
      }
      if (props.column.render) {
        return props.column.render({
          record: props.record,
          column: props.column,
          rowIndex: (_a = props.rowIndex) != null ? _a : -1
        });
      }
      return String((_b = getValueByPath(props.record, props.column.dataIndex)) != null ? _b : "");
    };
    const isLoading = ref(false);
    const handleClick = () => {
      var _a, _b;
      if (isFunction(props.loadMore) && !((_a = props.record) == null ? void 0 : _a.isLeaf) && !((_b = props.record) == null ? void 0 : _b.children)) {
        isLoading.value = true;
        new Promise((resolve) => {
          var _a2;
          (_a2 = props.loadMore) == null ? void 0 : _a2.call(props, props.record, resolve);
        }).then((children) => {
          var _a2;
          (_a2 = props.addLazyLoadData) == null ? void 0 : _a2.call(props, children, props.record);
          isLoading.value = false;
        });
      }
    };
    return () => {
      var _a, _b;
      return createVNode("td", {
        "class": cls.value,
        "style": style.value,
        "rowspan": props.rowSpan > 1 ? props.rowSpan : void 0,
        "colspan": props.colSpan > 1 ? props.colSpan : void 0
      }, [createVNode("span", {
        "class": [`${prefixCls}-cell`, {
          [`${prefixCls}-cell-fixed-expand`]: props.isFixedExpand,
          [`${prefixCls}-cell-expand-icon`]: props.showExpandBtn,
          [`${prefixCls}-cell-text-ellipsis`]: (_a = props.column) == null ? void 0 : _a.ellipsis
        }],
        "style": cellStyle.value
      }, [props.indentSize > 0 && createVNode("span", {
        "style": {
          paddingLeft: `${props.indentSize}px`
        }
      }, null), props.showExpandBtn && createVNode("span", {
        "class": `${prefixCls}-cell-inline-icon`,
        "onClick": handleClick
      }, [isLoading.value ? createVNode(IconLoading, null, null) : (_b = props.renderExpandBtn) == null ? void 0 : _b.call(props, props.record)]), renderContent()])]);
    };
  }
});
export { Td as default };
