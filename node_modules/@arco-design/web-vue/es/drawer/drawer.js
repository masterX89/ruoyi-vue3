var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
import { defineComponent, ref, computed, onMounted, onBeforeUnmount, watch, resolveComponent, openBlock, createBlock, Teleport, withDirectives, createElementBlock, mergeProps, createVNode, Transition, withCtx, normalizeClass, vShow, createCommentVNode, createElementVNode, normalizeStyle, renderSlot, createTextVNode, toDisplayString } from "vue";
import { getPrefixCls } from "../_utils/global-config.js";
import Button from "../button/index.js";
import IconHover from "../_components/icon-hover.js";
import IconClose from "../icon/icon-close/index.js";
import { useI18n } from "../locale/index.js";
import { useOverflow } from "../_hooks/use-overflow.js";
import { getElement, on, off } from "../_utils/dom.js";
import usePopupManager from "../_hooks/use-popup-manager.js";
import { isNumber, isFunction, isBoolean } from "../_utils/is.js";
import { CODE } from "../_utils/keyboard.js";
import _export_sfc from "../_virtual/plugin-vue_export-helper";
const DRAWER_PLACEMENTS = ["top", "right", "bottom", "left"];
const _sfc_main = defineComponent({
  name: "Drawer",
  components: {
    ArcoButton: Button,
    IconHover,
    IconClose
  },
  inheritAttrs: false,
  props: {
    visible: {
      type: Boolean,
      default: false
    },
    defaultVisible: {
      type: Boolean,
      default: false
    },
    placement: {
      type: String,
      default: "right",
      validator: (value) => DRAWER_PLACEMENTS.includes(value)
    },
    title: String,
    mask: {
      type: Boolean,
      default: true
    },
    maskClosable: {
      type: Boolean,
      default: true
    },
    closable: {
      type: Boolean,
      default: true
    },
    okText: String,
    cancelText: String,
    okLoading: {
      type: Boolean,
      default: false
    },
    okButtonProps: {
      type: Object
    },
    cancelButtonProps: {
      type: Object
    },
    unmountOnClose: Boolean,
    width: {
      type: [Number, String],
      default: 250
    },
    height: {
      type: [Number, String],
      default: 250
    },
    popupContainer: {
      type: [String, Object],
      default: "body"
    },
    drawerStyle: {
      type: Object
    },
    onBeforeOk: {
      type: [Function, Array]
    },
    onBeforeCancel: {
      type: [Function, Array]
    },
    renderToBody: {
      type: Boolean,
      default: true
    },
    footer: {
      type: Boolean,
      default: true
    },
    escToClose: {
      type: Boolean,
      default: true
    }
  },
  emits: [
    "update:visible",
    "ok",
    "cancel",
    "open",
    "close"
  ],
  setup(props, { emit }) {
    const prefixCls = getPrefixCls("drawer");
    const { t } = useI18n();
    const containerRef = ref();
    const _visible = ref(props.defaultVisible);
    const computedVisible = computed(() => {
      var _a;
      return (_a = props.visible) != null ? _a : _visible.value;
    });
    const _okLoading = ref(false);
    const mergedOkLoading = computed(() => props.okLoading || _okLoading.value);
    const mounted = ref(computedVisible.value);
    let globalKeyDownListener = false;
    const handleGlobalKeyDown = (ev) => {
      if (props.escToClose && ev.code === CODE.ESC) {
        handleCancel();
      }
    };
    const addGlobalKeyDownListener = () => {
      if (props.escToClose && !globalKeyDownListener) {
        globalKeyDownListener = true;
        on(document.documentElement, "keydown", handleGlobalKeyDown);
      }
    };
    const removeGlobalKeyDownListener = () => {
      globalKeyDownListener = false;
      off(document.documentElement, "keydown", handleGlobalKeyDown);
    };
    const { zIndex } = usePopupManager({ visible: computedVisible });
    const isFixed = computed(() => {
      return (containerRef == null ? void 0 : containerRef.value) === document.body;
    });
    const containerNode = computed(() => {
      const ele = getElement(props.popupContainer);
      if (!ele && !computedVisible.value) {
        return "body";
      }
      return ele || "body";
    });
    let promiseNumber = 0;
    const close = () => {
      promiseNumber++;
      if (_okLoading.value) {
        _okLoading.value = false;
      }
      _visible.value = false;
      emit("update:visible", false);
    };
    const handleOk = () => {
      const currentPromiseNumber = promiseNumber;
      const promise = new Promise((resolve) => {
        if (isFunction(props.onBeforeOk)) {
          const result = props.onBeforeOk(resolve);
          if (isBoolean(result)) {
            resolve(result);
          } else {
            _okLoading.value = true;
          }
        } else {
          resolve();
        }
      });
      promise.then((closed = true) => {
        if (currentPromiseNumber === promiseNumber) {
          _okLoading.value = false;
          if (closed) {
            emit("ok");
            close();
          }
        }
      });
    };
    const handleCancel = () => {
      var _a;
      let result = true;
      if (isFunction(props.onBeforeCancel)) {
        result = (_a = props.onBeforeCancel()) != null ? _a : false;
      }
      if (result) {
        emit("cancel");
        close();
      }
    };
    const handleMask = () => {
      if (props.maskClosable) {
        handleCancel();
      }
    };
    const handleOpen = () => {
      if (computedVisible.value) {
        emit("open");
      }
    };
    const handleClose = () => {
      if (!computedVisible.value) {
        mounted.value = false;
        emit("close");
      }
    };
    const { setOverflowHidden, resetOverflow } = useOverflow(containerRef);
    onMounted(() => {
      containerRef.value = getElement(props.popupContainer);
      if (computedVisible.value) {
        setOverflowHidden();
        if (props.escToClose) {
          addGlobalKeyDownListener();
        }
      }
    });
    onBeforeUnmount(() => {
      removeGlobalKeyDownListener();
    });
    watch(computedVisible, (visible) => {
      if (_visible.value !== visible) {
        _visible.value = visible;
      }
      if (visible) {
        mounted.value = true;
        setOverflowHidden();
        addGlobalKeyDownListener();
      } else {
        resetOverflow();
        removeGlobalKeyDownListener();
      }
    });
    const style = computed(() => {
      var _a;
      const style2 = __spreadValues({
        [props.placement]: 0
      }, (_a = props.drawerStyle) != null ? _a : {});
      if (["right", "left"].includes(props.placement)) {
        style2.width = isNumber(props.width) ? `${props.width}px` : props.width;
      } else {
        style2.height = isNumber(props.height) ? `${props.height}px` : props.height;
      }
      return style2;
    });
    return {
      prefixCls,
      style,
      t,
      mounted,
      computedVisible,
      mergedOkLoading,
      zIndex,
      handleOk,
      handleCancel,
      handleOpen,
      handleClose,
      handleMask,
      isFixed,
      containerNode
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_icon_close = resolveComponent("icon-close");
  const _component_icon_hover = resolveComponent("icon-hover");
  const _component_arco_button = resolveComponent("arco-button");
  return openBlock(), createBlock(Teleport, {
    to: _ctx.containerNode,
    disabled: !_ctx.renderToBody
  }, [
    !_ctx.unmountOnClose || _ctx.computedVisible || _ctx.mounted ? withDirectives((openBlock(), createElementBlock("div", mergeProps({
      key: 0,
      class: `${_ctx.prefixCls}-container`,
      style: _ctx.isFixed ? { zIndex: _ctx.zIndex } : { zIndex: "inherit", position: "absolute" }
    }, _ctx.$attrs), [
      createVNode(Transition, {
        name: "fade-drawer",
        appear: ""
      }, {
        default: withCtx(() => [
          _ctx.mask ? withDirectives((openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass(`${_ctx.prefixCls}-mask`),
            onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleMask && _ctx.handleMask(...args))
          }, null, 2)), [
            [vShow, _ctx.computedVisible]
          ]) : createCommentVNode("v-if", true)
        ]),
        _: 1
      }),
      createVNode(Transition, {
        name: `slide-${_ctx.placement}-drawer`,
        appear: "",
        onAfterEnter: _ctx.handleOpen,
        onAfterLeave: _ctx.handleClose
      }, {
        default: withCtx(() => [
          withDirectives(createElementVNode("div", {
            class: normalizeClass(_ctx.prefixCls),
            style: normalizeStyle(_ctx.style)
          }, [
            _ctx.$slots.title || _ctx.title || _ctx.closable ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(`${_ctx.prefixCls}-header`)
            }, [
              _ctx.$slots.title || _ctx.title ? (openBlock(), createElementBlock("div", {
                key: 0,
                class: normalizeClass(`${_ctx.prefixCls}-title`)
              }, [
                renderSlot(_ctx.$slots, "title", {}, () => [
                  createTextVNode(toDisplayString(_ctx.title), 1)
                ])
              ], 2)) : createCommentVNode("v-if", true),
              _ctx.closable ? (openBlock(), createElementBlock("div", {
                key: 1,
                class: normalizeClass(`${_ctx.prefixCls}-close-btn`),
                onClick: _cache[1] || (_cache[1] = (...args) => _ctx.handleCancel && _ctx.handleCancel(...args))
              }, [
                createVNode(_component_icon_hover, null, {
                  default: withCtx(() => [
                    createVNode(_component_icon_close)
                  ]),
                  _: 1
                })
              ], 2)) : createCommentVNode("v-if", true)
            ], 2)) : createCommentVNode("v-if", true),
            createElementVNode("div", {
              class: normalizeClass(`${_ctx.prefixCls}-body`)
            }, [
              renderSlot(_ctx.$slots, "default")
            ], 2),
            _ctx.footer ? (openBlock(), createElementBlock("div", {
              key: 1,
              class: normalizeClass(`${_ctx.prefixCls}-footer`)
            }, [
              renderSlot(_ctx.$slots, "footer", {}, () => [
                createVNode(_component_arco_button, mergeProps(_ctx.cancelButtonProps, { onClick: _ctx.handleCancel }), {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString(_ctx.cancelText || _ctx.t("drawer.cancelText")), 1)
                  ]),
                  _: 1
                }, 16, ["onClick"]),
                createVNode(_component_arco_button, mergeProps({
                  type: "primary",
                  loading: _ctx.mergedOkLoading
                }, _ctx.okButtonProps, { onClick: _ctx.handleOk }), {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString(_ctx.okText || _ctx.t("drawer.okText")), 1)
                  ]),
                  _: 1
                }, 16, ["loading", "onClick"])
              ])
            ], 2)) : createCommentVNode("v-if", true)
          ], 6), [
            [vShow, _ctx.computedVisible]
          ])
        ]),
        _: 3
      }, 8, ["name", "onAfterEnter", "onAfterLeave"])
    ], 16)), [
      [vShow, _ctx.computedVisible || _ctx.mounted]
    ]) : createCommentVNode("v-if", true)
  ], 8, ["to", "disabled"]);
}
var _Drawer = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _Drawer as default };
