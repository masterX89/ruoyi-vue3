import type { CSSProperties, PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    visible: {
        type: BooleanConstructor;
        default: boolean;
    };
    defaultVisible: {
        type: BooleanConstructor;
        default: boolean;
    };
    placement: {
        type: PropType<"left" | "right" | "bottom" | "top">;
        default: string;
        validator: (value: any) => boolean;
    };
    title: StringConstructor;
    mask: {
        type: BooleanConstructor;
        default: boolean;
    };
    maskClosable: {
        type: BooleanConstructor;
        default: boolean;
    };
    closable: {
        type: BooleanConstructor;
        default: boolean;
    };
    okText: StringConstructor;
    cancelText: StringConstructor;
    okLoading: {
        type: BooleanConstructor;
        default: boolean;
    };
    okButtonProps: {
        type: ObjectConstructor;
    };
    cancelButtonProps: {
        type: ObjectConstructor;
    };
    unmountOnClose: BooleanConstructor;
    width: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    height: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    popupContainer: {
        type: PropType<string | HTMLElement | null | undefined>;
        default: string;
    };
    drawerStyle: {
        type: PropType<CSSProperties>;
    };
    onBeforeOk: {
        type: PropType<(done: (closed: boolean) => void) => void | boolean>;
    };
    onBeforeCancel: {
        type: PropType<() => boolean>;
    };
    renderToBody: {
        type: BooleanConstructor;
        default: boolean;
    };
    footer: {
        type: BooleanConstructor;
        default: boolean;
    };
    escToClose: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    prefixCls: string;
    style: import("vue").ComputedRef<CSSProperties>;
    t: (key: string, ...args: any[]) => string;
    mounted: import("vue").Ref<boolean>;
    computedVisible: import("vue").ComputedRef<boolean>;
    mergedOkLoading: import("vue").ComputedRef<boolean>;
    zIndex: import("vue").ComputedRef<number>;
    handleOk: () => void;
    handleCancel: () => void;
    handleOpen: () => void;
    handleClose: () => void;
    handleMask: () => void;
    isFixed: import("vue").ComputedRef<boolean>;
    containerNode: import("vue").ComputedRef<HTMLElement | "body">;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:visible" | "close" | "open" | "cancel" | "ok")[], "cancel" | "ok" | "update:visible" | "close" | "open", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    visible?: unknown;
    defaultVisible?: unknown;
    placement?: unknown;
    title?: unknown;
    mask?: unknown;
    maskClosable?: unknown;
    closable?: unknown;
    okText?: unknown;
    cancelText?: unknown;
    okLoading?: unknown;
    okButtonProps?: unknown;
    cancelButtonProps?: unknown;
    unmountOnClose?: unknown;
    width?: unknown;
    height?: unknown;
    popupContainer?: unknown;
    drawerStyle?: unknown;
    onBeforeOk?: unknown;
    onBeforeCancel?: unknown;
    renderToBody?: unknown;
    footer?: unknown;
    escToClose?: unknown;
} & {
    footer: boolean;
    mask: boolean;
    visible: boolean;
    defaultVisible: boolean;
    closable: boolean;
    height: string | number;
    width: string | number;
    popupContainer: string | HTMLElement | null | undefined;
    unmountOnClose: boolean;
    renderToBody: boolean;
    maskClosable: boolean;
    placement: "left" | "right" | "bottom" | "top";
    okLoading: boolean;
    escToClose: boolean;
} & {
    title?: string | undefined;
    okText?: string | undefined;
    cancelText?: string | undefined;
    okButtonProps?: Record<string, any> | undefined;
    cancelButtonProps?: Record<string, any> | undefined;
    drawerStyle?: CSSProperties | undefined;
    onBeforeOk?: ((done: (closed: boolean) => void) => void | boolean) | undefined;
    onBeforeCancel?: (() => boolean) | undefined;
}> & {
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
    onOk?: ((...args: any[]) => any) | undefined;
    onOpen?: ((...args: any[]) => any) | undefined;
    onCancel?: ((...args: any[]) => any) | undefined;
}, {
    footer: boolean;
    mask: boolean;
    visible: boolean;
    defaultVisible: boolean;
    closable: boolean;
    height: string | number;
    width: string | number;
    popupContainer: string | HTMLElement | null | undefined;
    unmountOnClose: boolean;
    renderToBody: boolean;
    maskClosable: boolean;
    placement: "left" | "right" | "bottom" | "top";
    okLoading: boolean;
    escToClose: boolean;
}>;
export default _default;
