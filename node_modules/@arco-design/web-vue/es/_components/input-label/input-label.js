import { defineComponent, computed, createVNode, mergeProps } from "vue";
import { omit } from "../../_utils/omit.js";
import { INPUT_EVENTS } from "../../_utils/constant.js";
import pick from "../../_utils/pick.js";
import { getPrefixCls } from "../../_utils/global-config.js";
import { useInput } from "../../_hooks/use-input.js";
var InputLabel = defineComponent({
  name: "InputLabel",
  inheritAttrs: false,
  props: {
    modelValue: Object,
    inputValue: String,
    enabledInput: Boolean,
    formatLabel: Function,
    placeholder: String,
    retainInputValue: Boolean,
    disabled: Boolean,
    baseCls: String,
    size: String,
    error: Boolean,
    focused: Boolean
  },
  emits: ["update:inputValue", "inputValueChange", "focus", "blur"],
  setup(props, {
    attrs,
    emit,
    slots
  }) {
    var _a;
    const prefixCls = (_a = props.baseCls) != null ? _a : getPrefixCls("input-label");
    const {
      inputRef,
      _focused,
      computedValue: computedInputValue,
      handleInput,
      handleComposition,
      handleFocus,
      handleBlur,
      handleMousedown
    } = useInput(props, {
      emit,
      isInputValue: true
    });
    const mergedFocused = computed(() => {
      var _a2;
      return (_a2 = props.focused) != null ? _a2 : _focused.value;
    });
    const showInput = computed(() => props.enabledInput && _focused.value || !props.modelValue);
    const mergedPlaceholder = computed(() => {
      if (props.enabledInput && props.modelValue) {
        return props.modelValue.label;
      }
      return props.placeholder;
    });
    const cls = computed(() => [prefixCls, `${prefixCls}-size-${props.size}`, {
      [`${prefixCls}-search`]: props.enabledInput,
      [`${prefixCls}-focus`]: mergedFocused.value,
      [`${prefixCls}-disabled`]: props.disabled,
      [`${prefixCls}-error`]: props.error
    }]);
    const wrapperAttrs = computed(() => omit(attrs, INPUT_EVENTS));
    const inputAttrs = computed(() => pick(attrs, INPUT_EVENTS));
    const render = () => {
      var _a2, _b, _c, _d, _e;
      return createVNode("span", mergeProps(wrapperAttrs.value, {
        "class": cls.value,
        "onMousedown": handleMousedown
      }), [slots.prefix && createVNode("span", {
        "class": `${prefixCls}-prefix`
      }, [slots.prefix()]), createVNode("input", mergeProps(inputAttrs.value, {
        "ref": inputRef,
        "class": [`${prefixCls}-input`, {
          [`${prefixCls}-input-hidden`]: !showInput.value
        }],
        "value": computedInputValue.value,
        "readonly": !props.enabledInput,
        "placeholder": mergedPlaceholder.value,
        "disabled": props.disabled,
        "onInput": handleInput,
        "onFocus": handleFocus,
        "onBlur": handleBlur,
        "onCompositionstart": handleComposition,
        "onCompositionupdate": handleComposition,
        "onCompositionend": handleComposition
      }), null), createVNode("span", {
        "class": [`${prefixCls}-value`, {
          [`${prefixCls}-value-hidden`]: showInput.value
        }]
      }, [(_e = (_c = (_a2 = slots.default) == null ? void 0 : _a2.call(slots, {
        data: props.modelValue
      })) != null ? _c : (_b = props.formatLabel) == null ? void 0 : _b.call(props, props.modelValue)) != null ? _e : (_d = props.modelValue) == null ? void 0 : _d.label]), slots.suffix && createVNode("span", {
        "class": `${prefixCls}-suffix`
      }, [slots.suffix()])]);
    };
    return {
      inputRef,
      render
    };
  },
  methods: {
    focus() {
      var _a;
      (_a = this.inputRef) == null ? void 0 : _a.focus();
    },
    blur() {
      var _a;
      (_a = this.inputRef) == null ? void 0 : _a.blur();
    }
  },
  render() {
    return this.render();
  }
});
export { InputLabel as default };
