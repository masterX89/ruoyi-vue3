import { PropType, Ref } from 'vue';
import { ScrollOptions } from './interface';
declare const _default: import("vue").DefineComponent<{
    height: {
        type: PropType<string | number>;
        default: number;
    };
    threshold: {
        type: PropType<number | null | undefined>;
    };
    isStaticItemHeight: {
        type: BooleanConstructor;
    };
    estimatedItemHeight: {
        type: NumberConstructor;
    };
    data: {
        type: PropType<unknown[]>;
        default: () => never[];
    };
    itemKey: {
        type: PropType<string | ((item: unknown) => string | number)>;
        default: string;
    };
    component: {
        type: PropType<keyof HTMLElementTagNameMap>;
        default: string;
    };
}, {
    viewportRef: Ref<HTMLElement | undefined>;
    visibleData: import("vue").ComputedRef<{
        key: any;
        index: number;
        item: unknown;
    }[]>;
    viewportHeight: Ref<number>;
    totalHeight: import("vue").ComputedRef<number>;
    startOffset: Ref<number>;
    itemHeight: import("vue").ComputedRef<number>;
    isVirtual: import("vue").ComputedRef<boolean>;
    renderChildren: () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[];
    handleWrapperResize: (entry: HTMLDivElement) => void;
    handleScroll: (e: UIEvent) => void;
    scrollTo: (options: ScrollOptions) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "scroll"[], "scroll", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    height?: unknown;
    threshold?: unknown;
    isStaticItemHeight?: unknown;
    estimatedItemHeight?: unknown;
    data?: unknown;
    itemKey?: unknown;
    component?: unknown;
} & {
    data: unknown[];
    component: keyof HTMLElementTagNameMap;
    height: string | number;
    isStaticItemHeight: boolean;
    itemKey: string | ((item: unknown) => string | number);
} & {
    estimatedItemHeight?: number | undefined;
    threshold?: number | null | undefined;
}> & {
    onScroll?: ((...args: any[]) => any) | undefined;
}, {
    data: unknown[];
    component: keyof HTMLElementTagNameMap;
    height: string | number;
    isStaticItemHeight: boolean;
    itemKey: string | ((item: unknown) => string | number);
}>;
export default _default;
