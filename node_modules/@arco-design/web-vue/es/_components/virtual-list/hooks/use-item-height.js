import { toRefs, ref, computed, watch } from "vue";
const DEFAULT_ITEM_HEIGHT = 32;
function useItemHeight(props) {
  const { estimatedItemHeight: propEstimatedItemHeight, data } = toRefs(props);
  const itemHeightCacheMap = ref({});
  const estimatedItemHeight = ref(propEstimatedItemHeight == null ? void 0 : propEstimatedItemHeight.value);
  const itemLength = computed(() => Object.keys(itemHeightCacheMap.value).length);
  watch(itemLength, () => {
    if (itemLength.value && !estimatedItemHeight.value) {
      estimatedItemHeight.value = Object.entries(itemHeightCacheMap.value).reduce((sum, [, height]) => sum + height, 0) / itemLength.value;
    }
  });
  const itemHeight = computed(() => estimatedItemHeight.value || DEFAULT_ITEM_HEIGHT);
  const totalHeight = computed(() => data.value.reduce((sum, { key }) => sum + getItemHeightOrDefault(key), 0));
  function setItemHeight(key, height) {
    itemHeightCacheMap.value[key] = height;
  }
  function getItemHeight(key) {
    return itemHeightCacheMap.value[key];
  }
  function getItemHeightOrDefault(key) {
    return itemHeightCacheMap.value[key] || itemHeight.value;
  }
  function getItemHeightByIndex(index) {
    const { key } = data.value[index];
    return itemHeightCacheMap.value[key];
  }
  function getItemHeightOrDefaultByIndex(index) {
    return getItemHeightByIndex(index) || itemHeight.value;
  }
  return {
    itemHeight,
    estimatedItemHeight,
    totalHeight,
    setItemHeight,
    getItemHeight,
    getItemHeightOrDefault,
    getItemHeightByIndex,
    getItemHeightOrDefaultByIndex
  };
}
export { useItemHeight };
