import { Dayjs } from 'dayjs';
import { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    size: {
        type: PropType<"small" | "mini" | "medium" | "large">;
        required: true;
    };
    focused: {
        type: BooleanConstructor;
    };
    focusedIndex: {
        type: NumberConstructor;
    };
    error: {
        type: BooleanConstructor;
    };
    disabled: {
        type: PropType<boolean | boolean[]>;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
    };
    allowClear: {
        type: BooleanConstructor;
    };
    placeholder: {
        type: PropType<string[]>;
        default: () => never[];
    };
    inputValue: {
        type: PropType<string[]>;
    };
    value: {
        type: PropType<(Dayjs | undefined)[]>;
        default: () => never[];
    };
    format: {
        type: PropType<string | ((value: Dayjs) => string)>;
        required: true;
    };
}, {
    prefixCls: string;
    classNames: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    refInput0: import("vue").Ref<HTMLInputElement | undefined>;
    refInput1: import("vue").Ref<HTMLInputElement | undefined>;
    disabled0: import("vue").ComputedRef<boolean>;
    disabled1: import("vue").ComputedRef<boolean>;
    getDisabled: (index: number) => boolean;
    getInputWrapClassName: (index: number) => (string | {
        [x: string]: boolean;
    })[];
    displayValue0: import("vue").ComputedRef<string | undefined>;
    displayValue1: import("vue").ComputedRef<string | undefined>;
    changeFocusedInput: (index: number) => void;
    onChange: (e: Event) => void;
    onPressEnter: () => void;
    onPressTab: (e: Event) => void;
    onClear: () => void;
}, unknown, {}, {
    focus(index?: number | undefined): void;
    blur(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("focused-index-change" | "update:focusedIndex" | "change" | "clear" | "press-enter")[], "focused-index-change" | "update:focusedIndex" | "change" | "clear" | "press-enter", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    size?: unknown;
    focused?: unknown;
    focusedIndex?: unknown;
    error?: unknown;
    disabled?: unknown;
    readonly?: unknown;
    allowClear?: unknown;
    placeholder?: unknown;
    inputValue?: unknown;
    value?: unknown;
    format?: unknown;
} & {
    placeholder: string[];
    disabled: boolean | boolean[];
    size: "small" | "mini" | "medium" | "large";
    error: boolean;
    focused: boolean;
    readonly: boolean;
    allowClear: boolean;
    value: (Dayjs | undefined)[];
    format: string | ((value: Dayjs) => string);
} & {
    inputValue?: string[] | undefined;
    focusedIndex?: number | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    "onFocused-index-change"?: ((...args: any[]) => any) | undefined;
    "onUpdate:focusedIndex"?: ((...args: any[]) => any) | undefined;
    onClear?: ((...args: any[]) => any) | undefined;
    "onPress-enter"?: ((...args: any[]) => any) | undefined;
}, {
    placeholder: string[];
    disabled: boolean | boolean[];
    error: boolean;
    focused: boolean;
    readonly: boolean;
    allowClear: boolean;
    value: (Dayjs | undefined)[];
}>;
export default _default;
