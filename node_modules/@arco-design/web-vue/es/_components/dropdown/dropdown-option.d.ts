import { PropType } from 'vue';
import { EmitType } from '../../_utils/types';
declare const _default: import("vue").DefineComponent<{
    value: (StringConstructor | NumberConstructor)[];
    label: StringConstructor;
    disabled: BooleanConstructor;
    multiple: BooleanConstructor;
    isSelected: BooleanConstructor;
    isActive: BooleanConstructor;
    component: {
        type: StringConstructor;
        default: string;
    };
    onClick: {
        type: PropType<EmitType<(value: string | number, ev: Event) => void>>;
    };
    onMouseenter: {
        type: PropType<EmitType<(value: string | number, ev: Event) => void>>;
    };
    onMouseleave: {
        type: PropType<EmitType<(value: string | number, ev: Event) => void>>;
    };
}, {
    prefixCls: string;
    cls: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    handleClick: (e: Event) => void;
    handleMouseEnter: (e: Event) => void;
    handleMouseLeave: (e: Event) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "mouseenter" | "mouseleave")[], "click" | "mouseenter" | "mouseleave", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    value?: unknown;
    label?: unknown;
    disabled?: unknown;
    multiple?: unknown;
    isSelected?: unknown;
    isActive?: unknown;
    component?: unknown;
    onClick?: unknown;
    onMouseenter?: unknown;
    onMouseleave?: unknown;
} & {
    disabled: boolean;
    multiple: boolean;
    isSelected: boolean;
    isActive: boolean;
    component: string;
} & {
    label?: string | undefined;
    onClick?: EmitType<(value: string | number, ev: Event) => void> | undefined;
    onMouseenter?: EmitType<(value: string | number, ev: Event) => void> | undefined;
    onMouseleave?: EmitType<(value: string | number, ev: Event) => void> | undefined;
    value?: string | number | undefined;
}> & {
    onClick?: ((...args: any[]) => any) | undefined;
    onMouseenter?: ((...args: any[]) => any) | undefined;
    onMouseleave?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    multiple: boolean;
    isSelected: boolean;
    isActive: boolean;
    component: string;
}>;
export default _default;
