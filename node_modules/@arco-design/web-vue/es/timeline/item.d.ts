import { PropType } from 'vue';
import { DotType, LineType, PositionType } from './constants';
declare const _default: import("vue").DefineComponent<{
    dotColor: {
        type: StringConstructor;
    };
    dotType: {
        type: PropType<"solid" | "hollow">;
        validator: (value: DotType) => boolean;
        default: string;
    };
    lineType: {
        type: PropType<"dashed" | "dotted" | "solid">;
        validator: (value: LineType) => boolean;
        default: string;
    };
    lineColor: {
        type: StringConstructor;
    };
    label: {
        type: StringConstructor;
    };
    position: {
        type: PropType<"left" | "right" | "bottom" | "top">;
        validator: (value: PositionType) => boolean;
    };
}, {
    cls: import("vue").ComputedRef<(string | {
        [x: string]: boolean | "horizontal" | "vertical" | "relative" | "same" | undefined;
    })[]>;
    dotLineCls: import("vue").ComputedRef<string[]>;
    dotTypeCls: import("vue").ComputedRef<string[]>;
    prefixCls: string;
    computedDotLineStyle: import("vue").ComputedRef<{
        borderColor?: string | undefined;
    }>;
    computedDotStyle: import("vue").ComputedRef<{
        [x: string]: string | undefined;
    }>;
    labelPosition: import("vue").ComputedRef<"relative" | "same" | undefined>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    dotColor?: unknown;
    dotType?: unknown;
    lineType?: unknown;
    lineColor?: unknown;
    label?: unknown;
    position?: unknown;
} & {
    dotType: "solid" | "hollow";
    lineType: "dashed" | "dotted" | "solid";
} & {
    label?: string | undefined;
    position?: "left" | "right" | "bottom" | "top" | undefined;
    dotColor?: string | undefined;
    lineColor?: string | undefined;
}>, {
    dotType: "solid" | "hollow";
    lineType: "dashed" | "dotted" | "solid";
}>;
export default _default;
