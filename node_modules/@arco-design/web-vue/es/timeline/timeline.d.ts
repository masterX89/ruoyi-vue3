import { PropType } from 'vue';
import { DirectionType, ModeType, LabelPositionType } from './constants';
declare const _default: import("vue").DefineComponent<{
    reverse: {
        type: BooleanConstructor;
    };
    direction: {
        type: PropType<"horizontal" | "vertical">;
        validator: (value: DirectionType) => boolean;
        default: string;
    };
    mode: {
        type: PropType<"alternate" | "left" | "right" | "bottom" | "top">;
        validator: (value: ModeType) => boolean;
        default: string;
    };
    pending: {
        type: BooleanConstructor;
    };
    labelPosition: {
        type: PropType<"relative" | "same">;
        validator: (value: LabelPositionType) => boolean;
        default: string;
    };
}, {
    prefixCls: string;
    hasPending: import("vue").ComputedRef<true | import("vue").Slot | undefined>;
    cls: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    reverse?: unknown;
    direction?: unknown;
    mode?: unknown;
    pending?: unknown;
    labelPosition?: unknown;
} & {
    reverse: boolean;
    mode: "alternate" | "left" | "right" | "bottom" | "top";
    direction: "horizontal" | "vertical";
    labelPosition: "relative" | "same";
    pending: boolean;
} & {}>, {
    reverse: boolean;
    mode: "alternate" | "left" | "right" | "bottom" | "top";
    direction: "horizontal" | "vertical";
    labelPosition: "relative" | "same";
    pending: boolean;
}>;
export default _default;
