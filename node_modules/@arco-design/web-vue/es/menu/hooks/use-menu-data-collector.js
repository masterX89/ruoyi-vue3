import { onMounted, onUnmounted, ref, computed, provide, inject } from "vue";
import { DataCollectorInjectionKey } from "../context.js";
function getKeys(data, condition) {
  const keys = [];
  const loop = (list) => {
    list.forEach((item) => {
      if (condition(item)) {
        keys.push(item.key);
      }
      if (item.children) {
        loop(item.children);
      }
    });
  };
  loop(data);
  return keys;
}
function useMenuDataCollectorProvider() {
  const data = ref([]);
  const subMenuKeys = computed(() => getKeys(data.value, (item) => !!item.children));
  const menuItemKeys = computed(() => getKeys(data.value, (item) => !item.children));
  provide(DataCollectorInjectionKey, {
    collectSubMenu(key, children) {
      data.value = [
        ...data.value,
        {
          key,
          children
        }
      ];
    },
    removeSubMenu(key) {
      data.value = data.value.filter((item) => item.key !== key);
    },
    collectMenuItem(key) {
      data.value.push({ key });
    },
    removeMenuItem(key) {
      data.value = data.value.filter((item) => item.key !== key);
    },
    reportMenuData(reportData) {
      data.value = reportData;
    }
  });
  return {
    data,
    subMenuKeys,
    menuItemKeys
  };
}
function useMenuDataCollectorContext(isRoot = false) {
  const menuContext = isRoot ? {} : inject(DataCollectorInjectionKey);
  return menuContext || {};
}
function useMenuDataCollector(props = { isRoot: false }) {
  const { isRoot, key } = props;
  const { data, subMenuKeys, menuItemKeys } = useMenuDataCollectorProvider();
  const { collectSubMenu, removeSubMenu, reportMenuData } = useMenuDataCollectorContext(isRoot);
  if (key !== void 0) {
    onMounted(() => {
      collectSubMenu && collectSubMenu(key, data.value);
    });
    onUnmounted(() => {
      removeSubMenu && removeSubMenu(key);
    });
  }
  if (!isRoot && key === void 0) {
    onMounted(() => {
      reportMenuData && reportMenuData(data.value);
    });
  }
  return {
    menuData: data,
    subMenuKeys,
    menuItemKeys
  };
}
export { useMenuDataCollector as default, useMenuDataCollectorContext, useMenuDataCollectorProvider };
