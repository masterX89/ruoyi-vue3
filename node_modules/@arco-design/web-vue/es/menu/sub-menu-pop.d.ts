declare const _default: import("vue").DefineComponent<{
    title: {
        type: StringConstructor;
    };
    selectable: {
        type: BooleanConstructor;
    };
    isChildrenSelected: {
        type: BooleanConstructor;
    };
}, {
    menuPrefixCls: import("vue").ComputedRef<string | undefined>;
    mode: import("vue").ComputedRef<import("./interface").MenuMode | undefined>;
    level: import("vue").ComputedRef<number>;
    classNames: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    isSelected: import("vue").ComputedRef<boolean>;
    selectedKeys: import("vue").ComputedRef<string[]>;
    needPopOnBottom: import("vue").ComputedRef<boolean>;
    popVisible: import("vue").Ref<boolean>;
    triggerPrefixCls: string;
    tirggerClassNames: import("vue").ComputedRef<any[]>;
    triggerProps: import("vue").ComputedRef<Omit<import("../_utils/types").Data, "class">>;
    menuContext: Partial<Readonly<Pick<import("./interface").MenuProps, "mode" | "theme" | "triggerProps" | "levelIndent" | "autoScrollIntoView" | "scrollConfig" | "tooltipProps" | "inTrigger"> & {
        selectedKeys: string[];
        openKeys: string[];
        prefixCls: string;
        collapsed: boolean;
        expandIconDown?: (() => import("vue").VNodeTypes) | undefined;
        expandIconRight?: (() => import("vue").VNodeTypes) | undefined;
        onSubMenuClick?: ((key: string, level: number) => void) | undefined;
        onMenuItemClick?: ((key: string) => void) | undefined;
    }>>;
    onClick: () => void;
    onMenuItemClick: (key: string) => void;
    onVisibleChange: (visible: boolean) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    title?: unknown;
    selectable?: unknown;
    isChildrenSelected?: unknown;
} & {
    selectable: boolean;
    isChildrenSelected: boolean;
} & {
    title?: string | undefined;
}>, {
    selectable: boolean;
    isChildrenSelected: boolean;
}>;
export default _default;
