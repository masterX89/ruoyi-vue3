import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _AutoComplete from './auto-complete';
declare const AutoComplete: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            filterOption: import("../select/interface").FilterOption;
            modelValue: string;
            disabled: boolean;
            defaultValue: string;
            data: import("../select/interface").Option[];
            strict: boolean;
        }> & Omit<Readonly<{
            modelValue?: unknown;
            defaultValue?: unknown;
            disabled?: unknown;
            data?: unknown;
            popupContainer?: unknown;
            strict?: unknown;
            filterOption?: unknown;
            triggerProps?: unknown;
            onChange?: unknown;
            onSearch?: unknown;
            onSelect?: unknown;
        } & {
            filterOption: import("../select/interface").FilterOption;
            disabled: boolean;
            defaultValue: string;
            data: import("../select/interface").Option[];
            strict: boolean;
        } & {
            modelValue?: string | undefined;
            onChange?: import("../_utils/types").EmitType<(value: string) => void> | undefined;
            onSelect?: import("../_utils/types").EmitType<(value: string) => void> | undefined;
            popupContainer?: string | HTMLElement | null | undefined;
            onSearch?: import("../_utils/types").EmitType<(value: string) => void> | undefined;
            triggerProps?: Record<string, any> | undefined;
        }> & {
            onChange?: ((...args: any[]) => any) | undefined;
            onSelect?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            onSearch?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "filterOption" | "modelValue" | "disabled" | "defaultValue" | "data" | "strict">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "change" | "update:modelValue" | "select" | "search", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            modelValue?: unknown;
            defaultValue?: unknown;
            disabled?: unknown;
            data?: unknown;
            popupContainer?: unknown;
            strict?: unknown;
            filterOption?: unknown;
            triggerProps?: unknown;
            onChange?: unknown;
            onSearch?: unknown;
            onSelect?: unknown;
        } & {
            filterOption: import("../select/interface").FilterOption;
            disabled: boolean;
            defaultValue: string;
            data: import("../select/interface").Option[];
            strict: boolean;
        } & {
            modelValue?: string | undefined;
            onChange?: import("../_utils/types").EmitType<(value: string) => void> | undefined;
            onSelect?: import("../_utils/types").EmitType<(value: string) => void> | undefined;
            popupContainer?: string | HTMLElement | null | undefined;
            onSearch?: import("../_utils/types").EmitType<(value: string) => void> | undefined;
            triggerProps?: Record<string, any> | undefined;
        }> & {
            onChange?: ((...args: any[]) => any) | undefined;
            onSelect?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            onSearch?: ((...args: any[]) => any) | undefined;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue" | "select" | "search")[], string, {
            filterOption: import("../select/interface").FilterOption;
            modelValue: string;
            disabled: boolean;
            defaultValue: string;
            data: import("../select/interface").Option[];
            strict: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        modelValue?: unknown;
        defaultValue?: unknown;
        disabled?: unknown;
        data?: unknown;
        popupContainer?: unknown;
        strict?: unknown;
        filterOption?: unknown;
        triggerProps?: unknown;
        onChange?: unknown;
        onSearch?: unknown;
        onSelect?: unknown;
    } & {
        filterOption: import("../select/interface").FilterOption;
        disabled: boolean;
        defaultValue: string;
        data: import("../select/interface").Option[];
        strict: boolean;
    } & {
        modelValue?: string | undefined;
        onChange?: import("../_utils/types").EmitType<(value: string) => void> | undefined;
        onSelect?: import("../_utils/types").EmitType<(value: string) => void> | undefined;
        popupContainer?: string | HTMLElement | null | undefined;
        onSearch?: import("../_utils/types").EmitType<(value: string) => void> | undefined;
        triggerProps?: Record<string, any> | undefined;
    }> & {
        onChange?: ((...args: any[]) => any) | undefined;
        onSelect?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onSearch?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    modelValue?: unknown;
    defaultValue?: unknown;
    disabled?: unknown;
    data?: unknown;
    popupContainer?: unknown;
    strict?: unknown;
    filterOption?: unknown;
    triggerProps?: unknown;
    onChange?: unknown;
    onSearch?: unknown;
    onSelect?: unknown;
} & {
    filterOption: import("../select/interface").FilterOption;
    disabled: boolean;
    defaultValue: string;
    data: import("../select/interface").Option[];
    strict: boolean;
} & {
    modelValue?: string | undefined;
    onChange?: import("../_utils/types").EmitType<(value: string) => void> | undefined;
    onSelect?: import("../_utils/types").EmitType<(value: string) => void> | undefined;
    popupContainer?: string | HTMLElement | null | undefined;
    onSearch?: import("../_utils/types").EmitType<(value: string) => void> | undefined;
    triggerProps?: Record<string, any> | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    onSelect?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onSearch?: ((...args: any[]) => any) | undefined;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue" | "select" | "search")[], "select" | "change" | "update:modelValue" | "search", {
    filterOption: import("../select/interface").FilterOption;
    modelValue: string;
    disabled: boolean;
    defaultValue: string;
    data: import("../select/interface").Option[];
    strict: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type AutoCompleteInstance = InstanceType<typeof _AutoComplete>;
export default AutoComplete;
