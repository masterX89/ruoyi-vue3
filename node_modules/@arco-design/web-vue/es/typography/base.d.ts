import { VNode, PropType } from 'vue';
import { BaseProps, EllipsisConfig, EllipsisInternalConfig } from './interface';
interface BaseInternalProps extends BaseProps {
    component: keyof HTMLElementTagNameMap;
}
declare const _default: import("vue").DefineComponent<{
    component: {
        type: PropType<keyof HTMLElementTagNameMap>;
        required: true;
    };
    type: {
        type: PropType<"success" | "warning" | "danger" | "primary" | "secondary">;
    };
    bold: {
        type: BooleanConstructor;
    };
    mark: {
        type: PropType<boolean | {
            color: string;
        }>;
        default: boolean;
    };
    underline: {
        type: BooleanConstructor;
    };
    delete: {
        type: BooleanConstructor;
    };
    code: {
        type: BooleanConstructor;
    };
    disabled: {
        type: BooleanConstructor;
    };
    editable: {
        type: BooleanConstructor;
    };
    editing: {
        type: BooleanConstructor;
        default: undefined;
    };
    defaultEditing: {
        type: BooleanConstructor;
    };
    editText: {
        type: StringConstructor;
    };
    copyable: {
        type: BooleanConstructor;
    };
    copyText: {
        type: StringConstructor;
    };
    ellipsis: {
        type: PropType<boolean | EllipsisConfig>;
        default: boolean;
    };
}, {
    props: BaseInternalProps;
    classNames: import("vue").ComputedRef<string[]>;
    children: import("vue").ComputedRef<VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>[]>;
    fullText: import("vue").ComputedRef<string>;
    isEllipsis: import("vue").Ref<boolean>;
    expanded: import("vue").Ref<boolean>;
    ellipsisText: import("vue").Ref<string>;
    ellipsisConfig: import("vue").ComputedRef<EllipsisInternalConfig>;
    mergeEditing: import("vue").ComputedRef<boolean>;
    wrapperRef: import("vue").Ref<any>;
    renderOperations: (forceRenderExpand?: boolean) => JSX.Element;
    onEditChange: (text: string) => void;
    onEditEnd: () => void;
    onResize(): void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "ellipsis" | "copy" | "expand" | "editStart" | "update:editText" | "editEnd" | "update:editing")[], "change" | "copy" | "expand" | "ellipsis" | "editStart" | "update:editText" | "editEnd" | "update:editing", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    component?: unknown;
    type?: unknown;
    bold?: unknown;
    mark?: unknown;
    underline?: unknown;
    delete?: unknown;
    code?: unknown;
    disabled?: unknown;
    editable?: unknown;
    editing?: unknown;
    defaultEditing?: unknown;
    editText?: unknown;
    copyable?: unknown;
    copyText?: unknown;
    ellipsis?: unknown;
} & {
    disabled: boolean;
    code: boolean;
    mark: boolean | {
        color: string;
    };
    component: keyof HTMLElementTagNameMap;
    delete: boolean;
    ellipsis: boolean | EllipsisConfig;
    bold: boolean;
    underline: boolean;
    editable: boolean;
    defaultEditing: boolean;
    copyable: boolean;
} & {
    type?: "success" | "warning" | "danger" | "primary" | "secondary" | undefined;
    editing?: boolean | undefined;
    editText?: string | undefined;
    copyText?: string | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    onCopy?: ((...args: any[]) => any) | undefined;
    onExpand?: ((...args: any[]) => any) | undefined;
    onEllipsis?: ((...args: any[]) => any) | undefined;
    onEditStart?: ((...args: any[]) => any) | undefined;
    "onUpdate:editText"?: ((...args: any[]) => any) | undefined;
    onEditEnd?: ((...args: any[]) => any) | undefined;
    "onUpdate:editing"?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    code: boolean;
    mark: boolean | {
        color: string;
    };
    delete: boolean;
    ellipsis: boolean | EllipsisConfig;
    bold: boolean;
    underline: boolean;
    editable: boolean;
    editing: boolean;
    defaultEditing: boolean;
    copyable: boolean;
}>;
export default _default;
