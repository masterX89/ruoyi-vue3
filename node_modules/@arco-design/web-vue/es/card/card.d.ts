import { PropType } from 'vue';
export declare const SIZES: readonly ["medium", "small"];
export declare type SizeType = typeof SIZES[number];
declare const _default: import("vue").DefineComponent<{
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    hoverable: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: PropType<"small" | "medium">;
        default: string;
        validator: (value: SizeType) => boolean;
    };
    headerStyle: {
        type: ObjectConstructor;
        default: () => {};
    };
    bodyStyle: {
        type: ObjectConstructor;
        default: () => {};
    };
    title: {
        type: StringConstructor;
    };
    extra: {
        type: StringConstructor;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    bordered?: unknown;
    loading?: unknown;
    hoverable?: unknown;
    size?: unknown;
    headerStyle?: unknown;
    bodyStyle?: unknown;
    title?: unknown;
    extra?: unknown;
} & {
    size: "small" | "medium";
    loading: boolean;
    bordered: boolean;
    hoverable: boolean;
    headerStyle: Record<string, any>;
    bodyStyle: Record<string, any>;
} & {
    title?: string | undefined;
    extra?: string | undefined;
}>, {
    size: "small" | "medium";
    loading: boolean;
    bordered: boolean;
    hoverable: boolean;
    headerStyle: Record<string, any>;
    bodyStyle: Record<string, any>;
}>;
export default _default;
