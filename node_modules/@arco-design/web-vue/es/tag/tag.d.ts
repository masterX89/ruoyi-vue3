import type { CSSProperties, PropType } from 'vue';
import { EmitType } from '../_utils/types';
declare const _default: import("vue").DefineComponent<{
    color: {
        type: PropType<string>;
    };
    size: {
        type: PropType<"small" | "mini" | "medium" | "large">;
        default: () => "small" | "mini" | "medium" | "large";
    };
    visible: {
        type: BooleanConstructor;
        default: undefined;
    };
    defaultVisible: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    closable: {
        type: BooleanConstructor;
        default: boolean;
    };
    checkable: {
        type: BooleanConstructor;
        default: boolean;
    };
    checked: {
        type: BooleanConstructor;
        default: undefined;
    };
    defaultChecked: {
        type: BooleanConstructor;
        default: boolean;
    };
    onClose: {
        type: PropType<EmitType<(event: MouseEvent) => void>>;
    };
    onCheck: {
        type: PropType<EmitType<(checked: boolean, event: MouseEvent) => void>>;
    };
}, {
    prefixCls: string;
    cls: import("vue").ComputedRef<(string | {
        [x: string]: boolean | "" | undefined;
    })[]>;
    style: import("vue").ComputedRef<CSSProperties | undefined>;
    computedVisible: import("vue").ComputedRef<boolean>;
    computedChecked: import("vue").ComputedRef<boolean>;
    handleClick: (ev: MouseEvent) => void;
    handleClose: (ev: MouseEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:visible" | "update:checked" | "close" | "check")[], "update:visible" | "update:checked" | "close" | "check", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    color?: unknown;
    size?: unknown;
    visible?: unknown;
    defaultVisible?: unknown;
    loading?: unknown;
    closable?: unknown;
    checkable?: unknown;
    checked?: unknown;
    defaultChecked?: unknown;
    onClose?: unknown;
    onCheck?: unknown;
} & {
    size: "small" | "mini" | "medium" | "large";
    defaultChecked: boolean;
    loading: boolean;
    defaultVisible: boolean;
    closable: boolean;
    checkable: boolean;
} & {
    onClose?: EmitType<(event: MouseEvent) => void> | undefined;
    onCheck?: EmitType<(checked: boolean, event: MouseEvent) => void> | undefined;
    color?: string | undefined;
    visible?: boolean | undefined;
    checked?: boolean | undefined;
}> & {
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:checked"?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
    onCheck?: ((...args: any[]) => any) | undefined;
}, {
    size: "small" | "mini" | "medium" | "large";
    defaultChecked: boolean;
    loading: boolean;
    visible: boolean;
    defaultVisible: boolean;
    closable: boolean;
    checkable: boolean;
    checked: boolean;
}>;
export default _default;
