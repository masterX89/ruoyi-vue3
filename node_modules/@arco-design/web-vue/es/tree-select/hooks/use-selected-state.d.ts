import { LabelValue } from '../interface';
import { Key2TreeNode } from '../../tree/utils';
import { TreeNodeKey } from '../../tree/interface';
declare type Value = TreeNodeKey | LabelValue | (TreeNodeKey | LabelValue)[] | undefined;
export default function useSelectedState(props: {
    defaultValue: Value;
    modelValue: Value;
    key2TreeNode: Key2TreeNode;
    multiple?: boolean;
    treeCheckable?: boolean;
    treeCheckStrictly?: boolean;
}): {
    selectedKeys: import("vue").ComputedRef<TreeNodeKey[]>;
    selectedValue: import("vue").ComputedRef<LabelValue[] | undefined>;
    setLocalSelectedKeys(keys: TreeNodeKey[]): void;
};
export {};
