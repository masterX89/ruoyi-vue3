import { App } from 'vue';
import { ArcoOptions } from '../_utils/types';
import _TreeSelect from './tree-select';
declare const TreeSelect: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            retainInputValue: boolean;
            disabled: boolean;
            size: "small" | "mini" | "medium" | "large";
            error: boolean;
            data: import("../tree/interface").TreeNodeData[];
            allowClear: boolean;
            multiple: boolean;
            loading: boolean;
            allowSearch: boolean;
            border: boolean;
            popupVisible: boolean;
            defaultPopupVisible: boolean;
            labelInValue: boolean;
            treeCheckable: boolean;
            treeCheckStrictly: boolean;
            treeCheckedStrategy: "all" | "child" | "parent";
            disableFilter: boolean;
        }> & Omit<Readonly<{
            disabled?: unknown;
            loading?: unknown;
            error?: unknown;
            size?: unknown;
            border?: unknown;
            allowSearch?: unknown;
            allowClear?: unknown;
            placeholder?: unknown;
            retainInputValue?: unknown;
            maxTags?: unknown;
            multiple?: unknown;
            defaultValue?: unknown;
            modelValue?: unknown;
            fieldNames?: unknown;
            data?: unknown;
            labelInValue?: unknown;
            treeCheckable?: unknown;
            treeCheckStrictly?: unknown;
            treeCheckedStrategy?: unknown;
            treeProps?: unknown;
            triggerProps?: unknown;
            popupVisible?: unknown;
            defaultPopupVisible?: unknown;
            dropdownStyle?: unknown;
            dropdownClassName?: unknown;
            filterTreeNode?: unknown;
            loadMore?: unknown;
            disableFilter?: unknown;
            popupContainer?: unknown;
            onChange?: unknown;
            onPopupVisibleChange?: unknown;
            onSearch?: unknown;
            onClear?: unknown;
        } & {
            retainInputValue: boolean;
            disabled: boolean;
            size: "small" | "mini" | "medium" | "large";
            error: boolean;
            data: import("../tree/interface").TreeNodeData[];
            allowClear: boolean;
            multiple: boolean;
            loading: boolean;
            allowSearch: boolean;
            border: boolean;
            defaultPopupVisible: boolean;
            labelInValue: boolean;
            treeCheckable: boolean;
            treeCheckStrictly: boolean;
            treeCheckedStrategy: "all" | "child" | "parent";
            disableFilter: boolean;
        } & {
            modelValue?: string | number | (string | number)[] | import("./interface").LabelValue | import("./interface").LabelValue[] | undefined;
            placeholder?: string | undefined;
            defaultValue?: string | number | (string | number)[] | import("./interface").LabelValue | import("./interface").LabelValue[] | undefined;
            onChange?: import("../_utils/types").EmitType<(selectedValue: string | number | (string | number)[] | import("./interface").LabelValue | import("./interface").LabelValue[] | undefined) => void> | undefined;
            onClear?: import("../_utils/types").EmitType<() => void> | undefined;
            popupContainer?: string | HTMLElement | null | undefined;
            onPopupVisibleChange?: import("../_utils/types").EmitType<(popupVisible: boolean) => void> | undefined;
            popupVisible?: boolean | undefined;
            loadMore?: ((nodeData: import("../tree/interface").TreeNodeData) => Promise<void>) | undefined;
            onSearch?: import("../_utils/types").EmitType<(searchValue: string) => void> | undefined;
            triggerProps?: Record<string, any> | undefined;
            fieldNames?: import("../tree/interface").FieldNames | undefined;
            filterTreeNode?: ((searchKey: string, nodeData: import("../tree/interface").TreeNodeData) => boolean) | undefined;
            treeProps?: Partial<import("../tree/interface").TreeProps> | undefined;
            maxTags?: number | undefined;
            dropdownStyle?: import("vue").CSSProperties | undefined;
            dropdownClassName?: string | string[] | undefined;
        }> & {
            onChange?: ((...args: any[]) => any) | undefined;
            onClear?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            "onUpdate:popupVisible"?: ((...args: any[]) => any) | undefined;
            onSearch?: ((...args: any[]) => any) | undefined;
            "onPopup-visible-change"?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "retainInputValue" | "disabled" | "size" | "error" | "data" | "allowClear" | "multiple" | "loading" | "allowSearch" | "border" | "popupVisible" | "defaultPopupVisible" | "labelInValue" | "treeCheckable" | "treeCheckStrictly" | "treeCheckedStrategy" | "disableFilter">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "change" | "clear" | "update:modelValue" | "update:popupVisible" | "search" | "popup-visible-change", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            disabled?: unknown;
            loading?: unknown;
            error?: unknown;
            size?: unknown;
            border?: unknown;
            allowSearch?: unknown;
            allowClear?: unknown;
            placeholder?: unknown;
            retainInputValue?: unknown;
            maxTags?: unknown;
            multiple?: unknown;
            defaultValue?: unknown;
            modelValue?: unknown;
            fieldNames?: unknown;
            data?: unknown;
            labelInValue?: unknown;
            treeCheckable?: unknown;
            treeCheckStrictly?: unknown;
            treeCheckedStrategy?: unknown;
            treeProps?: unknown;
            triggerProps?: unknown;
            popupVisible?: unknown;
            defaultPopupVisible?: unknown;
            dropdownStyle?: unknown;
            dropdownClassName?: unknown;
            filterTreeNode?: unknown;
            loadMore?: unknown;
            disableFilter?: unknown;
            popupContainer?: unknown;
            onChange?: unknown;
            onPopupVisibleChange?: unknown;
            onSearch?: unknown;
            onClear?: unknown;
        } & {
            retainInputValue: boolean;
            disabled: boolean;
            size: "small" | "mini" | "medium" | "large";
            error: boolean;
            data: import("../tree/interface").TreeNodeData[];
            allowClear: boolean;
            multiple: boolean;
            loading: boolean;
            allowSearch: boolean;
            border: boolean;
            defaultPopupVisible: boolean;
            labelInValue: boolean;
            treeCheckable: boolean;
            treeCheckStrictly: boolean;
            treeCheckedStrategy: "all" | "child" | "parent";
            disableFilter: boolean;
        } & {
            modelValue?: string | number | (string | number)[] | import("./interface").LabelValue | import("./interface").LabelValue[] | undefined;
            placeholder?: string | undefined;
            defaultValue?: string | number | (string | number)[] | import("./interface").LabelValue | import("./interface").LabelValue[] | undefined;
            onChange?: import("../_utils/types").EmitType<(selectedValue: string | number | (string | number)[] | import("./interface").LabelValue | import("./interface").LabelValue[] | undefined) => void> | undefined;
            onClear?: import("../_utils/types").EmitType<() => void> | undefined;
            popupContainer?: string | HTMLElement | null | undefined;
            onPopupVisibleChange?: import("../_utils/types").EmitType<(popupVisible: boolean) => void> | undefined;
            popupVisible?: boolean | undefined;
            loadMore?: ((nodeData: import("../tree/interface").TreeNodeData) => Promise<void>) | undefined;
            onSearch?: import("../_utils/types").EmitType<(searchValue: string) => void> | undefined;
            triggerProps?: Record<string, any> | undefined;
            fieldNames?: import("../tree/interface").FieldNames | undefined;
            filterTreeNode?: ((searchKey: string, nodeData: import("../tree/interface").TreeNodeData) => boolean) | undefined;
            treeProps?: Partial<import("../tree/interface").TreeProps> | undefined;
            maxTags?: number | undefined;
            dropdownStyle?: import("vue").CSSProperties | undefined;
            dropdownClassName?: string | string[] | undefined;
        }> & {
            onChange?: ((...args: any[]) => any) | undefined;
            onClear?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            "onUpdate:popupVisible"?: ((...args: any[]) => any) | undefined;
            onSearch?: ((...args: any[]) => any) | undefined;
            "onPopup-visible-change"?: ((...args: any[]) => any) | undefined;
        }, {
            refSelectView: import("vue").Ref<any>;
            prefixCls: string;
            selectedValue: import("vue").ComputedRef<import("./interface").LabelValue[] | undefined>;
            selectedKeys: import("vue").ComputedRef<import("../tree/interface").TreeNodeKey[]>;
            searchValue: import("vue").Ref<string>;
            panelVisible: import("vue").ComputedRef<boolean>;
            isEmptyTreeData: import("vue").ComputedRef<boolean>;
            isEmptyFilterResult: import("vue").ComputedRef<boolean | undefined>;
            computedFilterTreeNode: import("vue").ComputedRef<((node: import("../tree/interface").TreeNodeData) => boolean | undefined) | undefined>;
            isMultiple: import("vue").ComputedRef<boolean>;
            computedDropdownStyle: import("vue").ComputedRef<import("vue").StyleValue[]>;
            onSearchValueChange(newVal: string): void;
            onSelectChange(newVal: string[]): void;
            onVisibleChange: (visible: boolean) => void;
            onInnerClear(): void;
            pickSubCompSlots: typeof import("../_utils/pick-sub-comp-slots").default;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "clear" | "update:modelValue" | "update:popupVisible" | "search" | "popup-visible-change")[], string, {
            retainInputValue: boolean;
            disabled: boolean;
            size: "small" | "mini" | "medium" | "large";
            error: boolean;
            data: import("../tree/interface").TreeNodeData[];
            allowClear: boolean;
            multiple: boolean;
            loading: boolean;
            allowSearch: boolean;
            border: boolean;
            popupVisible: boolean;
            defaultPopupVisible: boolean;
            labelInValue: boolean;
            treeCheckable: boolean;
            treeCheckStrictly: boolean;
            treeCheckedStrategy: "all" | "child" | "parent";
            disableFilter: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        disabled?: unknown;
        loading?: unknown;
        error?: unknown;
        size?: unknown;
        border?: unknown;
        allowSearch?: unknown;
        allowClear?: unknown;
        placeholder?: unknown;
        retainInputValue?: unknown;
        maxTags?: unknown;
        multiple?: unknown;
        defaultValue?: unknown;
        modelValue?: unknown;
        fieldNames?: unknown;
        data?: unknown;
        labelInValue?: unknown;
        treeCheckable?: unknown;
        treeCheckStrictly?: unknown;
        treeCheckedStrategy?: unknown;
        treeProps?: unknown;
        triggerProps?: unknown;
        popupVisible?: unknown;
        defaultPopupVisible?: unknown;
        dropdownStyle?: unknown;
        dropdownClassName?: unknown;
        filterTreeNode?: unknown;
        loadMore?: unknown;
        disableFilter?: unknown;
        popupContainer?: unknown;
        onChange?: unknown;
        onPopupVisibleChange?: unknown;
        onSearch?: unknown;
        onClear?: unknown;
    } & {
        retainInputValue: boolean;
        disabled: boolean;
        size: "small" | "mini" | "medium" | "large";
        error: boolean;
        data: import("../tree/interface").TreeNodeData[];
        allowClear: boolean;
        multiple: boolean;
        loading: boolean;
        allowSearch: boolean;
        border: boolean;
        defaultPopupVisible: boolean;
        labelInValue: boolean;
        treeCheckable: boolean;
        treeCheckStrictly: boolean;
        treeCheckedStrategy: "all" | "child" | "parent";
        disableFilter: boolean;
    } & {
        modelValue?: string | number | (string | number)[] | import("./interface").LabelValue | import("./interface").LabelValue[] | undefined;
        placeholder?: string | undefined;
        defaultValue?: string | number | (string | number)[] | import("./interface").LabelValue | import("./interface").LabelValue[] | undefined;
        onChange?: import("../_utils/types").EmitType<(selectedValue: string | number | (string | number)[] | import("./interface").LabelValue | import("./interface").LabelValue[] | undefined) => void> | undefined;
        onClear?: import("../_utils/types").EmitType<() => void> | undefined;
        popupContainer?: string | HTMLElement | null | undefined;
        onPopupVisibleChange?: import("../_utils/types").EmitType<(popupVisible: boolean) => void> | undefined;
        popupVisible?: boolean | undefined;
        loadMore?: ((nodeData: import("../tree/interface").TreeNodeData) => Promise<void>) | undefined;
        onSearch?: import("../_utils/types").EmitType<(searchValue: string) => void> | undefined;
        triggerProps?: Record<string, any> | undefined;
        fieldNames?: import("../tree/interface").FieldNames | undefined;
        filterTreeNode?: ((searchKey: string, nodeData: import("../tree/interface").TreeNodeData) => boolean) | undefined;
        treeProps?: Partial<import("../tree/interface").TreeProps> | undefined;
        maxTags?: number | undefined;
        dropdownStyle?: import("vue").CSSProperties | undefined;
        dropdownClassName?: string | string[] | undefined;
    }> & {
        onChange?: ((...args: any[]) => any) | undefined;
        onClear?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        "onUpdate:popupVisible"?: ((...args: any[]) => any) | undefined;
        onSearch?: ((...args: any[]) => any) | undefined;
        "onPopup-visible-change"?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        refSelectView: import("vue").Ref<any>;
        prefixCls: string;
        selectedValue: import("vue").ComputedRef<import("./interface").LabelValue[] | undefined>;
        selectedKeys: import("vue").ComputedRef<import("../tree/interface").TreeNodeKey[]>;
        searchValue: import("vue").Ref<string>;
        panelVisible: import("vue").ComputedRef<boolean>;
        isEmptyTreeData: import("vue").ComputedRef<boolean>;
        isEmptyFilterResult: import("vue").ComputedRef<boolean | undefined>;
        computedFilterTreeNode: import("vue").ComputedRef<((node: import("../tree/interface").TreeNodeData) => boolean | undefined) | undefined>;
        isMultiple: import("vue").ComputedRef<boolean>;
        computedDropdownStyle: import("vue").ComputedRef<import("vue").StyleValue[]>;
        onSearchValueChange(newVal: string): void;
        onSelectChange(newVal: string[]): void;
        onVisibleChange: (visible: boolean) => void;
        onInnerClear(): void;
        pickSubCompSlots: typeof import("../_utils/pick-sub-comp-slots").default;
    }> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    disabled?: unknown;
    loading?: unknown;
    error?: unknown;
    size?: unknown;
    border?: unknown;
    allowSearch?: unknown;
    allowClear?: unknown;
    placeholder?: unknown;
    retainInputValue?: unknown;
    maxTags?: unknown;
    multiple?: unknown;
    defaultValue?: unknown;
    modelValue?: unknown;
    fieldNames?: unknown;
    data?: unknown;
    labelInValue?: unknown;
    treeCheckable?: unknown;
    treeCheckStrictly?: unknown;
    treeCheckedStrategy?: unknown;
    treeProps?: unknown;
    triggerProps?: unknown;
    popupVisible?: unknown;
    defaultPopupVisible?: unknown;
    dropdownStyle?: unknown;
    dropdownClassName?: unknown;
    filterTreeNode?: unknown;
    loadMore?: unknown;
    disableFilter?: unknown;
    popupContainer?: unknown;
    onChange?: unknown;
    onPopupVisibleChange?: unknown;
    onSearch?: unknown;
    onClear?: unknown;
} & {
    retainInputValue: boolean;
    disabled: boolean;
    size: "small" | "mini" | "medium" | "large";
    error: boolean;
    data: import("../tree/interface").TreeNodeData[];
    allowClear: boolean;
    multiple: boolean;
    loading: boolean;
    allowSearch: boolean;
    border: boolean;
    defaultPopupVisible: boolean;
    labelInValue: boolean;
    treeCheckable: boolean;
    treeCheckStrictly: boolean;
    treeCheckedStrategy: "all" | "child" | "parent";
    disableFilter: boolean;
} & {
    modelValue?: string | number | (string | number)[] | import("./interface").LabelValue | import("./interface").LabelValue[] | undefined;
    placeholder?: string | undefined;
    defaultValue?: string | number | (string | number)[] | import("./interface").LabelValue | import("./interface").LabelValue[] | undefined;
    onChange?: import("../_utils/types").EmitType<(selectedValue: string | number | (string | number)[] | import("./interface").LabelValue | import("./interface").LabelValue[] | undefined) => void> | undefined;
    onClear?: import("../_utils/types").EmitType<() => void> | undefined;
    popupContainer?: string | HTMLElement | null | undefined;
    onPopupVisibleChange?: import("../_utils/types").EmitType<(popupVisible: boolean) => void> | undefined;
    popupVisible?: boolean | undefined;
    loadMore?: ((nodeData: import("../tree/interface").TreeNodeData) => Promise<void>) | undefined;
    onSearch?: import("../_utils/types").EmitType<(searchValue: string) => void> | undefined;
    triggerProps?: Record<string, any> | undefined;
    fieldNames?: import("../tree/interface").FieldNames | undefined;
    filterTreeNode?: ((searchKey: string, nodeData: import("../tree/interface").TreeNodeData) => boolean) | undefined;
    treeProps?: Partial<import("../tree/interface").TreeProps> | undefined;
    maxTags?: number | undefined;
    dropdownStyle?: import("vue").CSSProperties | undefined;
    dropdownClassName?: string | string[] | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    onClear?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:popupVisible"?: ((...args: any[]) => any) | undefined;
    onSearch?: ((...args: any[]) => any) | undefined;
    "onPopup-visible-change"?: ((...args: any[]) => any) | undefined;
}, {
    refSelectView: import("vue").Ref<any>;
    prefixCls: string;
    selectedValue: import("vue").ComputedRef<import("./interface").LabelValue[] | undefined>;
    selectedKeys: import("vue").ComputedRef<import("../tree/interface").TreeNodeKey[]>;
    searchValue: import("vue").Ref<string>;
    panelVisible: import("vue").ComputedRef<boolean>;
    isEmptyTreeData: import("vue").ComputedRef<boolean>;
    isEmptyFilterResult: import("vue").ComputedRef<boolean | undefined>;
    computedFilterTreeNode: import("vue").ComputedRef<((node: import("../tree/interface").TreeNodeData) => boolean | undefined) | undefined>;
    isMultiple: import("vue").ComputedRef<boolean>;
    computedDropdownStyle: import("vue").ComputedRef<import("vue").StyleValue[]>;
    onSearchValueChange(newVal: string): void;
    onSelectChange(newVal: string[]): void;
    onVisibleChange: (visible: boolean) => void;
    onInnerClear(): void;
    pickSubCompSlots: typeof import("../_utils/pick-sub-comp-slots").default;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "clear" | "update:modelValue" | "update:popupVisible" | "search" | "popup-visible-change")[], "change" | "clear" | "update:modelValue" | "update:popupVisible" | "search" | "popup-visible-change", {
    retainInputValue: boolean;
    disabled: boolean;
    size: "small" | "mini" | "medium" | "large";
    error: boolean;
    data: import("../tree/interface").TreeNodeData[];
    allowClear: boolean;
    multiple: boolean;
    loading: boolean;
    allowSearch: boolean;
    border: boolean;
    popupVisible: boolean;
    defaultPopupVisible: boolean;
    labelInValue: boolean;
    treeCheckable: boolean;
    treeCheckStrictly: boolean;
    treeCheckedStrategy: "all" | "child" | "parent";
    disableFilter: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type TreeSelectInstance = InstanceType<typeof _TreeSelect>;
export default TreeSelect;
