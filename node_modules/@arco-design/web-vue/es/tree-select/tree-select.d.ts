import { CSSProperties, PropType, StyleValue } from 'vue';
import { LabelValue } from './interface';
import { FieldNames, TreeNodeData, TreeProps, TreeNodeKey } from '../tree/interface';
import pickSubCompSlots from '../_utils/pick-sub-comp-slots';
import { EmitType } from '../_utils/types';
declare const _default: import("vue").DefineComponent<{
    disabled: {
        type: BooleanConstructor;
    };
    loading: {
        type: BooleanConstructor;
    };
    error: {
        type: BooleanConstructor;
    };
    size: {
        type: PropType<"small" | "mini" | "medium" | "large">;
        default: () => "small" | "mini" | "medium" | "large";
    };
    border: {
        type: BooleanConstructor;
    };
    allowSearch: {
        type: BooleanConstructor;
    };
    allowClear: {
        type: BooleanConstructor;
    };
    placeholder: {
        type: StringConstructor;
    };
    retainInputValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    maxTags: {
        type: NumberConstructor;
    };
    multiple: {
        type: BooleanConstructor;
    };
    defaultValue: {
        type: PropType<string | number | (string | number)[] | LabelValue | LabelValue[]>;
    };
    modelValue: {
        type: PropType<string | number | (string | number)[] | LabelValue | LabelValue[]>;
    };
    fieldNames: {
        type: PropType<FieldNames>;
    };
    data: {
        type: PropType<TreeNodeData[]>;
        default: () => never[];
    };
    labelInValue: {
        type: BooleanConstructor;
    };
    treeCheckable: {
        type: BooleanConstructor;
    };
    treeCheckStrictly: {
        type: BooleanConstructor;
    };
    treeCheckedStrategy: {
        type: PropType<"all" | "child" | "parent">;
        default: string;
    };
    treeProps: {
        type: PropType<Partial<TreeProps>>;
    };
    triggerProps: {
        type: PropType<Record<string, any>>;
    };
    popupVisible: {
        type: BooleanConstructor;
        default: undefined;
    };
    defaultPopupVisible: {
        type: BooleanConstructor;
    };
    dropdownStyle: {
        type: PropType<CSSProperties>;
    };
    dropdownClassName: {
        type: PropType<string | string[]>;
    };
    filterTreeNode: {
        type: PropType<(searchKey: string, nodeData: TreeNodeData) => boolean>;
    };
    loadMore: {
        type: PropType<(nodeData: TreeNodeData) => Promise<void>>;
    };
    disableFilter: {
        type: BooleanConstructor;
    };
    popupContainer: {
        type: PropType<string | HTMLElement | null | undefined>;
    };
    onChange: {
        type: PropType<EmitType<(selectedValue: string | number | LabelValue | Array<string | number> | LabelValue[] | undefined) => void>>;
    };
    onPopupVisibleChange: {
        type: PropType<EmitType<(popupVisible: boolean) => void>>;
    };
    onSearch: {
        type: PropType<EmitType<(searchValue: string) => void>>;
    };
    onClear: {
        type: PropType<EmitType<() => void>>;
    };
}, {
    refSelectView: import("vue").Ref<any>;
    prefixCls: string;
    selectedValue: import("vue").ComputedRef<LabelValue[] | undefined>;
    selectedKeys: import("vue").ComputedRef<TreeNodeKey[]>;
    searchValue: import("vue").Ref<string>;
    panelVisible: import("vue").ComputedRef<boolean>;
    isEmptyTreeData: import("vue").ComputedRef<boolean>;
    isEmptyFilterResult: import("vue").ComputedRef<boolean | undefined>;
    computedFilterTreeNode: import("vue").ComputedRef<((node: TreeNodeData) => boolean | undefined) | undefined>;
    isMultiple: import("vue").ComputedRef<boolean>;
    computedDropdownStyle: import("vue").ComputedRef<StyleValue[]>;
    onSearchValueChange(newVal: string): void;
    onSelectChange(newVal: string[]): void;
    onVisibleChange: (visible: boolean) => void;
    onInnerClear(): void;
    pickSubCompSlots: typeof pickSubCompSlots;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "clear" | "update:modelValue" | "update:popupVisible" | "search" | "popup-visible-change")[], "change" | "clear" | "update:modelValue" | "update:popupVisible" | "search" | "popup-visible-change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    disabled?: unknown;
    loading?: unknown;
    error?: unknown;
    size?: unknown;
    border?: unknown;
    allowSearch?: unknown;
    allowClear?: unknown;
    placeholder?: unknown;
    retainInputValue?: unknown;
    maxTags?: unknown;
    multiple?: unknown;
    defaultValue?: unknown;
    modelValue?: unknown;
    fieldNames?: unknown;
    data?: unknown;
    labelInValue?: unknown;
    treeCheckable?: unknown;
    treeCheckStrictly?: unknown;
    treeCheckedStrategy?: unknown;
    treeProps?: unknown;
    triggerProps?: unknown;
    popupVisible?: unknown;
    defaultPopupVisible?: unknown;
    dropdownStyle?: unknown;
    dropdownClassName?: unknown;
    filterTreeNode?: unknown;
    loadMore?: unknown;
    disableFilter?: unknown;
    popupContainer?: unknown;
    onChange?: unknown;
    onPopupVisibleChange?: unknown;
    onSearch?: unknown;
    onClear?: unknown;
} & {
    retainInputValue: boolean;
    disabled: boolean;
    size: "small" | "mini" | "medium" | "large";
    error: boolean;
    data: TreeNodeData[];
    allowClear: boolean;
    multiple: boolean;
    loading: boolean;
    allowSearch: boolean;
    border: boolean;
    defaultPopupVisible: boolean;
    labelInValue: boolean;
    treeCheckable: boolean;
    treeCheckStrictly: boolean;
    treeCheckedStrategy: "all" | "child" | "parent";
    disableFilter: boolean;
} & {
    modelValue?: string | number | (string | number)[] | LabelValue | LabelValue[] | undefined;
    placeholder?: string | undefined;
    defaultValue?: string | number | (string | number)[] | LabelValue | LabelValue[] | undefined;
    onChange?: EmitType<(selectedValue: string | number | LabelValue | Array<string | number> | LabelValue[] | undefined) => void> | undefined;
    onClear?: EmitType<() => void> | undefined;
    popupContainer?: string | HTMLElement | null | undefined;
    onPopupVisibleChange?: EmitType<(popupVisible: boolean) => void> | undefined;
    popupVisible?: boolean | undefined;
    loadMore?: ((nodeData: TreeNodeData) => Promise<void>) | undefined;
    onSearch?: EmitType<(searchValue: string) => void> | undefined;
    triggerProps?: Record<string, any> | undefined;
    fieldNames?: FieldNames | undefined;
    filterTreeNode?: ((searchKey: string, nodeData: TreeNodeData) => boolean) | undefined;
    treeProps?: Partial<TreeProps> | undefined;
    maxTags?: number | undefined;
    dropdownStyle?: CSSProperties | undefined;
    dropdownClassName?: string | string[] | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    onClear?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:popupVisible"?: ((...args: any[]) => any) | undefined;
    onSearch?: ((...args: any[]) => any) | undefined;
    "onPopup-visible-change"?: ((...args: any[]) => any) | undefined;
}, {
    retainInputValue: boolean;
    disabled: boolean;
    size: "small" | "mini" | "medium" | "large";
    error: boolean;
    data: TreeNodeData[];
    allowClear: boolean;
    multiple: boolean;
    loading: boolean;
    allowSearch: boolean;
    border: boolean;
    popupVisible: boolean;
    defaultPopupVisible: boolean;
    labelInValue: boolean;
    treeCheckable: boolean;
    treeCheckStrictly: boolean;
    treeCheckedStrategy: "all" | "child" | "parent";
    disableFilter: boolean;
}>;
export default _default;
