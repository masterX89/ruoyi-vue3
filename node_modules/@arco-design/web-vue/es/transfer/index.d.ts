import type { App } from 'vue';
import type { ArcoOptions } from '../_utils/types';
import _Transfer from './transfer';
declare const Transfer: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            modelValue: string[];
            disabled: boolean;
            defaultValue: string[];
            data: import("./interface").TransferItem[];
            title: string[];
            simple: boolean;
            selected: string[];
            showSearch: boolean;
            defaultSelected: string[];
            oneWay: boolean;
        }> & Omit<Readonly<{
            data?: unknown;
            modelValue?: unknown;
            defaultValue?: unknown;
            selected?: unknown;
            defaultSelected?: unknown;
            disabled?: unknown;
            simple?: unknown;
            oneWay?: unknown;
            showSearch?: unknown;
            title?: unknown;
            onChange?: unknown;
            onSelect?: unknown;
            onSearch?: unknown;
        } & {
            disabled: boolean;
            defaultValue: string[];
            data: import("./interface").TransferItem[];
            title: string[];
            simple: boolean;
            showSearch: boolean;
            defaultSelected: string[];
            oneWay: boolean;
        } & {
            modelValue?: string[] | undefined;
            onChange?: Function | unknown[] | undefined;
            onSelect?: Function | unknown[] | undefined;
            onSearch?: Function | unknown[] | undefined;
            selected?: string[] | undefined;
        }> & {
            onChange?: ((...args: any[]) => any) | undefined;
            onSelect?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            onSearch?: ((...args: any[]) => any) | undefined;
            "onUpdate:selected"?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "modelValue" | "disabled" | "defaultValue" | "data" | "title" | "simple" | "selected" | "showSearch" | "defaultSelected" | "oneWay">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: "change" | "update:modelValue" | "select" | "search" | "update:selected", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            data?: unknown;
            modelValue?: unknown;
            defaultValue?: unknown;
            selected?: unknown;
            defaultSelected?: unknown;
            disabled?: unknown;
            simple?: unknown;
            oneWay?: unknown;
            showSearch?: unknown;
            title?: unknown;
            onChange?: unknown;
            onSelect?: unknown;
            onSearch?: unknown;
        } & {
            disabled: boolean;
            defaultValue: string[];
            data: import("./interface").TransferItem[];
            title: string[];
            simple: boolean;
            showSearch: boolean;
            defaultSelected: string[];
            oneWay: boolean;
        } & {
            modelValue?: string[] | undefined;
            onChange?: Function | unknown[] | undefined;
            onSelect?: Function | unknown[] | undefined;
            onSearch?: Function | unknown[] | undefined;
            selected?: string[] | undefined;
        }> & {
            onChange?: ((...args: any[]) => any) | undefined;
            onSelect?: ((...args: any[]) => any) | undefined;
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            onSearch?: ((...args: any[]) => any) | undefined;
            "onUpdate:selected"?: ((...args: any[]) => any) | undefined;
        }, {
            prefixCls: string;
            cls: import("vue").ComputedRef<(string | {
                [x: string]: boolean;
            })[]>;
            dataInfo: import("vue").ComputedRef<{
                sourceInfo: import("./interface").DataInfo;
                targetInfo: import("./interface").DataInfo;
            }>;
            computedSelected: import("vue").ComputedRef<string[]>;
            sourceTitle: import("vue").ComputedRef<string>;
            targetTitle: import("vue").ComputedRef<string>;
            handleClick: (target: "source" | "target") => void;
            handleSelect: (values: string[]) => void;
            handleSearch: (value: string, type: "source" | "target") => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue" | "select" | "search" | "update:selected")[], string, {
            modelValue: string[];
            disabled: boolean;
            defaultValue: string[];
            data: import("./interface").TransferItem[];
            title: string[];
            simple: boolean;
            selected: string[];
            showSearch: boolean;
            defaultSelected: string[];
            oneWay: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<{
        data?: unknown;
        modelValue?: unknown;
        defaultValue?: unknown;
        selected?: unknown;
        defaultSelected?: unknown;
        disabled?: unknown;
        simple?: unknown;
        oneWay?: unknown;
        showSearch?: unknown;
        title?: unknown;
        onChange?: unknown;
        onSelect?: unknown;
        onSearch?: unknown;
    } & {
        disabled: boolean;
        defaultValue: string[];
        data: import("./interface").TransferItem[];
        title: string[];
        simple: boolean;
        showSearch: boolean;
        defaultSelected: string[];
        oneWay: boolean;
    } & {
        modelValue?: string[] | undefined;
        onChange?: Function | unknown[] | undefined;
        onSelect?: Function | unknown[] | undefined;
        onSearch?: Function | unknown[] | undefined;
        selected?: string[] | undefined;
    }> & {
        onChange?: ((...args: any[]) => any) | undefined;
        onSelect?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onSearch?: ((...args: any[]) => any) | undefined;
        "onUpdate:selected"?: ((...args: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        prefixCls: string;
        cls: import("vue").ComputedRef<(string | {
            [x: string]: boolean;
        })[]>;
        dataInfo: import("vue").ComputedRef<{
            sourceInfo: import("./interface").DataInfo;
            targetInfo: import("./interface").DataInfo;
        }>;
        computedSelected: import("vue").ComputedRef<string[]>;
        sourceTitle: import("vue").ComputedRef<string>;
        targetTitle: import("vue").ComputedRef<string>;
        handleClick: (target: "source" | "target") => void;
        handleSelect: (values: string[]) => void;
        handleSearch: (value: string, type: "source" | "target") => void;
    }> & {} & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<{
    data?: unknown;
    modelValue?: unknown;
    defaultValue?: unknown;
    selected?: unknown;
    defaultSelected?: unknown;
    disabled?: unknown;
    simple?: unknown;
    oneWay?: unknown;
    showSearch?: unknown;
    title?: unknown;
    onChange?: unknown;
    onSelect?: unknown;
    onSearch?: unknown;
} & {
    disabled: boolean;
    defaultValue: string[];
    data: import("./interface").TransferItem[];
    title: string[];
    simple: boolean;
    showSearch: boolean;
    defaultSelected: string[];
    oneWay: boolean;
} & {
    modelValue?: string[] | undefined;
    onChange?: Function | unknown[] | undefined;
    onSelect?: Function | unknown[] | undefined;
    onSearch?: Function | unknown[] | undefined;
    selected?: string[] | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    onSelect?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onSearch?: ((...args: any[]) => any) | undefined;
    "onUpdate:selected"?: ((...args: any[]) => any) | undefined;
}, {
    prefixCls: string;
    cls: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    dataInfo: import("vue").ComputedRef<{
        sourceInfo: import("./interface").DataInfo;
        targetInfo: import("./interface").DataInfo;
    }>;
    computedSelected: import("vue").ComputedRef<string[]>;
    sourceTitle: import("vue").ComputedRef<string>;
    targetTitle: import("vue").ComputedRef<string>;
    handleClick: (target: "source" | "target") => void;
    handleSelect: (values: string[]) => void;
    handleSearch: (value: string, type: "source" | "target") => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue" | "select" | "search" | "update:selected")[], "select" | "change" | "update:modelValue" | "search" | "update:selected", {
    modelValue: string[];
    disabled: boolean;
    defaultValue: string[];
    data: import("./interface").TransferItem[];
    title: string[];
    simple: boolean;
    selected: string[];
    showSearch: boolean;
    defaultSelected: string[];
    oneWay: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App, options?: ArcoOptions | undefined) => void;
};
export declare type TransferInstance = InstanceType<typeof _Transfer>;
export default Transfer;
