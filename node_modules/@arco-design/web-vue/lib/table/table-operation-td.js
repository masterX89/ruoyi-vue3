"use strict";
var vue = require("vue");
var globalConfig = require("../_utils/global-config.js");
var utils = require("./utils.js");
var index = require("../checkbox/index.js");
var index$1 = require("../radio/index.js");
var index$2 = require("../icon/icon-plus/index.js");
var index$3 = require("../icon/icon-minus/index.js");
var OperationTd = vue.defineComponent({
  name: "OperationTd",
  components: {
    Checkbox: index["default"],
    Radio: index$1["default"],
    IconPlus: index$2,
    IconMinus: index$3
  },
  props: {
    record: {
      type: Object,
      required: true
    },
    rowKey: {
      type: String,
      default: "key"
    },
    operationColumn: {
      type: Object,
      required: true
    },
    operations: {
      type: Array,
      required: true
    },
    isRadio: {
      type: Boolean
    },
    hasExpand: {
      type: Boolean
    },
    selectedRowKeys: {
      type: Array,
      required: true
    },
    expandedIcon: {
      type: Function
    },
    expandedRowKeys: {
      type: Array,
      required: true
    },
    renderExpandBtn: {
      type: Function,
      required: true
    }
  },
  emits: ["select", "expand"],
  setup(props, {
    emit,
    slots
  }) {
    const prefixCls = globalConfig.getPrefixCls("table");
    const style = vue.computed(() => utils.getOperationStyle(props.operationColumn, props.operations));
    const cls = vue.computed(() => [`${prefixCls}-td`, `${prefixCls}-operation`, {
      [`${prefixCls}-checkbox`]: props.operationColumn.name === "selection" && !props.isRadio,
      [`${prefixCls}-radio`]: props.operationColumn.name === "selection" && props.isRadio,
      [`${prefixCls}-expand`]: props.operationColumn.name === "expand"
    }, ...utils.getOperationFixedCls(prefixCls, props.operationColumn)]);
    const renderSelection = () => {
      var _a;
      const rowKey = props.record[props.rowKey];
      if (props.isRadio) {
        return vue.createVNode(index$1["default"], {
          "value": rowKey,
          "modelValue": (_a = props.selectedRowKeys[0]) != null ? _a : "",
          "disabled": Boolean(props.record.disabled),
          "uninjectGroupContext": true,
          "onChange": (value) => emit("select", [value])
        }, null);
      }
      return vue.createVNode(index["default"], {
        "value": rowKey,
        "modelValue": props.selectedRowKeys,
        "disabled": Boolean(props.record.disabled),
        "uninjectGroupContext": true,
        "onChange": (values) => emit("select", values)
      }, null);
    };
    const renderContent = () => {
      if (props.operationColumn.name === "selection") {
        return renderSelection();
      }
      if (props.operationColumn.name === "expand") {
        if (props.hasExpand) {
          return props.renderExpandBtn(props.record);
        }
        return null;
      }
      if (props.operationColumn.bodyNode) {
        return props.operationColumn.bodyNode(props.record, {
          class: cls.value,
          style: style.value
        });
      }
      return null;
    };
    return () => vue.createVNode("td", {
      "class": cls.value,
      "style": style.value
    }, [vue.createVNode("span", {
      "class": `${prefixCls}-cell`
    }, [renderContent()])]);
  }
});
module.exports = OperationTd;
