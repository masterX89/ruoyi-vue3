"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports[Symbol.toStringTag] = "Module";
var vue = require("vue");
const useRowSelection = (props, {
  allRowKeys,
  currentAllRowKeys,
  currentAllEnabledRowKeys
}, emit) => {
  var _a, _b;
  const isRadio = vue.computed(() => {
    var _a2;
    return ((_a2 = props.rowSelection) == null ? void 0 : _a2.type) === "radio";
  });
  const _selectedRowKeys = vue.ref((_b = (_a = props.rowSelection) == null ? void 0 : _a.defaultSelectedRowKeys) != null ? _b : []);
  const selectedRowKeys = vue.computed(() => {
    var _a2, _b2;
    return (_b2 = (_a2 = props.rowSelection) == null ? void 0 : _a2.selectedRowKeys) != null ? _b2 : _selectedRowKeys.value;
  });
  const currentSelectedRowKeys = vue.computed(() => selectedRowKeys.value.filter((key) => currentAllRowKeys.value.includes(key)));
  const handleSelectAll = (checked) => {
    const newSelectedRowKeys = new Set(selectedRowKeys.value);
    for (const key of currentAllEnabledRowKeys.value) {
      if (checked) {
        newSelectedRowKeys.add(key);
      } else {
        newSelectedRowKeys.delete(key);
      }
    }
    _selectedRowKeys.value = [...newSelectedRowKeys];
    emit("selectAll", checked);
    emit("selectionChange", _selectedRowKeys.value);
  };
  const handleSelect = (values) => {
    _selectedRowKeys.value = values;
    emit("select", values);
    emit("selectionChange", values);
  };
  return {
    isRadio,
    selectedRowKeys,
    currentSelectedRowKeys,
    handleSelectAll,
    handleSelect
  };
};
exports.useRowSelection = useRowSelection;
