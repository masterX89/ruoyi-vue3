"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports[Symbol.toStringTag] = "Module";
var vue = require("vue");
var is = require("../../_utils/is.js");
const useColumnFilter = (props, emit) => {
  var _a;
  const { dataIndex, filterable } = props.column;
  const filterPopupVisible = vue.ref(false);
  const isFilterActive = vue.computed(() => is.isArray(props.filterValue) && props.filterValue.length > 0);
  const isMultipleFilter = vue.computed(() => Boolean(filterable == null ? void 0 : filterable.multiple));
  const columnFilterValue = vue.ref((_a = props.filterValue) != null ? _a : []);
  vue.watch(() => props.filterValue, (value) => {
    if (is.isArray(value) && String(value) !== String(columnFilterValue.value)) {
      columnFilterValue.value = value;
    }
  });
  const handleFilterPopupVisibleChange = (value) => {
    filterPopupVisible.value = value;
  };
  const setFilterValue = (filterValue) => {
    columnFilterValue.value = filterValue;
  };
  const handleCheckboxFilterChange = (values) => {
    setFilterValue(values);
  };
  const handleRadioFilterChange = (value) => {
    setFilterValue([value]);
  };
  const handleFilterConfirm = (e) => {
    emit("filterChange", dataIndex, columnFilterValue.value, e);
    handleFilterPopupVisibleChange(false);
  };
  const handleFilterReset = (e) => {
    setFilterValue([]);
    emit("filterChange", dataIndex, columnFilterValue.value, e);
    handleFilterPopupVisibleChange(false);
  };
  return {
    filterPopupVisible,
    isFilterActive,
    isMultipleFilter,
    columnFilterValue,
    handleFilterPopupVisibleChange,
    setFilterValue,
    handleCheckboxFilterChange,
    handleRadioFilterChange,
    handleFilterConfirm,
    handleFilterReset
  };
};
exports.useColumnFilter = useColumnFilter;
