"use strict";
var vue = require("vue");
var index$1 = require("../input/index.js");
var index = require("../trigger/index.js");
var globalConfig = require("../_utils/global-config.js");
var useOptions = require("../_hooks/use-options.js");
var is = require("../_utils/is.js");
var dropdownPanel = require("../_components/dropdown/dropdown-panel.js");
var dropdownOption = require("../_components/dropdown/dropdown-option.js");
require("../_components/dropdown/dropdown-optgroup.js");
var keyboard = require("../_utils/keyboard.js");
function _isSlot(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
}
var _AutoComplete = vue.defineComponent({
  name: "AutoComplete",
  inheritAttrs: false,
  props: {
    modelValue: {
      type: String,
      default: void 0
    },
    defaultValue: {
      type: String,
      default: ""
    },
    disabled: {
      type: Boolean,
      default: false
    },
    data: {
      type: Array,
      default: () => []
    },
    popupContainer: {
      type: [String, Object]
    },
    strict: {
      type: Boolean,
      default: false
    },
    filterOption: {
      type: [Boolean, Function],
      default: true
    },
    triggerProps: {
      type: Object
    },
    onChange: {
      type: [Function, Array]
    },
    onSearch: {
      type: [Function, Array]
    },
    onSelect: {
      type: [Function, Array]
    }
  },
  emits: [
    "update:modelValue",
    "change",
    "search",
    "select"
  ],
  setup(props, {
    emit,
    attrs,
    slots
  }) {
    const prefixCls = globalConfig.getPrefixCls("auto-complete");
    const _value = vue.ref(props.defaultValue);
    const inputRef = vue.ref();
    const computedValue = vue.computed(() => {
      var _a;
      return (_a = props.modelValue) != null ? _a : _value.value;
    });
    const {
      data
    } = vue.toRefs(props);
    const dropdownRef = vue.ref();
    const optionRefs = vue.ref({});
    const strictFilterOption = (inputValue, optionInfo) => {
      return optionInfo.label.includes(inputValue);
    };
    const mergedFilterOption = vue.computed(() => {
      if (is.isFunction(props.filterOption)) {
        return props.filterOption;
      }
      if (props.filterOption && props.strict) {
        return strictFilterOption;
      }
      return props.filterOption;
    });
    const extraOptions = vue.ref([]);
    const {
      nodes,
      optionInfoMap,
      activeOption,
      getNextActiveOption,
      scrollIntoView
    } = useOptions.useOptions({
      options: data,
      extraOptions,
      inputValue: computedValue,
      filterOption: mergedFilterOption,
      dropdownRef,
      optionRefs
    });
    const handleChange = (value) => {
      _value.value = value;
      emit("update:modelValue", value);
      emit("change", value);
    };
    const _popupVisible = vue.ref(false);
    const computedPopupVisible = vue.computed(() => _popupVisible.value && nodes.value.length > 0);
    const handlePopupVisibleChange = (popupVisible) => {
      _popupVisible.value = popupVisible;
    };
    const handleSelect = (value, e) => {
      var _a;
      emit("select", value);
      handleChange(value);
      (_a = inputRef.value) == null ? void 0 : _a.blur();
    };
    const handleMouseEnter = (value, e) => {
      const optionInfo = optionInfoMap.get(value);
      if (optionInfo) {
        activeOption.value = optionInfo;
      }
    };
    const handleMouseLeave = (e) => {
      activeOption.value = void 0;
    };
    const handleInputValueChange = (value) => {
      emit("search", value);
      handleChange(value);
    };
    const handleKeyDown = keyboard.getKeyDownHandler(new Map([[keyboard.CODE.ENTER, (e) => {
      if (computedPopupVisible.value) {
        if (activeOption.value) {
          handleSelect(String(activeOption.value.value));
        }
        e.preventDefault();
      }
    }], [keyboard.CODE.ESC, (e) => {
      handlePopupVisibleChange(false);
      e.preventDefault();
    }], [keyboard.CODE.ARROW_DOWN, (e) => {
      if (computedPopupVisible.value) {
        const next = getNextActiveOption("down");
        if (next) {
          activeOption.value = next;
          scrollIntoView(next.value);
        }
        e.preventDefault();
      }
    }], [keyboard.CODE.ARROW_UP, (e) => {
      if (computedPopupVisible.value) {
        const next = getNextActiveOption("up");
        if (next) {
          activeOption.value = next;
          scrollIntoView(next.value);
        }
        e.preventDefault();
      }
    }]]));
    const getOptionContentFunc = (item) => {
      if (is.isFunction(slots.option) && item.value) {
        const optionInfo = optionInfoMap.get(item.value);
        const optionSlot = slots.option;
        return () => optionSlot({
          data: optionInfo
        });
      }
      return () => item.label;
    };
    const renderOption = (item) => {
      const {
        value = ""
      } = item;
      return vue.createVNode(dropdownOption, {
        "ref": (ref) => {
          if (ref == null ? void 0 : ref.$el) {
            optionRefs.value[value] = ref.$el;
          }
        },
        "key": item.key,
        "value": value,
        "disabled": item.disabled,
        "isActive": activeOption.value && value === activeOption.value.value,
        "onClick": handleSelect,
        "onMouseenter": handleMouseEnter,
        "onMouseleave": handleMouseLeave
      }, {
        default: getOptionContentFunc(item)
      });
    };
    const renderDropdown = () => {
      const _children = nodes.value.map((node) => renderOption(node));
      if (_children.length === 0) {
        return null;
      }
      return vue.createVNode(dropdownPanel, {
        "ref": dropdownRef,
        "class": `${prefixCls}-dropdown`
      }, _isSlot(_children) ? _children : {
        default: () => [_children]
      });
    };
    return () => vue.createVNode(index, vue.mergeProps({
      "trigger": "focus",
      "position": "bl",
      "popupVisible": computedPopupVisible.value,
      "clickToClose": false,
      "preventFocus": true,
      "popupOffset": 4,
      "disabled": props.disabled,
      "autoFitPopupWidth": true
    }, props.triggerProps, {
      "onPopupVisibleChange": handlePopupVisibleChange
    }), {
      default: () => [vue.createVNode(index$1["default"], vue.mergeProps({
        "ref": inputRef,
        "modelValue": computedValue.value,
        "onInput": handleInputValueChange,
        "disabled": props.disabled
      }, attrs, {
        "onKeydown": handleKeyDown
      }), slots)],
      content: renderDropdown
    });
  }
});
module.exports = _AutoComplete;
