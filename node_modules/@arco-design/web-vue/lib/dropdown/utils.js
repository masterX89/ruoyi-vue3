"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports[Symbol.toStringTag] = "Module";
var vueUtils = require("../_utils/vue-utils.js");
var is = require("../_utils/is.js");
var omit = require("../_utils/omit.js");
const isGroup = (option) => {
  return is.isObject(option) && "isGroup" in option;
};
const isSubmenu = (option) => {
  return is.isObject(option) && "isSubmenu" in option;
};
const travelDropDownChildren = (children) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m;
  const options = [];
  for (const child of children) {
    if (!child)
      continue;
    if (vueUtils.isNamedComponent(child, "Dgroup")) {
      const props = vueUtils.resolveProps(child);
      let slots;
      const _options = [];
      if (vueUtils.isSlotsChildren(child, child.children)) {
        slots = child.children;
        if (child.children.default) {
          _options.push(...travelDropDownChildren(child.children.default()));
        }
      } else if (vueUtils.isArrayChildren(child, child.children)) {
        _options.push(...travelDropDownChildren(child.children));
      }
      options.push({
        _props: omit.omit(props, ["title"]),
        _slots: slots,
        isGroup: true,
        title: props.title,
        options: _options
      });
    } else if (vueUtils.isNamedComponent(child, "Doption")) {
      const props = vueUtils.resolveProps(child);
      let slots;
      if (vueUtils.isSlotsChildren(child, child.children)) {
        slots = child.children;
      }
      options.push({
        _props: props,
        _slots: slots,
        value: (_d = props.value) != null ? _d : vueUtils.getChildrenString((_c = (_b = (_a = child.children).default) == null ? void 0 : _b.call(_a)) != null ? _c : []),
        disabled: props.disabled
      });
    } else if (vueUtils.isNamedComponent(child, "Dsubmenu")) {
      const props = vueUtils.resolveProps(child);
      options.push({
        _props: omit.omit(props, ["trigger", "position", "triggerProps"]),
        isSubmenu: true,
        value: (_h = props.value) != null ? _h : vueUtils.getChildrenString((_g = (_f = (_e = child.children).default) == null ? void 0 : _f.call(_e)) != null ? _g : []),
        disabled: props.disabled,
        footer: child.children.footer,
        render: child.children.default,
        trigger: props.trigger,
        position: props.position,
        children: travelDropDownChildren((_k = (_j = (_i = child.children).content) == null ? void 0 : _j.call(_i)) != null ? _k : [])
      });
    } else if (vueUtils.isArrayChildren(child, child.children)) {
      options.push(...travelDropDownChildren(child.children));
    } else if (vueUtils.isSlotsChildren(child, child.children)) {
      const _children = (_m = (_l = child.children).default) == null ? void 0 : _m.call(_l);
      if (_children) {
        options.push(...travelDropDownChildren(_children));
      }
    } else if (is.isArray(child)) {
      options.push(...travelDropDownChildren(child));
    }
  }
  return options;
};
exports.isGroup = isGroup;
exports.isSubmenu = isSubmenu;
exports.travelDropDownChildren = travelDropDownChildren;
