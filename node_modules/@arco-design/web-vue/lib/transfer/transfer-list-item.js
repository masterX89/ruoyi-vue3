"use strict";
var vue = require("vue");
var globalConfig = require("../_utils/global-config.js");
var iconHover = require("../_components/icon-hover.js");
var index = require("../checkbox/index.js");
var index$1 = require("../icon/icon-close/index.js");
var context = require("./context.js");
var TransferListItem = vue.defineComponent({
  name: "TransferListItem",
  props: {
    type: {
      type: String
    },
    data: {
      type: Object,
      required: true
    },
    allowClear: {
      type: Boolean
    },
    disabled: {
      type: Boolean
    },
    onSelectChange: {
      type: Function
    },
    draggable: {
      type: Boolean
    },
    simple: Boolean
  },
  setup(props) {
    const prefixCls = globalConfig.getPrefixCls("transfer-list-item");
    const transferCtx = vue.inject(context.transferInjectionKey, void 0);
    const handleClick = () => {
      if (!props.simple) {
        return;
      }
      transferCtx == null ? void 0 : transferCtx.moveTo([props.data.value], props.type === "target" ? "source" : "target");
    };
    const cls = vue.computed(() => [prefixCls, {
      [`${prefixCls}-disabled`]: props.disabled,
      [`${prefixCls}-draggable`]: props.draggable
    }]);
    const handleRemove = () => {
      transferCtx == null ? void 0 : transferCtx.moveTo([props.data.value], "source");
    };
    return () => {
      var _a, _b;
      return vue.createVNode("div", {
        "class": cls.value,
        "onClick": handleClick
      }, [props.allowClear || props.simple ? vue.createVNode("span", {
        "class": `${prefixCls}-content`
      }, [(_b = (_a = transferCtx == null ? void 0 : transferCtx.itemSlot) == null ? void 0 : _a.call(transferCtx, {
        label: props.data.label
      })) != null ? _b : props.data.label]) : vue.createVNode(index["default"], {
        "class": `${prefixCls}-content`,
        "modelValue": transferCtx == null ? void 0 : transferCtx.selected,
        "onChange": props.onSelectChange,
        "value": props.data.value,
        "uninjectGroupContext": true
      }, {
        default: () => {
          var _a2, _b2;
          return [(_b2 = (_a2 = transferCtx == null ? void 0 : transferCtx.itemSlot) == null ? void 0 : _a2.call(transferCtx, {
            label: props.data.label
          })) != null ? _b2 : props.data.label];
        }
      }), props.allowClear && !props.disabled && vue.createVNode(iconHover, {
        "class": `${prefixCls}-remove-btn`,
        "onClick": handleRemove
      }, {
        default: () => [vue.createVNode(index$1, null, null)]
      })]);
    };
  }
});
module.exports = TransferListItem;
