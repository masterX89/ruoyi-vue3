"use strict";
var vue = require("vue");
var globalConfig = require("../_utils/global-config.js");
var context = require("./context.js");
var iconHover = require("../_components/icon-hover.js");
var index = require("../icon/icon-caret-right/index.js");
var index$1 = require("../icon/icon-caret-left/index.js");
var is = require("../_utils/is.js");
var pluginVue_exportHelper = require("../_virtual/plugin-vue_export-helper");
const _sfc_main = vue.defineComponent({
  name: "CollapseItem",
  components: { IconHover: iconHover, IconCaretRight: index, IconCaretLeft: index$1 },
  props: {
    key: String,
    header: String,
    disabled: {
      type: Boolean,
      default: false
    },
    showExpandIcon: {
      type: Boolean,
      default: true
    }
  },
  setup(props) {
    var _a;
    const prefixCls = globalConfig.getPrefixCls("collapse-item");
    const component = vue.getCurrentInstance();
    const collapseCtx = vue.inject(context.collapseKey, void 0);
    const key = component && is.isNumber(component == null ? void 0 : component.vnode.key) ? component.vnode.key : String((_a = component == null ? void 0 : component.vnode.key) != null ? _a : "");
    const isActive = vue.computed(() => collapseCtx == null ? void 0 : collapseCtx.activeKeys.includes(key));
    const expandIconPosition = vue.computed(() => {
      var _a2;
      return (_a2 = collapseCtx == null ? void 0 : collapseCtx.expandIconPosition) != null ? _a2 : "left";
    });
    const handleClick = (e) => {
      if (!props.disabled) {
        collapseCtx == null ? void 0 : collapseCtx.handleClick(key, e);
      }
    };
    const transitionEvents = {
      onAppear: (el) => {
        el.style.height = "auto";
      },
      onBeforeEnter: (el) => {
        el.style.display = "block";
      },
      onEnter: (el) => {
        el.style.height = `${el.scrollHeight}px`;
      },
      onAfterEnter: (el) => {
        el.style.height = "auto";
      },
      onBeforeLeave: (el) => {
        el.style.display = "block";
        el.style.height = `${el.scrollHeight}px`;
      },
      onLeave: (el) => {
        el.style.height = "0";
      },
      onAfterLeave: (el) => {
        el.style.display = "none";
      }
    };
    const cls = vue.computed(() => [
      prefixCls,
      {
        [`${prefixCls}-active`]: isActive.value
      }
    ]);
    const headerCls = vue.computed(() => [
      `${prefixCls}-header`,
      `${prefixCls}-header-${collapseCtx == null ? void 0 : collapseCtx.expandIconPosition}`,
      {
        [`${prefixCls}-header-disabled`]: props.disabled
      }
    ]);
    const iconCls = vue.computed(() => [
      {
        [`${prefixCls}-icon-right`]: (collapseCtx == null ? void 0 : collapseCtx.expandIconPosition) === "right"
      }
    ]);
    const contentCls = vue.computed(() => [
      `${prefixCls}-content`,
      {
        [`${prefixCls}-content-expend`]: isActive.value
      }
    ]);
    return {
      prefixCls,
      cls,
      headerCls,
      iconCls,
      contentCls,
      isActive,
      expandIconPosition,
      transitionEvents,
      handleClick
    };
  },
  render: void 0
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_icon_caret_left = vue.resolveComponent("icon-caret-left");
  const _component_icon_caret_right = vue.resolveComponent("icon-caret-right");
  const _component_icon_hover = vue.resolveComponent("icon-hover");
  return vue.openBlock(), vue.createElementBlock("div", {
    class: vue.normalizeClass(_ctx.cls)
  }, [
    vue.createElementVNode("div", {
      class: vue.normalizeClass(_ctx.headerCls),
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))
    }, [
      vue.createVNode(_component_icon_hover, {
        prefix: _ctx.prefixCls,
        class: vue.normalizeClass(_ctx.iconCls),
        disabled: _ctx.disabled
      }, {
        default: vue.withCtx(() => [
          _ctx.expandIconPosition === "right" ? (vue.openBlock(), vue.createBlock(_component_icon_caret_left, {
            key: 0,
            class: vue.normalizeClass(`${_ctx.prefixCls}-expand-icon`)
          }, null, 8, ["class"])) : (vue.openBlock(), vue.createBlock(_component_icon_caret_right, {
            key: 1,
            class: vue.normalizeClass(`${_ctx.prefixCls}-expand-icon`)
          }, null, 8, ["class"]))
        ]),
        _: 1
      }, 8, ["prefix", "class", "disabled"]),
      vue.createElementVNode("div", {
        class: vue.normalizeClass(`${_ctx.prefixCls}-header-title`)
      }, [
        vue.renderSlot(_ctx.$slots, "header", {}, () => [
          vue.createTextVNode(vue.toDisplayString(_ctx.header), 1)
        ])
      ], 2),
      _ctx.$slots.extra ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 0,
        class: vue.normalizeClass(`${_ctx.prefixCls}-header-extra`)
      }, [
        vue.renderSlot(_ctx.$slots, "extra")
      ], 2)) : vue.createCommentVNode("v-if", true)
    ], 2),
    vue.createVNode(vue.Transition, vue.mergeProps({ name: "collapse-slider" }, _ctx.transitionEvents, { appear: "" }), {
      default: vue.withCtx(() => [
        _ctx.isActive ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 0,
          class: vue.normalizeClass(_ctx.contentCls)
        }, [
          vue.createElementVNode("div", {
            ref: "contentBoxRef",
            class: vue.normalizeClass(`${_ctx.prefixCls}-content-box`)
          }, [
            vue.renderSlot(_ctx.$slots, "default")
          ], 2)
        ], 2)) : vue.createCommentVNode("v-if", true)
      ]),
      _: 3
    }, 16)
  ], 2);
}
var CollapseItem = /* @__PURE__ */ pluginVue_exportHelper(_sfc_main, [["render", _sfc_render]]);
module.exports = CollapseItem;
