"use strict";
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
Object.defineProperty(exports, "__esModule", { value: true });
exports[Symbol.toStringTag] = "Module";
var vue = require("vue");
var baseGrid = require("./base-grid.js");
var baseGridItem = require("./base-grid-item.js");
var index = require("./utils/index.js");
function _isSlot(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
}
const Grid = (props, {
  slots
}) => {
  var _a, _b, _c;
  let _slot;
  const cols = (_a = props.cols) != null ? _a : 24;
  const collapsedRows = (_b = props.collapsedRows) != null ? _b : 1;
  const colGap = (_c = props.colGap) != null ? _c : 0;
  const itemList = slots.default ? index.getGridItemChildren(slots.default()) : [];
  const itemData = itemList.map((node) => __spreadProps(__spreadValues({}, index.resolveItemData(cols, node.props || {})), {
    node
  }));
  const {
    overflow,
    displayItemData
  } = index.setItemVisible({
    cols,
    collapsed: props.collapsed,
    collapsedRows,
    itemData
  });
  return vue.createVNode(baseGrid, vue.mergeProps(props, {
    "cols": cols,
    "collapsedRows": collapsedRows
  }), _isSlot(_slot = displayItemData.map((item) => {
    const {
      span,
      offset,
      node,
      visible
    } = item;
    const {
      scopeId,
      children,
      props: props2,
      key
    } = node;
    const isVisible = visible !== false && span !== 0;
    return vue.createVNode(__spreadProps(__spreadValues({}, baseGridItem), {
      __scopeId: scopeId
    }), __spreadProps(__spreadValues({}, props2 || {}), {
      span,
      offset,
      key: key || void 0,
      style: isVisible ? {} : {
        display: "none"
      },
      colGap,
      cols,
      overflow
    }), children);
  })) ? _slot : {
    default: () => [_slot]
  });
};
Grid.displayName = "Grid";
exports.Grid = Grid;
