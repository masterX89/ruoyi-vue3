"use strict";
var vue = require("vue");
var globalConfig = require("../_utils/global-config.js");
var BaseGridItem = vue.defineComponent({
  name: "BaseGridItem",
  props: {
    span: {
      type: Number,
      default: 1
    },
    offset: {
      type: Number,
      default: 0
    },
    suffix: {
      type: Boolean,
      default: false
    },
    overflow: {
      type: Boolean,
      default: false
    },
    colGap: {
      type: Number,
      default: 0
    },
    cols: {
      type: Number,
      default: 24
    }
  },
  setup(props, {
    slots
  }) {
    const {
      span,
      offset,
      suffix,
      overflow,
      colGap,
      cols
    } = vue.toRefs(props);
    const prefixCls = globalConfig.getPrefixCls("grid-item");
    const classNames = vue.computed(() => [prefixCls]);
    const offsetStyle = vue.computed(() => {
      if (offset.value > 0) {
        const oneSpan = `(100% - ${colGap.value * (span.value - 1)}px) / ${span.value}`;
        return {
          "margin-left": `calc((${oneSpan} * ${offset.value}) + ${colGap.value * offset.value}px)`
        };
      }
      return {};
    });
    const columnStart = vue.computed(() => {
      if (suffix.value) {
        return `${cols.value - span.value + 1}`;
      }
      return `span ${span.value}`;
    });
    const style = vue.computed(() => [{
      "grid-column": `${columnStart.value} / span ${span.value}`
    }, offsetStyle.value, span.value === 0 ? {
      display: "none"
    } : {}]);
    return () => {
      var _a;
      return vue.createVNode("div", {
        "class": classNames.value,
        "style": style.value
      }, [(_a = slots.default) == null ? void 0 : _a.call(slots, {
        overflow: overflow.value
      })]);
    };
  }
});
module.exports = BaseGridItem;
