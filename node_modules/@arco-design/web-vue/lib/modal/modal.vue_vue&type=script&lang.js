"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var vue = require("vue");
var globalConfig = require("../_utils/global-config.js");
var iconHover = require("../_components/icon-hover.js");
var index = require("../button/index.js");
var index$1 = require("../icon/icon-close/index.js");
var index$2 = require("../icon/icon-info-circle-fill/index.js");
var index$3 = require("../icon/icon-check-circle-fill/index.js");
var index$4 = require("../icon/icon-exclamation-circle-fill/index.js");
var index$5 = require("../icon/icon-close-circle-fill/index.js");
var index$6 = require("../locale/index.js");
var useOverflow = require("../_hooks/use-overflow.js");
var dom = require("../_utils/dom.js");
var usePopupManager = require("../_hooks/use-popup-manager.js");
var is = require("../_utils/is.js");
var keyboard = require("../_utils/keyboard.js");
var _sfc_main = vue.defineComponent({
  name: "Modal",
  components: {
    ArcoButton: index["default"],
    IconHover: iconHover,
    IconClose: index$1,
    IconInfoCircleFill: index$2,
    IconCheckCircleFill: index$3,
    IconExclamationCircleFill: index$4,
    IconCloseCircleFill: index$5
  },
  inheritAttrs: false,
  props: {
    visible: {
      type: Boolean,
      default: void 0
    },
    defaultVisible: {
      type: Boolean,
      default: false
    },
    width: {
      type: [Number, String]
    },
    top: {
      type: [Number, String]
    },
    mask: {
      type: Boolean,
      default: true
    },
    title: {
      type: String
    },
    alignCenter: {
      type: Boolean,
      default: true
    },
    unmountOnClose: Boolean,
    maskClosable: {
      type: Boolean,
      default: true
    },
    hideCancel: {
      type: Boolean,
      default: false
    },
    simple: {
      type: Boolean,
      default: (props) => {
        return props.notice;
      }
    },
    closable: {
      type: Boolean,
      default: true
    },
    okText: String,
    cancelText: String,
    okLoading: {
      type: Boolean,
      default: false
    },
    okButtonProps: {
      type: Object
    },
    cancelButtonProps: {
      type: Object
    },
    footer: {
      type: Boolean,
      default: true
    },
    renderToBody: {
      type: Boolean,
      default: true
    },
    popupContainer: {
      type: [String, Object],
      default: "body"
    },
    maskStyle: {
      type: Object
    },
    modalClass: {
      type: [String, Array]
    },
    modalStyle: {
      type: Object
    },
    onBeforeOk: {
      type: [Function, Array]
    },
    onBeforeCancel: {
      type: [Function, Array]
    },
    escToClose: {
      type: Boolean,
      default: true
    },
    messageType: {
      type: String
    }
  },
  emits: [
    "update:visible",
    "ok",
    "cancel",
    "open",
    "close"
  ],
  setup(props, {
    emit
  }) {
    const prefixCls = globalConfig.getPrefixCls("modal");
    const {
      t
    } = index$6.useI18n();
    const containerRef = vue.ref();
    const _visible = vue.ref(props.defaultVisible);
    const computedVisible = vue.computed(() => {
      var _a;
      return (_a = props.visible) != null ? _a : _visible.value;
    });
    const _okLoading = vue.ref(false);
    const mergedOkLoading = vue.computed(() => props.okLoading || _okLoading.value);
    const mounted = vue.ref(computedVisible.value);
    const okDisplayText = vue.computed(() => props.okText || t("modal.okText"));
    const cancelDisplayText = vue.computed(() => props.cancelText || t("modal.cancelText"));
    const {
      zIndex
    } = usePopupManager({
      visible: computedVisible
    });
    let globalKeyDownListener = false;
    const handleGlobalKeyDown = (ev) => {
      if (props.escToClose && ev.code === keyboard.CODE.ESC) {
        handleCancel();
      }
    };
    const addGlobalKeyDownListener = () => {
      if (props.escToClose && !globalKeyDownListener) {
        globalKeyDownListener = true;
        dom.on(document.documentElement, "keydown", handleGlobalKeyDown);
      }
    };
    const removeGlobalKeyDownListener = () => {
      globalKeyDownListener = false;
      dom.off(document.documentElement, "keydown", handleGlobalKeyDown);
    };
    let promiseNumber = 0;
    const close = () => {
      promiseNumber++;
      if (_okLoading.value) {
        _okLoading.value = false;
      }
      _visible.value = false;
      emit("update:visible", false);
    };
    const handleOk = () => {
      const currentPromiseNumber = promiseNumber;
      const promise = new Promise((resolve) => {
        if (is.isFunction(props.onBeforeOk)) {
          const result = props.onBeforeOk(resolve);
          if (is.isBoolean(result)) {
            resolve(result);
          } else {
            _okLoading.value = true;
          }
        } else {
          resolve();
        }
      });
      promise.then((closed = true) => {
        if (currentPromiseNumber === promiseNumber) {
          _okLoading.value = false;
          if (closed) {
            emit("ok");
            close();
          }
        }
      });
    };
    const handleCancel = () => {
      var _a;
      let result = true;
      if (is.isFunction(props.onBeforeCancel)) {
        result = (_a = props.onBeforeCancel()) != null ? _a : false;
      }
      if (result) {
        emit("cancel");
        close();
      }
    };
    const handleMask = () => {
      if (props.mask && props.maskClosable) {
        handleCancel();
      }
    };
    const handleOpen = () => {
      if (computedVisible.value) {
        emit("open");
      }
    };
    const handleClose = () => {
      if (!computedVisible.value) {
        mounted.value = false;
        emit("close");
      }
    };
    const {
      setOverflowHidden,
      resetOverflow
    } = useOverflow.useOverflow(containerRef);
    vue.onMounted(() => {
      containerRef.value = dom.getElement(props.popupContainer);
      if (computedVisible.value) {
        setOverflowHidden();
        if (props.escToClose) {
          addGlobalKeyDownListener();
        }
      }
    });
    vue.onBeforeUnmount(() => {
      removeGlobalKeyDownListener();
    });
    vue.watch(computedVisible, (value) => {
      if (_visible.value !== value) {
        _visible.value = value;
      }
      if (value) {
        mounted.value = true;
        setOverflowHidden();
        addGlobalKeyDownListener();
      } else {
        resetOverflow();
        removeGlobalKeyDownListener();
      }
    });
    const mergedModalStyle = vue.computed(() => {
      var _a;
      const style = __spreadValues({}, (_a = props.modalStyle) != null ? _a : {});
      if (props.width) {
        style.width = is.isNumber(props.width) ? `${props.width}px` : props.width;
      }
      if (!props.alignCenter && props.top) {
        style.top = is.isNumber(props.top) ? `${props.top}px` : props.top;
      }
      return style;
    });
    return {
      prefixCls,
      mounted,
      computedVisible,
      containerRef,
      mergedModalStyle,
      okDisplayText,
      cancelDisplayText,
      zIndex,
      handleOk,
      handleCancel,
      handleMask,
      handleOpen,
      handleClose,
      mergedOkLoading
    };
  }
});
module.exports = _sfc_main;
