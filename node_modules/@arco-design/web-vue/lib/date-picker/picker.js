"use strict";
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var vue = require("vue");
var date = require("../_utils/date.js");
var globalConfig = require("../_utils/global-config.js");
var useState = require("../_hooks/use-state.js");
var usePickerState = require("./hooks/use-picker-state.js");
var input = require("../_components/picker/input.js");
var index = require("../trigger/index.js");
var index$2 = require("../time-picker/utils/index.js");
var pickerPanel = require("./picker-panel.js");
var pick = require("../_utils/pick.js");
var useFormat = require("./hooks/use-format.js");
var is = require("../_utils/is.js");
var index$1 = require("../icon/icon-calendar/index.js");
var useIsDisabledDate = require("./hooks/use-is-disabled-date.js");
var useMergeState = require("../_hooks/use-merge-state.js");
var useProvideDatepickerTransform = require("./hooks/use-provide-datepicker-transform.js");
var useHeaderValue = require("./hooks/use-header-value.js");
var omit = require("../_utils/omit.js");
var useTimePickerValue = require("./hooks/use-time-picker-value.js");
var index$3 = require("./utils/index.js");
var context = require("../config-provider/context.js");
var pluginVue_exportHelper = require("../_virtual/plugin-vue_export-helper");
const _sfc_main = vue.defineComponent({
  name: "Picker",
  components: {
    DateInput: input,
    Trigger: index,
    PickerPanel: pickerPanel,
    IconCalendar: index$1
  },
  inheritAttrs: false,
  props: {
    locale: {
      type: Object
    },
    hideTrigger: {
      type: Boolean
    },
    allowClear: {
      type: Boolean,
      default: true
    },
    readonly: {
      type: Boolean
    },
    error: {
      type: Boolean
    },
    size: {
      type: String,
      default: () => {
        var _a, _b;
        return (_b = (_a = vue.inject(context.configProviderInjectionKey, void 0)) == null ? void 0 : _a.size) != null ? _b : "medium";
      }
    },
    shortcuts: {
      type: Array,
      default: () => []
    },
    shortcutsPosition: {
      type: String,
      default: "bottom"
    },
    position: {
      type: String,
      default: "bl"
    },
    popupVisible: {
      type: Boolean,
      default: void 0
    },
    defaultPopupVisible: {
      type: Boolean,
      default: false
    },
    triggerProps: {
      type: Object
    },
    unmountOnClose: {
      type: Boolean
    },
    placeholder: {
      type: String
    },
    disabled: {
      type: Boolean
    },
    disabledDate: {
      type: Function
    },
    disabledTime: {
      type: Function
    },
    pickerValue: {
      type: [Object, String, Number]
    },
    defaultPickerValue: {
      type: [Object, String, Number]
    },
    popupContainer: {
      type: [String, Object]
    },
    mode: {
      type: String,
      default: "date"
    },
    format: {
      type: [String, Function]
    },
    showTime: {
      type: Boolean
    },
    timePickerProps: {
      type: Object
    },
    showNowBtn: {
      type: Boolean,
      defaut: true
    },
    dayStartOfWeek: {
      type: Number,
      default: 0
    },
    modelValue: {
      type: [Object, String, Number]
    },
    defaultValue: {
      type: [Object, String, Number]
    },
    onChange: {
      type: [Function, Array]
    },
    onSelect: {
      type: [Function, Array]
    },
    onPopupVisibleChange: {
      type: [Function, Array]
    },
    onOk: {
      type: [Function, Array]
    },
    onClear: { type: [Function, Array] },
    onSelectShortcut: {
      type: [Function, Array]
    },
    onPickerValueChange: {
      type: [Function, Array]
    }
  },
  emits: {
    "change": (dateString, date2) => {
      return true;
    },
    "update:modelValue": (dateString) => {
      return true;
    },
    "select": (dateString, date2) => {
      return true;
    },
    "popup-visible-change": (popupVisible) => {
      return true;
    },
    "update:popupVisible": (popupVisible) => {
      return true;
    },
    "ok": (dateString, date2) => {
      return true;
    },
    "clear": () => {
      return true;
    },
    "select-shortcut": (shortcut) => {
      return true;
    },
    "picker-value-change": (dateString, date2) => {
      return true;
    },
    "update:pickerValue": (dateString, date2) => {
      return true;
    }
  },
  setup(props, { emit, slots }) {
    const {
      mode,
      modelValue,
      defaultValue,
      format,
      placeholder,
      popupVisible,
      defaultPopupVisible,
      disabled,
      showTime,
      timePickerProps,
      disabledDate,
      disabledTime,
      readonly,
      locale,
      pickerValue,
      defaultPickerValue
    } = vue.toRefs(props);
    const datePickerT = useProvideDatepickerTransform(vue.reactive({
      locale
    }));
    const prefixCls = globalConfig.getPrefixCls("picker");
    const refInput = vue.ref();
    const computedPlaceholder = vue.computed(() => (placeholder == null ? void 0 : placeholder.value) || {
      date: datePickerT("datePicker.placeholder.date"),
      month: datePickerT("datePicker.placeholder.month"),
      year: datePickerT("datePicker.placeholder.year"),
      week: datePickerT("datePicker.placeholder.week"),
      quarter: datePickerT("datePicker.placeholder.quarter")
    }[mode.value] || datePickerT("datePicker.placeholder.date"));
    const computedFormat = useFormat["default"](vue.reactive({ format, mode, showTime }));
    const inputFormat = vue.computed(() => format && is.isFunction(format.value) ? (value) => {
      var _a;
      return (_a = format.value) == null ? void 0 : _a.call(format, date.getDateValue(value));
    } : computedFormat.value);
    const isDisabledDate = useIsDisabledDate(vue.reactive({
      mode,
      disabledDate,
      disabledTime,
      showTime
    }));
    const needConfirm = vue.computed(() => showTime.value);
    const confirmBtnDisabled = vue.computed(() => needConfirm.value && (!panelValue.value || isDisabledDate(panelValue.value)));
    const { value: selectedValue, setValue: setSelectedValue } = usePickerState(vue.reactive({ modelValue, defaultValue, format: computedFormat }));
    const [processValue, setProcessValue] = useState();
    const panelValue = vue.computed(() => processValue.value || selectedValue.value);
    const [inputValue, setInputValue] = useState();
    const [panelVisible, setLocalPanelVisible] = useMergeState(defaultPopupVisible.value, vue.reactive({ value: popupVisible }));
    const setPanelVisible = (newVisible) => {
      if (panelVisible.value !== newVisible) {
        setLocalPanelVisible(newVisible);
        emit("popup-visible-change", newVisible);
        emit("update:popupVisible", newVisible);
      }
    };
    const [headerValue, , headerOperations, resetHeaderValue] = useHeaderValue(vue.reactive({
      mode,
      value: pickerValue,
      defaultValue: defaultPickerValue,
      selectedValue: panelValue,
      format: computedFormat,
      onChange: (newVal) => {
        const formattedValue = index$2.getFormattedValue(newVal, computedFormat.value);
        const dateValue = date.getDateValue(newVal);
        emit("picker-value-change", formattedValue, dateValue);
        emit("update:pickerValue", formattedValue, dateValue);
      }
    }));
    const [timePickerValue, , resetTimePickerValue] = useTimePickerValue(vue.reactive({
      timePickerProps,
      selectedValue: panelValue
    }));
    const inputEditable = vue.computed(() => !readonly.value && !is.isFunction(inputFormat.value));
    vue.watch(panelVisible, (newVisible) => {
      setProcessValue(void 0);
      if (newVisible) {
        resetHeaderValue();
        resetTimePickerValue();
      }
      if (!newVisible) {
        setInputValue(void 0);
      }
    });
    function emitChange(value, emitOk) {
      const formattedValue = index$2.getFormattedValue(value, computedFormat.value);
      const dateValue = date.getDateValue(value);
      if (date.isValueChange(value, selectedValue.value)) {
        emit("update:modelValue", formattedValue);
        emit("change", formattedValue, dateValue);
      }
      if (emitOk) {
        emit("ok", formattedValue, dateValue);
      }
    }
    function confirm(value, showPanel, emitOk) {
      if (isDisabledDate(value)) {
        return;
      }
      emitChange(value, emitOk);
      setSelectedValue(value);
      setProcessValue(void 0);
      setInputValue(void 0);
      setPanelVisible(showPanel);
    }
    function select(value, emitSelect) {
      setProcessValue(value);
      setInputValue(void 0);
      if (emitSelect) {
        const formattedValue = index$2.getFormattedValue(value, computedFormat.value);
        const dateValue = date.getDateValue(value);
        emit("select", formattedValue, dateValue);
      }
    }
    function focusInput(index2) {
      refInput.value && refInput.value.focus && refInput.value.focus(index2);
    }
    function onPanelVisibleChange(visible) {
      if (disabled.value)
        return;
      setPanelVisible(visible);
    }
    function onInputClear() {
      confirm(void 0, true);
      emit("clear");
    }
    function onInputChange(e) {
      setPanelVisible(true);
      const targetValue = e.target.value;
      setInputValue(targetValue);
      if (!index$2.isValidInputValue(targetValue, computedFormat.value))
        return;
      const newValue = date.dayjs(targetValue, computedFormat.value);
      if (isDisabledDate(newValue))
        return;
      if (needConfirm.value) {
        select(newValue);
      } else {
        confirm(newValue, true);
      }
    }
    function onInputPressEnter() {
      confirm(panelValue.value, false);
    }
    function onPanelSelect(value) {
      if (needConfirm.value) {
        select(value, true);
      } else {
        confirm(value, false);
      }
    }
    function onPanelCellClick(value) {
      const newValue = index$3.mergeValueWithTime(date.getNow(), value, timePickerValue.value);
      onPanelSelect(newValue);
    }
    function onTimePickerSelect(time) {
      const newValue = index$3.mergeValueWithTime(date.getNow(), panelValue.value, time);
      onPanelSelect(newValue);
    }
    function onPanelConfirm() {
      confirm(panelValue.value, false, true);
    }
    function onPanelClick() {
      focusInput();
    }
    function onPanelShortcutMouseEnter(value) {
      select(value);
    }
    function onPanelShortcutMouseLeave() {
      select(selectedValue.value);
    }
    function onPanelShortcutClick(value, shortcut) {
      emit("select-shortcut", shortcut);
      confirm(value, false);
    }
    const computedTimePickerProps = vue.computed(() => __spreadProps(__spreadValues({
      format: computedFormat.value
    }, omit.omit((timePickerProps == null ? void 0 : timePickerProps.value) || {}, ["defaultValue"])), {
      visible: panelVisible.value
    }));
    const panelProps = vue.computed(() => __spreadProps(__spreadValues({}, pick(props, [
      "mode",
      "shortcuts",
      "shortcutsPosition",
      "dayStartOfWeek",
      "disabledDate",
      "disabledTime",
      "showTime",
      "hideTrigger",
      "showNowBtn"
    ])), {
      prefixCls,
      format: computedFormat.value,
      value: panelValue.value,
      visible: panelVisible.value,
      showConfirmBtn: needConfirm.value,
      confirmBtnDisabled: confirmBtnDisabled.value,
      timePickerProps: computedTimePickerProps.value,
      extra: slots.extra,
      dateRender: slots.cell,
      headerValue,
      headerIcons: {
        prev: slots["icon-prev"],
        prevDouble: slots["icon-prev-double"],
        next: slots["icon-next"],
        nextDouble: slots["icon-next-double"]
      },
      headerOperations: headerOperations.value,
      timePickerValue: timePickerValue.value,
      onCellClick: onPanelCellClick,
      onTimePickerSelect,
      onConfirm: onPanelConfirm,
      onShortcutClick: onPanelShortcutClick,
      onShortcutMouseEnter: onPanelShortcutMouseEnter,
      onShortcutMouseLeave: onPanelShortcutMouseLeave,
      onTodayBtnClick: onPanelSelect
    }));
    return {
      prefixCls,
      refInput,
      panelProps,
      panelValue,
      inputValue,
      selectedValue,
      inputFormat,
      computedFormat,
      computedPlaceholder,
      panelVisible,
      inputEditable,
      needConfirm,
      onPanelVisibleChange,
      onInputClear,
      onInputChange,
      onInputPressEnter,
      onPanelClick
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_IconCalendar = vue.resolveComponent("IconCalendar");
  const _component_DateInput = vue.resolveComponent("DateInput");
  const _component_PickerPanel = vue.resolveComponent("PickerPanel");
  const _component_Trigger = vue.resolveComponent("Trigger");
  return !_ctx.hideTrigger ? (vue.openBlock(), vue.createBlock(_component_Trigger, vue.mergeProps({
    key: 0,
    trigger: "click",
    "click-to-close": false,
    "popup-offset": 4
  }, _ctx.triggerProps, {
    position: _ctx.position,
    disabled: _ctx.disabled,
    "prevent-focus": true,
    "popup-visible": _ctx.panelVisible,
    "unmount-on-close": _ctx.unmountOnClose,
    "popup-container": _ctx.popupContainer,
    onPopupVisibleChange: _ctx.onPanelVisibleChange
  }), {
    content: vue.withCtx(() => [
      vue.createVNode(_component_PickerPanel, vue.mergeProps(_ctx.panelProps, { onClick: _ctx.onPanelClick }), null, 16, ["onClick"])
    ]),
    default: vue.withCtx(() => [
      vue.renderSlot(_ctx.$slots, "default", {}, () => [
        vue.createVNode(_component_DateInput, vue.mergeProps(_ctx.$attrs, {
          ref: "refInput",
          size: _ctx.size,
          focused: _ctx.panelVisible,
          visible: _ctx.panelVisible,
          error: _ctx.error,
          disabled: _ctx.disabled,
          readonly: !_ctx.inputEditable,
          "allow-clear": _ctx.allowClear,
          placeholder: _ctx.computedPlaceholder,
          "input-value": _ctx.inputValue,
          value: _ctx.needConfirm ? _ctx.panelValue : _ctx.selectedValue,
          format: _ctx.inputFormat,
          onClear: _ctx.onInputClear,
          onChange: _ctx.onInputChange,
          onPressEnter: _ctx.onInputPressEnter
        }), {
          "suffix-icon": vue.withCtx(() => [
            vue.renderSlot(_ctx.$slots, "suffix-icon", {}, () => [
              vue.createVNode(_component_IconCalendar)
            ])
          ]),
          _: 3
        }, 16, ["size", "focused", "visible", "error", "disabled", "readonly", "allow-clear", "placeholder", "input-value", "value", "format", "onClear", "onChange", "onPressEnter"])
      ])
    ]),
    _: 3
  }, 16, ["position", "disabled", "popup-visible", "unmount-on-close", "popup-container", "onPopupVisibleChange"])) : (vue.openBlock(), vue.createBlock(_component_PickerPanel, vue.normalizeProps(vue.mergeProps({ key: 1 }, __spreadValues(__spreadValues({}, _ctx.$attrs), _ctx.panelProps))), {
    default: vue.withCtx(() => [
      vue.renderSlot(_ctx.$slots, "extra"),
      vue.renderSlot(_ctx.$slots, "cell"),
      vue.renderSlot(_ctx.$slots, "icon-prev-double"),
      vue.renderSlot(_ctx.$slots, "icon-prev"),
      vue.renderSlot(_ctx.$slots, "icon-next"),
      vue.renderSlot(_ctx.$slots, "icon-next-double")
    ]),
    _: 3
  }, 16));
}
var Picker = /* @__PURE__ */ pluginVue_exportHelper(_sfc_main, [["render", _sfc_render]]);
module.exports = Picker;
