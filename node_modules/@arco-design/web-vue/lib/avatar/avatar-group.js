"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var vue = require("vue");
var globalConfig = require("../_utils/global-config.js");
var constants = require("./constants.js");
var avatar = require("./avatar.js");
var index = require("../popover/index.js");
var AvatarGroup = vue.defineComponent({
  name: "AvatarGroup",
  components: {
    Avatar: avatar,
    Popover: index
  },
  props: {
    shape: {
      type: String,
      default: "circle",
      validator: (value) => {
        return constants.SHAPES.includes(value);
      }
    },
    size: Number,
    autoFixFontSize: {
      type: Boolean,
      default: true
    },
    maxCount: {
      type: Number
    },
    zIndexAscend: {
      type: Boolean,
      default: false
    },
    maxStyle: {
      type: Object
    },
    maxPopoverTriggerProps: {
      type: Object
    }
  },
  setup(props, {
    slots
  }) {
    const prefixCls = globalConfig.getPrefixCls("avatar-group");
    return () => {
      var _a, _b;
      const children = (_b = (_a = slots.default) == null ? void 0 : _a.call(slots)) != null ? _b : [];
      const count = children.length;
      let avatarsToRender = children;
      if (props.maxCount != null && count > props.maxCount) {
        const avatarsInPopover = children.slice(props.maxCount);
        avatarsToRender = children.slice(0, props.maxCount);
        avatarsToRender.push(vue.createVNode(index, __spreadValues({}, props.maxPopoverTriggerProps), {
          content: () => vue.createVNode("div", null, [avatarsInPopover]),
          default: () => vue.createVNode(avatar, {
            key: "_arco_avatar_group_popup",
            class: `${prefixCls}-max-count-avatar`,
            style: props.maxStyle,
            size: props.size
          }, () => vue.createVNode("div", null, [vue.createTextVNode("+"), avatarsInPopover.length]))
        }));
      }
      return vue.createVNode("div", {
        "class": prefixCls
      }, [avatarsToRender.map((item, index2) => {
        const stackedStyle = {
          zIndex: props.zIndexAscend ? index2 + 1 : count - index2,
          marginLeft: props.size ? index2 !== 0 ? `-${props.size / 4}px` : "0px" : ""
        };
        item.props = vue.mergeProps({
          size: props.size,
          shape: props.shape,
          autoFixFontSize: props.autoFixFontSize,
          style: stackedStyle
        }, item.props || {});
        return item;
      })]);
    };
  }
});
module.exports = AvatarGroup;
