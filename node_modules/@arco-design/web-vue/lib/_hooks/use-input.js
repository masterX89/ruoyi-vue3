"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports[Symbol.toStringTag] = "Module";
var vue = require("vue");
var keycode = require("../_utils/keycode.js");
const useInput = (props, { emit, isInputValue = false }) => {
  const propName = isInputValue ? "inputValue" : "modelValue";
  const eventName = isInputValue ? "inputValueChange" : "input";
  const inputRef = vue.ref();
  const _value = vue.ref(props[isInputValue ? "defaultInputValue" : "defaultValue"]);
  const _focused = vue.ref(false);
  const isComposition = vue.ref(false);
  const compositionValue = vue.ref("");
  let initialValue;
  const computedValue = vue.computed(() => {
    var _a;
    return (_a = props[propName]) != null ? _a : _value.value;
  });
  const updateValue = (value) => {
    _value.value = value;
    emit(`update:${propName}`, value);
  };
  const handleInput = (ev) => {
    const { value } = ev.target;
    if (!isComposition.value) {
      emit(eventName, value, ev);
      updateValue(value);
    }
  };
  const handleChange = (ev) => {
    if (!isInputValue && computedValue.value !== initialValue) {
      initialValue = computedValue.value;
      emit("change", computedValue.value, ev);
    }
  };
  const handleComposition = (ev) => {
    var _a;
    const { value } = ev.target;
    if (ev.type === "compositionend") {
      isComposition.value = false;
      compositionValue.value = "";
      emit(eventName, value, ev);
      updateValue(value);
    } else {
      isComposition.value = true;
      compositionValue.value = computedValue.value + ((_a = ev.data) != null ? _a : "");
    }
  };
  const handleFocus = (ev) => {
    _focused.value = true;
    initialValue = computedValue.value;
    emit("focus", ev);
  };
  const handleBlur = (ev) => {
    _focused.value = false;
    handleChange(ev);
    emit("blur", ev);
  };
  const handleKeyDown = (ev) => {
    const keyCode = ev.key || ev.code;
    if (!isComposition.value && keyCode === keycode.Enter.key) {
      emit("pressEnter", ev);
      handleChange(ev);
    }
  };
  const handleMousedown = (ev) => {
    if (inputRef.value && ev.target !== inputRef.value) {
      ev.preventDefault();
      inputRef.value.focus();
    }
  };
  vue.watch(computedValue, (value) => {
    if (inputRef.value && value !== inputRef.value.value) {
      inputRef.value.value = value;
    }
  });
  return {
    inputRef,
    _value,
    _focused,
    isComposition,
    compositionValue,
    computedValue,
    handleInput,
    handleComposition,
    handleFocus,
    handleBlur,
    handleKeyDown,
    handleMousedown
  };
};
exports.useInput = useInput;
