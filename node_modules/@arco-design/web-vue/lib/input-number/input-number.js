"use strict";
var vue = require("vue");
var NP = require("number-precision");
var globalConfig = require("../_utils/global-config.js");
var is = require("../_utils/is.js");
var index$1 = require("../icon/icon-up/index.js");
var index$2 = require("../icon/icon-down/index.js");
var index$5 = require("../icon/icon-plus/index.js");
var index$4 = require("../icon/icon-minus/index.js");
var index$3 = require("../button/index.js");
var index = require("../input/index.js");
var context = require("../config-provider/context.js");
function _interopDefaultLegacy(e) {
  return e && typeof e === "object" && "default" in e ? e : { "default": e };
}
var NP__default = /* @__PURE__ */ _interopDefaultLegacy(NP);
const MODES = ["embed", "button"];
const SPEED = 150;
NP__default["default"].enableBoundaryChecking(false);
var _InputNumber = vue.defineComponent({
  name: "InputNumber",
  props: {
    modelValue: Number,
    defaultValue: Number,
    mode: {
      type: String,
      default: "embed",
      validator: (value) => MODES.includes(value)
    },
    precision: Number,
    step: {
      type: Number,
      default: 1
    },
    disabled: {
      type: Boolean,
      default: false
    },
    max: {
      type: Number,
      default: Infinity
    },
    min: {
      type: Number,
      default: -Infinity
    },
    formatter: {
      type: Function
    },
    parser: {
      type: Function
    },
    placeholder: String,
    hideButton: {
      type: Boolean,
      default: false
    },
    size: {
      type: String,
      default: () => {
        var _a, _b;
        return (_b = (_a = vue.inject(context.configProviderInjectionKey, void 0)) == null ? void 0 : _a.size) != null ? _b : "medium";
      }
    },
    onChange: {
      type: [Function, Array]
    },
    onFocus: {
      type: [Function, Array]
    },
    onBlur: {
      type: [Function, Array]
    }
  },
  emits: [
    "update:modelValue",
    "change",
    "focus",
    "blur"
  ],
  setup(props, {
    emit,
    slots
  }) {
    var _a;
    const prefixCls = globalConfig.getPrefixCls("input-number");
    const inputRef = vue.ref();
    const getStringValue = (number) => {
      var _a2, _b;
      return is.isUndefined(number) ? "" : (_b = (_a2 = props.formatter) == null ? void 0 : _a2.call(props, String(number))) != null ? _b : String(number);
    };
    const _value = vue.ref(getStringValue((_a = props.modelValue) != null ? _a : props.defaultValue));
    const valueNumber = vue.computed(() => {
      var _a2, _b;
      if (!_value.value) {
        return void 0;
      }
      const number = Number((_b = (_a2 = props.parser) == null ? void 0 : _a2.call(props, _value.value)) != null ? _b : _value.value);
      return Number.isNaN(number) ? void 0 : number;
    });
    const mergedPrecision = vue.computed(() => {
      if (is.isNumber(props.precision)) {
        const decimal = `${props.step}`.split(".")[1];
        const stepPrecision = decimal && decimal.length || 0;
        return Math.max(stepPrecision, props.precision);
      }
      return void 0;
    });
    const isMin = vue.ref(is.isNumber(valueNumber.value) && valueNumber.value <= props.min);
    const isMax = vue.ref(is.isNumber(valueNumber.value) && valueNumber.value >= props.max);
    let repeatTimer = 0;
    const clearRepeatTimer = () => {
      if (repeatTimer) {
        window.clearTimeout(repeatTimer);
        repeatTimer = 0;
      }
    };
    const getLegalValue = (value) => {
      if (is.isUndefined(value)) {
        return void 0;
      }
      if (is.isNumber(props.min) && value < props.min) {
        value = props.min;
      }
      if (is.isNumber(props.max) && value > props.max) {
        value = props.max;
      }
      return is.isNumber(mergedPrecision.value) ? NP__default["default"].round(value, mergedPrecision.value) : value;
    };
    const updateNumberStatus = (number) => {
      let _isMin = false;
      let _isMax = false;
      if (is.isNumber(number)) {
        if (number <= props.min) {
          _isMin = true;
        }
        if (number >= props.max) {
          _isMax = true;
        }
      }
      if (isMax.value !== _isMax) {
        isMax.value = _isMax;
      }
      if (isMin.value !== _isMin) {
        isMin.value = _isMin;
      }
    };
    const handleStepButton = (event, method, needRepeat = false) => {
      var _a2;
      event.preventDefault();
      (_a2 = inputRef.value) == null ? void 0 : _a2.focus();
      if (props.disabled || method === "plus" && isMax.value || method === "minus" && isMin.value) {
        return;
      }
      let nextValue;
      if (is.isNumber(valueNumber.value)) {
        nextValue = getLegalValue(NP__default["default"][method](valueNumber.value, props.step));
      } else {
        nextValue = props.min === -Infinity ? 0 : props.min;
      }
      _value.value = getStringValue(nextValue);
      updateNumberStatus(nextValue);
      emit("update:modelValue", nextValue);
      emit("change", nextValue, event);
      if (needRepeat) {
        repeatTimer = window.setTimeout(() => event.target.dispatchEvent(event), SPEED);
      }
    };
    const handleInput = (value, ev) => {
      var _a2, _b, _c, _d;
      value = value.trim().replace(/ã€‚/g, ".");
      value = (_b = (_a2 = props.parser) == null ? void 0 : _a2.call(props, value)) != null ? _b : value;
      if (is.isNumber(Number(value)) || /^(\.|-)$/.test(value)) {
        _value.value = (_d = (_c = props.formatter) == null ? void 0 : _c.call(props, value)) != null ? _d : value;
        updateNumberStatus(valueNumber.value);
      }
    };
    const handleFocus = (ev) => {
      emit("focus", ev);
    };
    const handleChange = (value, ev) => {
      const finalValue = getLegalValue(valueNumber.value);
      const stringValue = getStringValue(finalValue);
      if (finalValue !== valueNumber.value || _value.value !== stringValue) {
        _value.value = stringValue;
        updateNumberStatus(finalValue);
      }
      emit("update:modelValue", finalValue);
      emit("change", finalValue, ev);
    };
    const handleBlur = (ev) => {
      emit("blur", ev);
    };
    const handleClear = () => {
      _value.value = "";
      emit("update:modelValue", void 0);
      emit("change", void 0);
    };
    vue.watch(() => props.modelValue, (value) => {
      if (value !== valueNumber.value) {
        _value.value = getStringValue(value);
        updateNumberStatus(value);
      }
    });
    const renderSuffix = () => {
      var _a2;
      return vue.createVNode(vue.Fragment, null, [(_a2 = slots.suffix) == null ? void 0 : _a2.call(slots), vue.createVNode("div", {
        "class": `${prefixCls}-step`
      }, [vue.createVNode("button", {
        "class": [`${prefixCls}-step-button`, {
          [`${prefixCls}-step-button-disabled`]: props.disabled || isMax.value
        }],
        "type": "button",
        "disabled": props.disabled || isMax.value,
        "onMousedown": (e) => handleStepButton(e, "plus", true),
        "onMouseup": clearRepeatTimer,
        "onMouseleave": clearRepeatTimer
      }, [vue.createVNode(index$1, null, null)]), vue.createVNode("button", {
        "class": [`${prefixCls}-step-button`, {
          [`${prefixCls}-step-button-disabled`]: props.disabled || isMin.value
        }],
        "type": "button",
        "disabled": props.disabled || isMin.value,
        "onMousedown": (e) => handleStepButton(e, "minus", true),
        "onMouseup": clearRepeatTimer,
        "onMouseleave": clearRepeatTimer
      }, [vue.createVNode(index$2, null, null)])])]);
    };
    const cls = vue.computed(() => [prefixCls, `${prefixCls}-mode-${props.mode}`, `${prefixCls}-size-${props.size}`]);
    const renderPrependButton = () => {
      return vue.createVNode(index$3["default"], {
        "size": props.size,
        "class": `${prefixCls}-step-button`,
        "disabled": props.disabled || isMin.value,
        "onMousedown": (e) => handleStepButton(e, "minus", true),
        "onMouseup": clearRepeatTimer,
        "onMouseleave": clearRepeatTimer
      }, {
        icon: () => vue.createVNode(index$4, null, null)
      });
    };
    const renderAppendButton = () => {
      return vue.createVNode(index$3["default"], {
        "size": props.size,
        "class": `${prefixCls}-step-button`,
        "disabled": props.disabled || isMax.value,
        "onMousedown": (e) => handleStepButton(e, "plus", true),
        "onMouseup": clearRepeatTimer,
        "onMouseleave": clearRepeatTimer
      }, {
        icon: () => vue.createVNode(index$5, null, null)
      });
    };
    const render = () => vue.createVNode(index["default"], {
      "ref": inputRef,
      "class": cls.value,
      "type": "text",
      "size": props.size,
      "modelValue": _value.value,
      "placeholder": props.placeholder,
      "disabled": props.disabled,
      "onInput": handleInput,
      "onFocus": handleFocus,
      "onBlur": handleBlur,
      "onClear": handleClear,
      "onChange": handleChange
    }, {
      prepend: props.mode === "button" ? renderPrependButton : slots.prepend,
      prefix: slots.prefix,
      suffix: props.mode === "embed" && !props.hideButton ? renderSuffix : slots.suffix,
      append: props.mode === "button" ? renderAppendButton : slots.append
    });
    return {
      inputRef,
      render
    };
  },
  methods: {
    focus() {
      var _a;
      (_a = this.inputRef) == null ? void 0 : _a.focus();
    },
    blur() {
      var _a;
      (_a = this.inputRef) == null ? void 0 : _a.blur();
    }
  },
  render() {
    return this.render();
  }
});
module.exports = _InputNumber;
