"use strict";
var vue = require("vue");
var globalConfig = require("../_utils/global-config.js");
var iconHover = require("../_components/icon-hover.js");
var iconCheck = require("./icon-check.js");
var is = require("../_utils/is.js");
var context = require("./context.js");
var pluginVue_exportHelper = require("../_virtual/plugin-vue_export-helper");
const _sfc_main = vue.defineComponent({
  name: "Checkbox",
  components: {
    IconCheck: iconCheck,
    IconHover: iconHover
  },
  props: {
    modelValue: {
      type: [Boolean, Array],
      default: void 0
    },
    defaultChecked: {
      type: Boolean,
      default: false
    },
    value: {
      type: [String, Number]
    },
    disabled: {
      type: Boolean,
      default: false
    },
    indeterminate: {
      type: Boolean,
      default: false
    },
    uninjectGroupContext: {
      type: Boolean,
      default: false
    },
    onChange: {
      type: [Function, Array]
    }
  },
  emits: [
    "update:modelValue",
    "change"
  ],
  setup(props, { emit }) {
    const prefixCls = globalConfig.getPrefixCls("checkbox");
    const checkboxRef = vue.ref();
    const checkboxGroupCtx = !props.uninjectGroupContext ? vue.inject(context.checkboxGroupKey, void 0) : void 0;
    const isGroup = (checkboxGroupCtx == null ? void 0 : checkboxGroupCtx.name) === "ArcoCheckboxGroup";
    const mergedDisabled = vue.computed(() => (checkboxGroupCtx == null ? void 0 : checkboxGroupCtx.disabled) || props.disabled);
    const _checked = vue.ref(props.defaultChecked);
    const computedValue = vue.computed(() => {
      var _a;
      return isGroup ? checkboxGroupCtx == null ? void 0 : checkboxGroupCtx.computedValue : (_a = props.modelValue) != null ? _a : _checked.value;
    });
    const computedChecked = vue.computed(() => {
      var _a;
      return is.isArray(computedValue.value) ? computedValue.value.includes((_a = props.value) != null ? _a : true) : computedValue.value;
    });
    const handleChange = (e) => {
      var _a, _b;
      const { checked } = e.target;
      let newValue = checked;
      if (is.isArray(computedValue.value)) {
        const set = new Set(computedValue.value);
        if (checked) {
          set.add((_a = props.value) != null ? _a : true);
        } else {
          set.delete((_b = props.value) != null ? _b : true);
        }
        newValue = Array.from(set);
      }
      _checked.value = checked;
      if (isGroup && is.isArray(newValue)) {
        checkboxGroupCtx == null ? void 0 : checkboxGroupCtx.handleChange(newValue, e);
      } else {
        emit("update:modelValue", newValue);
        emit("change", newValue, e);
      }
      vue.nextTick(() => {
        if (checkboxRef.value && checkboxRef.value.checked !== computedChecked.value) {
          checkboxRef.value.checked = computedChecked.value;
        }
      });
    };
    const cls = vue.computed(() => [
      prefixCls,
      {
        [`${prefixCls}-checked`]: computedChecked.value,
        [`${prefixCls}-indeterminate`]: props.indeterminate,
        [`${prefixCls}-disabled`]: mergedDisabled.value
      }
    ]);
    const handleClick = (e) => {
      if (checkboxRef.value && e.target !== checkboxRef.value) {
        checkboxRef.value.click();
      }
    };
    vue.watch(computedValue, (value) => {
      var _a;
      let checked;
      if (is.isArray(value)) {
        checked = value.includes((_a = props.value) != null ? _a : true);
      } else {
        checked = value;
      }
      if (_checked.value !== checked) {
        _checked.value = checked;
      }
      if (checkboxRef.value && checkboxRef.value.checked !== checked) {
        checkboxRef.value.checked = checked;
      }
    });
    return {
      prefixCls,
      cls,
      checkboxRef,
      mergedDisabled,
      computedValue,
      computedChecked,
      handleClick,
      handleChange
    };
  }
});
const _hoisted_1 = ["checked", "value", "disabled"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_icon_check = vue.resolveComponent("icon-check");
  const _component_icon_hover = vue.resolveComponent("icon-hover");
  return vue.openBlock(), vue.createElementBlock("span", {
    class: vue.normalizeClass(_ctx.cls),
    onClick: _cache[2] || (_cache[2] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))
  }, [
    vue.createElementVNode("input", {
      ref: "checkboxRef",
      type: "checkbox",
      checked: _ctx.computedChecked,
      value: _ctx.value,
      class: vue.normalizeClass(`${_ctx.prefixCls}-target`),
      disabled: _ctx.mergedDisabled,
      onClick: _cache[0] || (_cache[0] = vue.withModifiers(() => {
      }, ["stop"])),
      onChange: _cache[1] || (_cache[1] = (...args) => _ctx.handleChange && _ctx.handleChange(...args))
    }, null, 42, _hoisted_1),
    vue.createVNode(_component_icon_hover, {
      class: vue.normalizeClass(`${_ctx.prefixCls}-icon-hover`),
      disabled: _ctx.mergedDisabled || _ctx.computedChecked
    }, {
      default: vue.withCtx(() => [
        vue.createElementVNode("div", {
          class: vue.normalizeClass(`${_ctx.prefixCls}-icon`)
        }, [
          _ctx.computedChecked ? (vue.openBlock(), vue.createBlock(_component_icon_check, {
            key: 0,
            class: vue.normalizeClass(`${_ctx.prefixCls}-icon-check`)
          }, null, 8, ["class"])) : vue.createCommentVNode("v-if", true)
        ], 2)
      ]),
      _: 1
    }, 8, ["class", "disabled"]),
    _ctx.$slots.default ? (vue.openBlock(), vue.createElementBlock("span", {
      key: 0,
      class: vue.normalizeClass(`${_ctx.prefixCls}-label`)
    }, [
      vue.renderSlot(_ctx.$slots, "default")
    ], 2)) : vue.createCommentVNode("v-if", true)
  ], 2);
}
var _Checkbox = /* @__PURE__ */ pluginVue_exportHelper(_sfc_main, [["render", _sfc_render]]);
module.exports = _Checkbox;
