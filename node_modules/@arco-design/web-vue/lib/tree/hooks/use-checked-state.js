"use strict";
var vue = require("vue");
var index = require("../utils/index.js");
function useCheckedState(props) {
  const {
    defaultCheckedKeys,
    checkedKeys: propCheckedKeys,
    key2TreeNode,
    checkStrictly
  } = vue.toRefs(props);
  const getStateByInitKeys = (initKeys) => {
    return index.getCheckedStateByInitKeys({
      initCheckedKeys: initKeys,
      key2TreeNode: key2TreeNode.value,
      checkStrictly: checkStrictly.value
    });
  };
  const isInitialized = vue.ref(false);
  const initLocalState = getStateByInitKeys(propCheckedKeys.value || (defaultCheckedKeys == null ? void 0 : defaultCheckedKeys.value) || []);
  const localCheckedKeys = vue.ref(initLocalState[0]);
  const localIndeterminateKeys = vue.ref(initLocalState[1]);
  const computedCheckedKeys = vue.ref();
  const computedIndeterminateKeys = vue.ref();
  vue.watchEffect(() => {
    if (propCheckedKeys.value) {
      [computedCheckedKeys.value, computedIndeterminateKeys.value] = getStateByInitKeys(propCheckedKeys.value);
    } else if (isInitialized.value) {
      computedCheckedKeys.value = void 0;
      computedIndeterminateKeys.value = void 0;
      localCheckedKeys.value = [];
      localIndeterminateKeys.value = [];
    }
    if (!isInitialized.value) {
      isInitialized.value = true;
    }
  });
  return {
    checkedKeys: vue.computed(() => computedCheckedKeys.value || localCheckedKeys.value),
    indeterminateKeys: vue.computed(() => computedIndeterminateKeys.value || localIndeterminateKeys.value),
    setCheckedState(newCheckedKeys, newIndeterminateKeys) {
      localCheckedKeys.value = newCheckedKeys;
      localIndeterminateKeys.value = newIndeterminateKeys;
    }
  };
}
module.exports = useCheckedState;
