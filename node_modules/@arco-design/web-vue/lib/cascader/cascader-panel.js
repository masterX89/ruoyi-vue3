"use strict";
var vue = require("vue");
var cascaderOption = require("./cascader-option.js");
var globalConfig = require("../_utils/global-config.js");
var index$1 = require("../empty/index.js");
var index = require("../spin/index.js");
function _isSlot(s) {
  return typeof s === "function" || Object.prototype.toString.call(s) === "[object Object]" && !vue.isVNode(s);
}
var CascaderPanel = vue.defineComponent({
  name: "CascaderPanel",
  props: {
    displayColumns: {
      type: Array,
      required: true
    },
    selectedPath: {
      type: Array,
      required: true
    },
    activeKey: String,
    computedKeys: {
      type: Array,
      required: true
    },
    totalLevel: {
      type: Number,
      required: true
    },
    expandTrigger: String,
    multiple: Boolean,
    checkStrictly: Boolean,
    loading: Boolean
  },
  setup(props) {
    const prefixCls = globalConfig.getPrefixCls("cascader");
    const renderEmpty = () => {
      return vue.createVNode(index$1, null, null);
    };
    const renderColumn = (column, level = 0) => {
      return vue.createVNode("div", {
        "class": `${prefixCls}-panel-column`,
        "key": `column-${level}`,
        "style": {
          zIndex: props.totalLevel - level
        }
      }, [column.length === 0 ? vue.createVNode("div", {
        "class": `${prefixCls}-list-empty`
      }, [renderEmpty()]) : vue.createVNode("ul", {
        "class": [`${prefixCls}-list`, {
          [`${prefixCls}-list-multiple`]: Boolean(props == null ? void 0 : props.multiple),
          [`${prefixCls}-list-strictly`]: Boolean(props == null ? void 0 : props.checkStrictly)
        }]
      }, [column.map((item) => {
        return vue.createVNode(cascaderOption, {
          "key": item.key,
          "option": item,
          "computedKeys": props.computedKeys,
          "active": props.selectedPath.includes(item.key) || item.key === props.activeKey,
          "multiple": props.multiple,
          "checkStrictly": props.checkStrictly,
          "expandTrigger": props.expandTrigger
        }, null);
      })])]);
    };
    const renderContent = () => {
      if (props.loading) {
        return vue.createVNode("div", {
          "class": [`${prefixCls}-panel-column`, `${prefixCls}-panel-column-loading`]
        }, [vue.createVNode(index, null, null)]);
      }
      if (props.displayColumns.length === 0) {
        return vue.createVNode("div", {
          "class": `${prefixCls}-panel-column`
        }, [vue.createVNode("div", {
          "class": `${prefixCls}-list-empty`
        }, [renderEmpty()])]);
      }
      return props.displayColumns.map((column, index2) => renderColumn(column, index2));
    };
    return () => {
      let _slot;
      return vue.createVNode(vue.TransitionGroup, {
        "tag": "div",
        "name": "cascader-slide",
        "class": `${prefixCls}-panel`
      }, _isSlot(_slot = renderContent()) ? _slot : {
        default: () => [_slot]
      });
    };
  }
});
module.exports = CascaderPanel;
