"use strict";
var vue = require("vue");
var index = require("../checkbox/index.js");
var index$1 = require("../radio/index.js");
var globalConfig = require("../_utils/global-config.js");
var index$3 = require("../icon/icon-right/index.js");
var index$2 = require("../icon/icon-loading/index.js");
var utils = require("./utils.js");
var is = require("../_utils/is.js");
var context = require("./context.js");
var CascaderOption = vue.defineComponent({
  name: "CascaderOption",
  props: {
    option: {
      type: Object,
      required: true
    },
    computedKeys: {
      type: Array,
      required: true
    },
    active: Boolean,
    multiple: Boolean,
    expandTrigger: String,
    checkStrictly: Boolean,
    searchOption: Boolean
  },
  setup(props) {
    const prefixCls = globalConfig.getPrefixCls("cascader-option");
    const cascaderCtx = vue.inject(context.cascaderInjectionKey, void 0);
    const isLoading = vue.ref(false);
    const events = {};
    const handlePathChange = (ev) => {
      if (is.isFunction(cascaderCtx == null ? void 0 : cascaderCtx.loadMore) && !props.option.isLeaf) {
        const {
          isLeaf,
          children,
          key
        } = props.option;
        if (!isLeaf && !children) {
          isLoading.value = true;
          new Promise((resolve) => {
            cascaderCtx == null ? void 0 : cascaderCtx.loadMore(props.option, resolve);
          }).then((children2) => {
            isLoading.value = false;
            if (children2) {
              cascaderCtx == null ? void 0 : cascaderCtx.addLazyLoadOptions(children2, key);
            }
          });
        }
      }
      cascaderCtx == null ? void 0 : cascaderCtx.setSelectedPath(props.option.key);
    };
    if (!props.option.disabled) {
      events.onMouseenter = [() => cascaderCtx == null ? void 0 : cascaderCtx.setActiveKey(props.option.key)];
      events.onMouseleave = () => cascaderCtx == null ? void 0 : cascaderCtx.setActiveKey();
      if (props.option.isLeaf && !props.multiple) {
        events.onClick = (ev) => {
          handlePathChange();
          cascaderCtx == null ? void 0 : cascaderCtx.onClickOption(props.option);
        };
      } else if (props.expandTrigger === "hover") {
        events.onMouseenter.push((ev) => handlePathChange());
      } else {
        events.onClick = (ev) => handlePathChange();
      }
    }
    const cls = vue.computed(() => [prefixCls, {
      [`${prefixCls}-active`]: props.active,
      [`${prefixCls}-disabled`]: props.option.disabled
    }]);
    const checkedStatus = vue.computed(() => {
      if (props.checkStrictly) {
        return {
          checked: props.computedKeys.includes(props.option.key),
          indeterminate: false
        };
      }
      return utils.getCheckedStatus(props.option, props.computedKeys);
    });
    const renderLabelContent = () => {
      if (is.isFunction(props.option.render)) {
        return props.option.render();
      }
      return props.option.label;
    };
    const renderIcon = () => {
      if (isLoading.value) {
        return vue.createVNode(index$2, null, null);
      }
      if (!props.searchOption && !props.option.isLeaf) {
        return vue.createVNode(index$3, null, null);
      }
      return null;
    };
    return () => vue.createVNode("li", vue.mergeProps({
      "class": cls.value
    }, events), [props.multiple && vue.createVNode(index["default"], {
      "modelValue": checkedStatus.value.checked,
      "indeterminate": checkedStatus.value.indeterminate,
      "disabled": props.option.disabled,
      "uninjectGroupContext": true,
      "onClick": (ev) => {
        ev.stopPropagation();
        handlePathChange();
        cascaderCtx == null ? void 0 : cascaderCtx.onClickOption(props.option, !checkedStatus.value.checked);
      }
    }, null), props.checkStrictly && !props.multiple && vue.createVNode(index$1["default"], {
      "modelValue": props.computedKeys.includes(props.option.key),
      "disabled": props.option.disabled,
      "uninjectGroupContext": true,
      "onClick": (ev) => {
        ev.stopPropagation();
        handlePathChange();
        cascaderCtx == null ? void 0 : cascaderCtx.onClickOption(props.option, true);
      }
    }, null), vue.createVNode("div", {
      "class": `${prefixCls}-label`
    }, [renderLabelContent(), renderIcon()])]);
  }
});
module.exports = CascaderOption;
