"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports[Symbol.toStringTag] = "Module";
var vue = require("vue");
var is = require("./is.js");
var convertCase = require("./convert-case.js");
exports.ShapeFlags = void 0;
(function(ShapeFlags2) {
  ShapeFlags2[ShapeFlags2["ELEMENT"] = 1] = "ELEMENT";
  ShapeFlags2[ShapeFlags2["FUNCTIONAL_COMPONENT"] = 2] = "FUNCTIONAL_COMPONENT";
  ShapeFlags2[ShapeFlags2["STATEFUL_COMPONENT"] = 4] = "STATEFUL_COMPONENT";
  ShapeFlags2[ShapeFlags2["COMPONENT"] = 6] = "COMPONENT";
  ShapeFlags2[ShapeFlags2["TEXT_CHILDREN"] = 8] = "TEXT_CHILDREN";
  ShapeFlags2[ShapeFlags2["ARRAY_CHILDREN"] = 16] = "ARRAY_CHILDREN";
  ShapeFlags2[ShapeFlags2["SLOTS_CHILDREN"] = 32] = "SLOTS_CHILDREN";
  ShapeFlags2[ShapeFlags2["TELEPORT"] = 64] = "TELEPORT";
  ShapeFlags2[ShapeFlags2["SUSPENSE"] = 128] = "SUSPENSE";
  ShapeFlags2[ShapeFlags2["COMPONENT_SHOULD_KEEP_ALIVE"] = 256] = "COMPONENT_SHOULD_KEEP_ALIVE";
  ShapeFlags2[ShapeFlags2["COMPONENT_KEPT_ALIVE"] = 512] = "COMPONENT_KEPT_ALIVE";
})(exports.ShapeFlags || (exports.ShapeFlags = {}));
exports.PatchFlags = void 0;
(function(PatchFlags2) {
  PatchFlags2[PatchFlags2["TEXT"] = 1] = "TEXT";
  PatchFlags2[PatchFlags2["CLASS"] = 2] = "CLASS";
  PatchFlags2[PatchFlags2["STYLE"] = 4] = "STYLE";
  PatchFlags2[PatchFlags2["PROPS"] = 8] = "PROPS";
  PatchFlags2[PatchFlags2["FULL_PROPS"] = 16] = "FULL_PROPS";
  PatchFlags2[PatchFlags2["HYDRATE_EVENTS"] = 32] = "HYDRATE_EVENTS";
  PatchFlags2[PatchFlags2["STABLE_FRAGMENT"] = 64] = "STABLE_FRAGMENT";
  PatchFlags2[PatchFlags2["KEYED_FRAGMENT"] = 128] = "KEYED_FRAGMENT";
  PatchFlags2[PatchFlags2["UNKEYED_FRAGMENT"] = 256] = "UNKEYED_FRAGMENT";
  PatchFlags2[PatchFlags2["NEED_PATCH"] = 512] = "NEED_PATCH";
  PatchFlags2[PatchFlags2["DYNAMIC_SLOTS"] = 1024] = "DYNAMIC_SLOTS";
  PatchFlags2[PatchFlags2["DEV_ROOT_FRAGMENT"] = 2048] = "DEV_ROOT_FRAGMENT";
  PatchFlags2[PatchFlags2["HOISTED"] = -1] = "HOISTED";
  PatchFlags2[PatchFlags2["BAIL"] = -2] = "BAIL";
})(exports.PatchFlags || (exports.PatchFlags = {}));
const getValueFromSlotsOrProps = (name, props, slots) => {
  if (slots == null ? void 0 : slots[name]) {
    return slots[name];
  }
  if (props == null ? void 0 : props[name]) {
    return () => props[name];
  }
  return void 0;
};
const isComponentInstance = (value) => {
  return (value == null ? void 0 : value.$) !== void 0;
};
const isElement = (vn) => {
  return Boolean(vn && vn.shapeFlag & 1);
};
const isComponent = (vn, type) => {
  return Boolean(vn && vn.shapeFlag & 6);
};
const isNamedComponent = (child, name) => {
  return isComponent(child, child.type) && child.type.name === name;
};
const isTextChildren = (child, children) => {
  return Boolean(child && child.shapeFlag & 8);
};
const isArrayChildren = (vn, children) => {
  return Boolean(vn && vn.shapeFlag & 16);
};
const isSlotsChildren = (vn, children) => {
  return Boolean(vn && vn.shapeFlag & 32);
};
const getChildrenString = (children) => {
  var _a, _b;
  let text = "";
  for (const child of children) {
    if (is.isString(child) || is.isNumber(child)) {
      text += String(child);
    } else if (isTextChildren(child, child.children)) {
      text += child.children;
    } else if (isArrayChildren(child, child.children)) {
      text += getChildrenString(child.children);
    } else if (isSlotsChildren(child, child.children)) {
      const _children = (_b = (_a = child.children).default) == null ? void 0 : _b.call(_a);
      if (_children) {
        text += getChildrenString(_children);
      }
    }
  }
  return text;
};
const getFirstComponent = (children) => {
  var _a, _b;
  if (!children) {
    return void 0;
  }
  for (const child of children) {
    if (isElement(child) || isComponent(child)) {
      return child;
    }
    if (isArrayChildren(child, child.children)) {
      const result = getFirstComponent(child.children);
      if (result)
        return result;
    } else if (isSlotsChildren(child, child.children)) {
      const children2 = (_b = (_a = child.children).default) == null ? void 0 : _b.call(_a);
      if (children2) {
        const result = getFirstComponent(children2);
        if (result)
          return result;
      }
    } else if (is.isArray(child)) {
      const result = getFirstComponent(child);
      if (result)
        return result;
    }
  }
  return void 0;
};
const getComponentNumber = (vNodes, componentName) => {
  let count = 0;
  for (const item of vNodes) {
    if (isComponent(item, item.type) && item.type.name === componentName) {
      count++;
    } else if (isArrayChildren(item, item.children)) {
      count += getComponentNumber(item.children, componentName);
    }
  }
  return count;
};
const isEmptyChildren = (children) => {
  if (!children) {
    return true;
  }
  for (const item of children) {
    if (item.children) {
      return false;
    }
  }
  return true;
};
const getChildrenComponents = (children, name, props, startIndex = 0) => {
  var _a, _b, _c;
  const result = [];
  for (const item of children) {
    if (isNamedComponent(item, name)) {
      if (props) {
        const index = startIndex + result.length;
        const extraProps = is.isFunction(props) ? props(item, index) : props;
        result.push(vue.cloneVNode(item, extraProps, true));
      } else {
        result.push(item);
      }
    } else if (isArrayChildren(item, item.children)) {
      result.push(...getChildrenComponents(item.children, name, props, result.length));
    } else if (isSlotsChildren(item, item.children)) {
      const defaultChildren = (_c = (_b = (_a = item.children).default) == null ? void 0 : _b.call(_a)) != null ? _c : [];
      result.push(...getChildrenComponents(defaultChildren, name, props, result.length));
    }
  }
  return result;
};
const mergeFirstChild = (vns, extraProps) => {
  var _a, _b, _c;
  for (let i = 0; i < vns.length; i++) {
    const child = vns[i];
    if (isElement(child) || isComponent(child)) {
      const props = is.isFunction(extraProps) ? extraProps(child) : extraProps;
      vns[i] = vue.cloneVNode(child, props, true);
      return true;
    }
    if (isArrayChildren(child, child.children)) {
      const result = mergeFirstChild(child.children, extraProps);
      if (result)
        return true;
    } else if (isSlotsChildren(child, child.children)) {
      const children = (_c = (_b = (_a = child.children).default) == null ? void 0 : _b.call(_a)) != null ? _c : [];
      const result = mergeFirstChild(children, extraProps);
      if (result) {
        vns[i] = vue.createVNode(child, null, { default: () => children });
        return true;
      }
    }
  }
  return false;
};
const getBooleanProp = (value) => {
  return !!(value || is.isString(value));
};
const getAllElements = (vns) => {
  var _a, _b;
  const results = [];
  for (const vn of vns != null ? vns : []) {
    if (isElement(vn) || isComponent(vn) || isTextChildren(vn, vn.children)) {
      results.push(vn);
    } else if (isArrayChildren(vn, vn.children)) {
      results.push(...getAllElements(vn.children));
    } else if (isSlotsChildren(vn, vn.children)) {
      results.push(...getAllElements((_b = (_a = vn.children).default) == null ? void 0 : _b.call(_a)));
    }
  }
  return results;
};
function unFragment(nodeList) {
  function loop(nodes) {
    const unFragmentNodeList = [];
    nodes.forEach((node) => {
      var _a, _b;
      if (vue.isVNode(node) && node.type === vue.Fragment) {
        if (isSlotsChildren(node, node.children)) {
          unFragmentNodeList.push(...loop(((_b = (_a = node.children).default) == null ? void 0 : _b.call(_a)) || []));
        } else if (isArrayChildren(node, node.children)) {
          unFragmentNodeList.push(...loop(node.children));
        } else if (is.isString(node.children)) {
          unFragmentNodeList.push(node.children);
        }
      } else {
        unFragmentNodeList.push(node);
      }
    });
    return unFragmentNodeList;
  }
  return loop(nodeList);
}
const resolveProps = (vn) => {
  var _a, _b, _c, _d;
  const props = {};
  const options = (_b = (_a = vn.type) == null ? void 0 : _a.props) != null ? _b : {};
  for (const key of Object.keys((_c = vn.props) != null ? _c : {})) {
    const rawValue = (_d = vn.props) == null ? void 0 : _d[key];
    const camelKey = convertCase.toCamelCase(key);
    let resolveValue = rawValue;
    if (rawValue === "" || rawValue === convertCase.toKebabCase(camelKey)) {
      const type = is.isObject(options[camelKey]) ? options[camelKey].type : options[camelKey];
      if (type === Boolean) {
        resolveValue = true;
      }
    }
    props[camelKey] = resolveValue;
  }
  return props;
};
exports.getAllElements = getAllElements;
exports.getBooleanProp = getBooleanProp;
exports.getChildrenComponents = getChildrenComponents;
exports.getChildrenString = getChildrenString;
exports.getComponentNumber = getComponentNumber;
exports.getFirstComponent = getFirstComponent;
exports.getValueFromSlotsOrProps = getValueFromSlotsOrProps;
exports.isArrayChildren = isArrayChildren;
exports.isComponent = isComponent;
exports.isComponentInstance = isComponentInstance;
exports.isElement = isElement;
exports.isEmptyChildren = isEmptyChildren;
exports.isNamedComponent = isNamedComponent;
exports.isSlotsChildren = isSlotsChildren;
exports.isTextChildren = isTextChildren;
exports.mergeFirstChild = mergeFirstChild;
exports.resolveProps = resolveProps;
exports.unFragment = unFragment;
